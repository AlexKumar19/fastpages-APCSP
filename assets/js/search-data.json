{
  
    
        "post0": {
            "title": "Exit ticket javascript",
            "content": "Creating a sorting function . def sort_list(numbers, ascending=True): sorted_numbers = sorted(numbers) if not ascending: sorted_numbers.reverse() return sorted_numbers def print_menu(): print(&quot;Menu:&quot;) print(&quot;1. Sort in ascending order&quot;) print(&quot;2. Sort in descending order&quot;) print(&quot;3. Exit&quot;) def get_menu_choice(): while True: try: choice = int(input(&quot;Enter your choice (1-3): &quot;)) if choice in [1, 2, 3]: return choice else: print(&quot;Invalid choice. Please enter a number from 1 to 3.&quot;) except ValueError: print(&quot;Invalid input. Please enter a number.&quot;) def get_numbers(): numbers = input(&quot;Enter a list of numbers separated by spaces: &quot;).split() numbers = [int(num) for num in numbers] return numbers def main(): print(&quot;Welcome to the Sorting Program!&quot;) while True: print_menu() choice = get_menu_choice() if choice == 1: numbers = get_numbers() sorted_numbers = sort_list(numbers, ascending=True) print(&quot;Sorted list (ascending order):&quot;, sorted_numbers) elif choice == 2: numbers = get_numbers() sorted_numbers = sort_list(numbers, ascending=False) print(&quot;Sorted list (descending order):&quot;, sorted_numbers) elif choice == 3: print(&quot;Exiting the program. Goodbye!&quot;) break main() . Welcome to the Sorting Program! Menu: 1. Sort in ascending order 2. Sort in descending order 3. Exit Exiting the program. Goodbye! . %%html &lt;html&gt; &lt;body&gt; &lt;h2&gt;JavaScript Bubble Sort Example&lt;/h2&gt; &lt;!-- Define a form for user input --&gt; &lt;form id=&quot;numberForm&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;numbers&quot; placeholder=&quot;Enter numbers, separated by commas&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Sort&quot;&gt; &lt;/form&gt; &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; // Bubble sort function function bubbleSort(arr) { var len = arr.length; for (var i = 0; i &lt; len; i++) { for (var j = 0; j &lt; len - i - 1; j++) { if (arr[j] &gt; arr[j + 1]) { // Swap var temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } return arr; } // Form submission event handler document.getElementById(&quot;numberForm&quot;).onsubmit = function(event) { event.preventDefault(); // Parse user input into an array var arr = document.getElementById(&quot;numbers&quot;).value.split(&#39;,&#39;).map(Number); // Sort the array var sortedArr = bubbleSort(arr); // Display the sorted array document.getElementById(&quot;demo&quot;).textContent = sortedArr.toString(); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . JavaScript Bubble Sort Example . . . Trial 1 . This was not a success, THe function did not work properly and I needed to continue my work on the fixing the bubble sort. | . %%html &lt;html&gt; &lt;head&gt; &lt;title&gt;JavaScript Bubble Sort Demo&lt;/title&gt; &lt;script&gt; function sortArray() { var input = document.getElementById(&quot;inputArray&quot;).value; var arr = input.split(&quot;,&quot;).map(Number); // Bubble Sort Algorithm var n = arr.length; for (var i = 0; i &lt; n - 1; i++) { for (var j = 0; j &lt; n - i - 1; j++) { if (arr[j] &gt; arr[j + 1]) { // Swap arr[j] and arr[j + 1] var temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } document.getElementById(&quot;sortedArray&quot;).innerHTML = arr; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;JavaScript Bubble Sort Demo&lt;/h1&gt; &lt;input type=&quot;text&quot; id=&quot;inputArray&quot; placeholder=&quot;Enter comma-separated numbers&quot; /&gt; &lt;button onclick=&quot;sortArray()&quot;&gt;Sort&lt;/button&gt; &lt;p id=&quot;sortedArray&quot;&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . JavaScript Bubble Sort Demo . JavaScript Bubble Sort Demo . Sort . . bubble sort explaination . // Bubble Sort Algorithm var n = arr.length; for (var i = 0; i &lt; n - 1; i++) { for (var j = 0; j &lt; n - i - 1; j++) { if (arr[j] &gt; arr[j + 1]) { // Swap arr[j] and arr[j + 1] var temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } . The bubble sort algorithm is a simple comparison-based sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the entire list is sorted. | The outer loop controls the number of iterations and runs from 0 to n - 1, where n is the length of the array. | The inner loop performs comparisons and swaps, running from 0 to n - i - 1, where i is the current iteration of the outer loop. | Inside the inner loop, adjacent elements are compared, and if they are out of order, they are swapped. | The swapping process continues until the array is fully sorted. | . html explaination . &lt;body&gt; &lt;h1&gt;JavaScript Bubble Sort Demo&lt;/h1&gt; &lt;input type=&quot;text&quot; id=&quot;inputArray&quot; placeholder=&quot;Enter comma-separated numbers&quot; /&gt; &lt;button onclick=&quot;sortArray()&quot;&gt;Sort&lt;/button&gt; &lt;p id=&quot;sortedArray&quot;&gt;&lt;/p&gt; &lt;/body&gt; . uses simple html and input boxes to take in the input, uses onclick to integrate the javascript funcction that ustilizes bubble sort | . %%js console.log(&quot;Store object&quot;); class Product { constructor(name, id, price, category=&quot;Misc&quot;) { this.name = name; this.id = id; this.price = price; this.category = category; } setCategory(category) { this.category = category; } getJSON() { const obj = {type: typeof this, name: this.name, id: this.id, price: this.price, category: this.category}; const json = JSON.stringify(obj); return json; } logIt() { console.info(this); element.append(&quot;Product json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); } } class Store { constructor(manager, products) { this.manager = manager; this.products = products; this.store = [manager, ...products]; this.json = &#39;{&quot;store&quot;:[&#39; + this.store.map(product =&gt; product.getJSON()) + &#39;]}&#39;; } logIt() { console.log(this); element.append(&quot;Store object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); } } function constructStore() { const manager = new Product(&quot;Mr M&quot;, &quot;mgr01&quot;, 0, &quot;Manager&quot;); const products = [ new Product(&quot;Apple&quot;, &quot;prd01&quot;, 1.99, &quot;Fruits&quot;), new Product(&quot;Banana&quot;, &quot;prd02&quot;, 0.99, &quot;Fruits&quot;), new Product(&quot;Tomato&quot;, &quot;prd03&quot;, 2.99, &quot;Vegetables&quot;), new Product(&quot;Potato&quot;, &quot;prd04&quot;, 1.49, &quot;Vegetables&quot;), new Product(&quot;Milk&quot;, &quot;prd05&quot;, 3.49, &quot;Dairy&quot;), new Product(&quot;Cheese&quot;, &quot;prd06&quot;, 4.99, &quot;Dairy&quot;) ]; return new Store(manager, products); } const store = constructStore(); store.logIt(); $(&#39;#jsonText&#39;).text(store.json); . Explaination . constructor(name, id, price, category=&quot;Misc&quot;) { this.name = name; this.id = id; this.price = price; this.category = category; } . Constructor: This is a special method for creating and initializing an object created with a class. There can only be one special method with the name &quot;constructor&quot; in a class. A constructor can use the super keyword to call the constructor of the super class. | . setCategory(category) { this.category = category; } getJSON() { const obj = {type: typeof this, name: this.name, id: this.id, price: this.price, category: this.category}; const json = JSON.stringify(obj); return json; } . Getter and Setter Methods: JavaScript Getters and Setters are used to effectively protect your data, particularly when creating classes. The getter method returns the value of the variable to which it is bound. The setter method sets the value of the variable. | . Extra simulations . %%html &lt;script&gt; function addTask() { var task = document.getElementById(&quot;task&quot;).value; var time = document.getElementById(&quot;time&quot;).value; var table = document.getElementById(&quot;taskTable&quot;); var row = table.insertRow(-1); var taskCell = row.insertCell(0); var timeCell = row.insertCell(1); taskCell.innerHTML = task; timeCell.innerHTML = time; // Clear input fields document.getElementById(&quot;task&quot;).value = &quot;&quot;; document.getElementById(&quot;time&quot;).value = &quot;&quot;; } &lt;/script&gt; &lt;style&gt; # body { # background-color: black; # color: white; # font-family: Arial, sans-serif; # } table { width: 100%; border-collapse: collapse; color: white; } th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; } th { background-color: #333; } input[type=&quot;text&quot;] { background-color: #333; color: white; border: none; padding: 6px; } button { background-color: #333; color: white; padding: 6px 12px; border: none; cursor: pointer; } button:hover { background-color: #555; } &lt;/style&gt; &lt;h2&gt;Add Task&lt;/h2&gt; &lt;table id=&quot;taskTable&quot;&gt; &lt;tr&gt; &lt;th&gt;Task&lt;/th&gt; &lt;th&gt;Time&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;Task: &lt;input type=&quot;text&quot; id=&quot;task&quot;&gt;&lt;/p&gt; &lt;p&gt;Time: &lt;input type=&quot;text&quot; id=&quot;time&quot;&gt;&lt;/p&gt; &lt;button onclick=&quot;addTask()&quot;&gt;Add Task&lt;/button&gt; . Add Task . Task Time . Task: . Time: . Add Task Explaination . function addTask() { var task = document.getElementById(&quot;task&quot;).value; var time = document.getElementById(&quot;time&quot;).value; var table = document.getElementById(&quot;taskTable&quot;); var row = table.insertRow(-1); var taskCell = row.insertCell(0); var timeCell = row.insertCell(1); taskCell.innerHTML = task; timeCell.innerHTML = time; // Clear input fields document.getElementById(&quot;task&quot;).value = &quot;&quot;; document.getElementById(&quot;time&quot;).value = &quot;&quot;; . the addTask() function takes the values entered in the &quot;task&quot; and &quot;time&quot; input fields, adds them as a new row to the table with the id &quot;taskTable&quot;, and then clears the input fields for the next task to be added. | . table { width: 100%; border-collapse: collapse; color: white; } th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; } th { background-color: #333; } input[type=&quot;text&quot;] { background-color: #333; color: white; border: none; padding: 6px; } button { background-color: #333; color: white; padding: 6px 12px; border: none; cursor: pointer; } button:hover { background-color: #555; } . The table styling sets the width to 100%, collapses cell borders, and sets the text color to white. | Table header and data cell styling adds padding, aligns text to the left, and creates a bottom border with a light gray color. | Table header cells have a background color of dark gray. | Text input fields have a dark gray background, white text color, no border, and padding. | Buttons have a dark gray background, white text color, padding, no border, and change to a darker shade of gray on hover. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/ExitTicket",
            "relUrl": "/csp/ExitTicket",
            "date": " • Jun 30, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Jupyter Notebook quiz",
            "content": "This is a quiz that will go over the basic vocabulary that was covered in the the jupyter document. . correct = 0 #function that takes in the question and the answer, then it determines whether the input is correct or incorrect then changes the variable correct depending on the answer def question(prompt, answer): #prints the question print(&quot;Question: &quot; + prompt) #takes in the input msg = input() #checks if the answer is correct or not if (msg).lower() == answer: #prints if the message is correct print(msg + &quot; is correct!&quot;) #changes the correct variable global correct correct += 1 #checks to see if its false else: #prints out that the answer is false print(msg + &quot; is incorrect!&quot;) #Questions questions = [(&quot;What function woud you use to output text?&quot;,&quot;print&quot;), (&quot;What function would you use to take input from the user?&quot;,&quot;input&quot;), (&quot;What keyword do you use to define a function?&quot;, &quot;def&quot;),(&quot;what function checks whether or not a certain condition is true or false?&quot;, &quot;if&quot;)] for i in questions: question(i[0] ,i[1]) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Question: What function woud you use to output text? print is correct! Question: What function would you use to take input from the user? input is correct! Question: What keyword do you use to define a function? if is incorrect! Question: what function checks whether or not a certain condition is true or false? if is correct! You got 75% .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/JupyterNotebookquiz/",
            "relUrl": "/csp/JupyterNotebookquiz/",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 25 Hacks",
            "content": "lossy image . Jpeg images are very lossy, this is an example of a lossy image | In lossy compression, some of the original image data is permanently discarded, resulting in a reduction in quality. The amount of data that is discarded depends on the degree of compression used. Higher levels of compression lead to greater loss of data and lower image quality. | . Lossless image . PNGS are lossless so if you scale the image it does not lose pixels | Lossless compression algorithms typically work by finding patterns in the image data and representing those patterns in a more efficient way. This can result in a significant reduction in file size without any loss of information. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;luka.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 255 - (pixel[0]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average2, average, average, pixel[3])) else: image[&#39;gray_data&#39;].append((average2, average, average)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;luka.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 255 - (pixel[1]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average2, average, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average2, average)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;luka.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 254 - (pixel[2]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average2, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average, average2)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from PIL import Image, ImageFilter # Load image image = Image.open(&quot;luka.jpg&quot;) # Apply Gaussian blur filter blurred_image = image.filter(ImageFilter.GaussianBlur(radius=5)) # Display blurred image blurred_image.save(&quot;blurred_image.jpg&quot;) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Week25hacks",
            "relUrl": "/csp/Week25hacks",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/05/31/Untitled2.html",
            "relUrl": "/2023/05/31/Untitled2.html",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "import requests # initializes an empty dictionary called data with two keys, &quot;pm25&quot; and &quot;pm10&quot; data = {&quot;pm25&quot;: {}, &quot;pm10&quot;: {}} # Creates an empty list called city_list. city_list = [] headers = { &quot;X-RapidAPI-Key&quot;: &quot;093c731fb9mshd2b4db3a5a833acp172c94jsn194a4fa97d9b&quot;, &quot;X-RapidAPI-Host&quot;: &quot;air-quality-by-api-ninjas.p.rapidapi.com&quot; } # Collaborated with Alex Kumar. We made our own modifications to it regarding different dictionaries and lists, but the idea is the same - to find the PM2.5 concentration def find_pm25(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} response = requests.get(url, headers=headers, params=querystring) try: data_json = response.json() pm25_concentration = data_json[&quot;PM2.5&quot;] # Below, we are checking if the value of pm25_concentration is not equal to None. If it is not None, it means that the API has returned a value for the PM2.5 concentration for the given city, and the code proceeds to print the PM2.5 concentration value for that city if pm25_concentration is not None: print(f&quot;The PM2.5 concentration for {city} is {pm25_concentration[&#39;concentration&#39;]}&quot;) if pm25_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of air quality. Enjoy!&quot;) else: print(&quot;This is unsafe air quality. Be cautious!&quot;) data[&quot;pm25&quot;][city] = pm25_concentration[&quot;concentration&quot;] city_list.append(city) # If no data is available for the entered city else: print(f&quot;Sorry, there is no PM2.5 data available for {city}.&quot;) # If some other error occurred except: print(&quot;Sorry, an error occurred while processing your request.&quot;) # Again, collaborated with Alex Kumar. We made our own modifications to it regarding different dictionaries and lists, but the idea is the same - to find the PM10 concentration def find_pm10(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} response = requests.get(url, headers=headers, params=querystring) try: data_json = response.json() pm10_concentration = data_json[&quot;PM10&quot;] if pm10_concentration is not None: print(f&quot;The PM10 concentration for {city} is {pm10_concentration[&#39;concentration&#39;]}&quot;) if pm10_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of air quality. Enjoy!&quot;) else: print(&quot;This is unsafe air quality. Be cautious!&quot;) data[&quot;pm10&quot;][city] = pm10_concentration[&quot;concentration&quot;] city_list.append(city) else: print(f&quot;Sorry, there is no PM10 data available for {city}.&quot;) except: print(&quot;Sorry, an error occurred while processing your request.&quot;) # This while loop was worked on collaboratively by myself and Alex Kumar. We both then made our own modifications to the code, but the idea was mutual. # The purpose of the following is to provide a list of options that continues to loop over and over, allowing the user to make multiple choices before they exit. while True: print(&quot;Here are your options:&quot;) print(&quot;1. Find PM2.5 concentration for a city&quot;) print(&quot;2. Find PM10 concentration for a city&quot;) print(&quot;3. See all your results so far&quot;) print(&quot;4. See just your city list so far&quot;) print(&quot;5. Exit&quot;) choice = input(&quot;Enter choice (1-5): &quot;) if choice == &quot;1&quot;: city = input(&quot;Enter a city: &quot;) find_pm25(city) elif choice == &quot;2&quot;: city = input(&quot;Enter a city: &quot;) find_pm10(city) # Here we are printing out PM2.5 and PM10 concentration values for each city in the user&#39;s data, along with a message on the safety of the air quality based on the concentration level. elif choice == &quot;3&quot;: print(&quot;PM2.5 values:&quot;) for city, pm25 in data[&quot;pm25&quot;].items(): safe_or_not = &quot;safe&quot; if pm25 &lt; 25 else &quot;unsafe&quot; print(f&quot;{city}: {pm25} ({safe_or_not})&quot;) print(&quot;PM10 values:&quot;) for city, pm10 in data[&quot;pm10&quot;].items(): safe_or_not = &quot;safe&quot; if pm10 &lt; 25 else &quot;unsafe&quot; print(f&quot;{city}: {pm10} ({safe_or_not})&quot;) elif choice == &quot;4&quot;: print(&quot;City list:&quot;) for item in city_list: city_name = item.split(&quot;:&quot;)[0] print(city_name) # Here for choice 5, I give full credit to Alex Kumar for writing the code. elif choice == &quot;5&quot;: break else: print(&quot;Sorry, but this isn&#39;t a valid choice. Please try again!&quot;) . Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 1 Enter a city: Los Angeles The PM2.5 concentration for Los Angeles is 14.04 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 1 Enter a city: Boston The PM2.5 concentration for Boston is 2.06 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 1 Enter a city: New York City The PM2.5 concentration for New York City is 1.76 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 3 PM2.5 values: Los Angeles: 14.04 (safe) Boston: 2.06 (safe) New York City: 1.76 (safe) PM10 values: Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 4 City list: Los Angeles Boston New York City Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 2 Enter a city: Miami The PM10 concentration for Miami is 19.87 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 4 City list: Los Angeles Boston New York City Miami Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 5 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/05/31/Untitled1.html",
            "relUrl": "/2023/05/31/Untitled1.html",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Title",
            "content": "import requests storeddata = [{&#39;pm2.5&#39;: {}}, {&#39;pm10&#39;: {}}] # API call that adds the pm25 to the list def findpm25(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;air-quality-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) data = response.json() pm25_concentration = data[&quot;PM2.5&quot;] print(&quot;pm25_concentration for &quot; + str(city) + &quot; is &quot; + str(pm25_concentration[&quot;concentration&quot;])) if pm25_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of pollution&quot;) else: print(&quot;This is unsafe&quot;) if city in storeddata[0][&#39;pm2.5&#39;]: print(f&quot;{city} already exists in pm2.5 dictionary&quot;) else: storeddata[0][&#39;pm2.5&#39;][city] = pm25_concentration[&quot;concentration&quot;] print(f&quot;{city} added to pm2.5 dictionary&quot;) # API call for pm10 function def findpm10(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;air-quality-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) data = response.json() pm10_concentration = data[&quot;PM2.5&quot;] print(&quot;pm10_concentration for &quot; + str(city) + &quot; is &quot; + str(pm10_concentration[&quot;concentration&quot;])) if pm10_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of pollution&quot;) else: print(&quot;This is unsafe&quot;) # This adds the data to the list of stored values if city in storeddata[1][&#39;pm10&#39;]: print(f&quot;{city} already exists in pm2.5 dictionary&quot;) else: storeddata[1][&#39;pm10&#39;][city] = pm10_concentration[&quot;concentration&quot;] print(f&quot;{city} added to pm10 dictionary&quot;) # Menu function that will continue to loop over the choices allowing user to do menu multiple times while True: print(&quot;Menu:&quot;) print(&quot;1. Find PM2.5 concentration for a city&quot;) print(&quot;2. Find PM10 concentration for a city&quot;) print(&quot;3. see the list of stored values for pm2.5&quot;) print(&quot;4. see the list of stored values for pm10&quot;) print(&quot;5. Quit&quot;) choice = input(&quot;Enter choice (1-4): &quot;) if choice == &quot;1&quot;: city = input(&quot;Enter city name: &quot;) findpm25(city) elif choice == &quot;2&quot;: city = input(&quot;Enter city name: &quot;) findpm10(city) elif choice == &quot;3&quot;: pm25data = storeddata[0][&#39;pm2.5&#39;] for city, pm in pm25data.items(): print(city, pm) elif choice == &quot;4&quot;: pm10data = storeddata[1][&#39;pm10&#39;] for city, pm in pm10data.items(): print(city, pm) elif choice == &quot;5&quot;: break else: print(&quot;Invalid choice. Please try again.&quot;) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/05/31/Untitled.html",
            "relUrl": "/2023/05/31/Untitled.html",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Sortingdemo",
            "content": "&lt;!DOCTYPE html&gt; . . Simple Sorting App . Add name Sort Ascending Sort Descending . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/05/31/SortingDemo.html",
            "relUrl": "/2023/05/31/SortingDemo.html",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDb with extra entries . Purpose of this cell is to define InfoDb and add entries about certain people and traits that they have . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . For loop to print out InfoDb . Purpose of this independent cell is to use a normal loop that goes through Infodb printint out all the entries. The for loop automates the process so we do not have to manually print out all the enries by hand. . for item in InfoDb: #print function that goes through and formats print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,item[&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . While loop to print out InfoDb . The purpose of this independent cell block is use a while loop to go print out InfoDb while a certain variable is less than the length of InfoDb. This allows us to print out the data without manually inputting the values to the console . #Sets number to the length of InfoDb number = len(InfoDb) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) i+=1 . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . for loop with index to print out InfoDb . The purpose of this independent code cell is to use a for loop with an index that will go over all the data in infoDB without having to manually print out every single statement. The for loop will repeat the print function for every single entry in InfoDb . for i in range(len(InfoDb)): #prints out the items for every i in the InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Recursion to print out all of InfoDb . This recursion which utilizes a function to print out all the data in InfoDb is used to automate the printint process so we will not have to manually print out every single line. It uses a function that also uses embedded if statements that also calls itself at the end. This allows us to go over every single entry inside of InfoDb. . #sets variable n equal to the length of Info Db n = len(InfoDb) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Phone: {} &quot;&quot;&quot;.format(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], InfoDb[i][&quot;DOB&quot;], InfoDb[i][&quot;Residence&quot;], InfoDb[i][&quot;Email&quot;], InfoDb[i][&quot;Phone&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Outputting data in Reverse Order . Names_of_basketball_players = [&quot;Lebron James&quot;, &quot;Kobe Bryant&quot;, &quot;Chris Paul&quot;, &quot;Kevin Durant&quot;, &quot;Jason Tatum&quot;, &quot;Paul George&quot;, &quot;Kyrie Irving&quot;] #prints the list out in reverse order print(Names_of_basketball_players[::-1]) . [&#39;Kyrie Irving&#39;, &#39;Paul George&#39;, &#39;Jason Tatum&#39;, &#39;Kevin Durant&#39;, &#39;Chris Paul&#39;, &#39;Kobe Bryant&#39;, &#39;Lebron James&#39;] . Quiz That stores into a dictionary . The purpose of this code block is to test for basic animal trivia and it does this through multiple functions that stores the answers and questions in a dictionary. It calls back to the dictionary using for loops and then embedded whithin the for loops, it calls back to the function to print out the question and take input. . def question_and_answers(input): #function that prints out the question and takes in input print(&quot;Question: &quot; + input) correct = 0 #percent correct variable #dictionary with answers questions_answers = [{&quot;Whats the largest mammal&quot; : &quot;blue whale&quot;, &quot;whats the fastest animal&quot; : &quot;cheetah&quot;, &quot;what color is a flamingo&quot; : &quot;pink&quot;, &quot;Whats is the tallest animal&quot; : &quot;giraffe&quot;}] for i in questions_answers: for question, answer in i.items(): question_and_answers(question) # calls back to the questionanswer function response = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if response.lower() == answer: # if the answer provided is correct print(response, &quot;is correct&quot;) correct += 1 else: # if the answer provided is wrong print(response, &quot;is wrong&quot;) print(correct/4*100, &quot;%&quot;) #outputs the correct variable as a percentage . Question: Whats the largest mammal blue whale is correct Question: whats the fastest animal cheetah is correct Question: what color is a flamingo pink is correct Question: Whats is the tallest animal giraffe is correct 100.0 % .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/python_lists_dictionaries",
            "relUrl": "/csp/python_lists_dictionaries",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Algorithms and logic",
            "content": "This uses python to make a fibonacci sequence . def fibonacci(n): numbers = [] for i in range(n): if i == 0 : print(&quot;0&quot;) numbers.append(0) elif i ==1 : print(&quot;1&quot;) numbers.append(1) else: print(numbers[i-2] +numbers[i-1]) numbers.append(numbers[i-1] + numbers[i-2]) fibonacci(10) # calls the function fibonacci and gives in 10 . 0 1 1 2 3 5 8 13 21 34 . This also runs the fibonacci however in javascript . function fibonacci(n) { var numbers = [] for (let i = 0; i &lt; n; i++) { if (i===0) { numbers.push(0) console.log(&quot;0&quot;) } else if (i===1) { numbers.push(1) console.log(&quot;1&quot;) } else { numbers.push(numbers[i-2] + numbers[i-1]) console.log(numbers[i-2] + numbers[i-1]) } } } fibonacci(7) . 0 1 1 2 3 5 8 . This uses javascript and html to test for a palindrome . // &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;give palindrome&quot; class=&quot;form-control&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;text&quot; placeholder=&quot;palindrome?&quot; class=&quot;form-control&quot;&gt; &lt;script&gt; var input = document.getElementById(&quot;input&quot;) document.getElementById(&quot;input&quot;).addEventListener(&quot;change&quot;, Palindrome); function Palindrome() { console.log(document.getElementById(&quot;input&quot;).value) const word = document.getElementById(&quot;input&quot;).value var reverse = &quot;&quot; for (var i = word.length - 1; i &gt;= 0; i--) { reverse += word[i]; } console.log(reverse) if (reverse== word) { document.getElementById(&quot;text&quot;).value = &quot;this is a palindrome&quot; } else { document.getElementById(&quot;text&quot;).value = &quot;this is not a palindrome&quot; } } &lt;/script&gt; . . TRUTH TABLE . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {/* &lt;p id=&quot;text1&quot; style=&quot;padding: 15px; line-height: 1.6; border: 1px solid white; width: 150px&quot;&gt; &lt;script&gt; */} function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() &lt;/script&gt; . Come up with a Procedure/Function that show... . The function that I created is the truth function that generates a truth table using binary data . Data Abstraction . uses an array of arrays with binary data that will represent the rows in the truth table Procedural Abstraction | I made a truth function that runs an algorithm that populates the truth table, this can be called to multiple times because it is a function Algorithm using iteration and selection | I used multiple loops to parse through the binary data and evaluate the binary logic to determine whether the statements where true | if statements can be used to check if the binary logic was true or not Frontend / Backend, using an API and persistent storage | made html text box that was populated by the javascript | . &lt;/div&gt; .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Algorithmsandlogic",
            "relUrl": "/csp/Algorithmsandlogic",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) # Outputs the quote using print() . Your random inspirational quote is, &#34;The bad news is time flies. The good news is you’re the pilot.&#34; -- –Michael Altshuler . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random #importing packages import math from flask import Flask, request app = Flask(__name__) # Creating the flask application # Creating the array of quotes for the API to parse through quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] # Creates a function that uses random to generate a random number whithin the range of the quotes array def randomgen(): number = int(random.random()*len(quotes)) return number # Creating the GET endpoint, so when we call it using /get, it will call to the randomgen function and return the quote from the array @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;Your quote is&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Hacks for Unit 3.9 to 3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) . It is important to know that algorithms that look different can do the same thing so that when working with others and people have various codes it is important to open your mind to understand the code rather than rejecting it because it looks differet. It is also important to know that even code that looks similar can have different purposes so we dont jump to conclusions when evaluating code for the converted conditional to boolean conversion(0.10) total: 0.25 | . sun = False raincloud = True if sun == True: print(&quot;it is sunny&quot;) else: if raincloud == True: print(&quot;it is cold and rainy&quot;) else: print(&quot;not rainy or hot&quot;) . it is cold and rainy . sun = False raincloud = True sunny = not(raincloud) and sun if sunny == True: print(&quot;it is sunny&quot;) if sunny ==False: print(&quot;it is not sunny&quot;) . it is not sunny . 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . If the party has a size 1 the cost is 10 If the party has size 2 the cost is 15 If the party has size 3 then the cost is 20 if the party has size 4 then the cost is 25 print the cost of the party . . partysize = 4 if partysize ==1: print(&quot;cost is 10&quot;) elif partysize ==2: print(&quot;cost is 15&quot;) elif partysize ==3: print(&quot;cost is 20&quot;) elif partysize ==4: print(&quot;cost is 25&quot;) . cost is 25 . 3.9.3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game Make a function that gets the user guess Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): out = input(&quot;What number?&quot;) return out #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;below the actual&quot;) #change this lower_bound = guess elif int(guess) &gt; int(number): print(&quot;above the actual&quot;) #change this upper_bound = guess elif int(guess) == int(number): upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 50. above the actual Guess a number between 0 and 50. You guessed 30. above the actual Guess a number between 0 and 30. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 5. below the actual Guess a number between 5 and 10. You guessed 7. below the actual Guess a number between 7 and 10. You guessed 8. below the actual Guess a number between 8 and 10. You guessed 9. You guessed the number in 8 guesses! . Hacks: calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . . One = [12,14,44,57,79,80,99] Two = [92,43,74,66,30,12,1] Three = [7,13,96,111,33,84,60] Lists = [One, Two, Three] # loops through the range of the length of lists for x in range(len(Lists)): #sorts the list in order Lists[x].sort() #takes the middle index middleindex = int(len(Lists[x])/2) #outputs print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,Lists[x][middleindex]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . c is out of orderso therefore it is c .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/3111hacks",
            "relUrl": "/csp/3111hacks",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Hacks for Unit 3.17 and 3.18",
            "content": "Hacks/Assignment Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . num = [] count = 0 def collatz(i): global count global num while i &gt; 1: if (i % 2): # i is odd i = 3*i + 1 count +=1 num.append(i) else: # i is even i = i//2 count +=1 num.append(i) else: print(count) print(num) i = int(input(&#39;Enter i: &#39;)) collatz(i) . 5 [16, 8, 4, 2, 1] . Hacks/assignment Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] sum = num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] +num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] sum2 = sum + sum +sum + sum + sum + sum + sum + sum + sum + sum + sum +sum + sum + sum + sum + sum + sum + sum print(sum2) . 3600 . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] print(36*sum(num)) . 3600 . The bottom one is more efficient because it uses built in functions to add the numbers instead of having to add each one individually which takes a long time. Then adding the sum everytime is even more inneficient . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] if True: sum = 0 for i in num: sum += num[i-1] print(sum*36) . 3600 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/317hacks",
            "relUrl": "/csp/317hacks",
            "date": " • May 31, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "animations",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[&quot;&quot;, &quot;/&quot;, &quot; &quot;], [&quot;&quot;, &quot;/&quot;, &quot; &quot;], [&quot;&quot;,&quot;/&quot;, &quot;&quot;, &quot; &quot;], [&quot;/&quot;, &quot;|&quot;,&quot;|&quot;, &quot; &quot;], [&quot;/&quot;, &quot;|&quot;,&quot;|&quot;, &quot; &quot;], [&quot;/&quot;, &quot;|&quot;,&quot;|&quot;, &quot; &quot;], [&quot;/&quot;, &quot;|&quot;,&quot;|&quot;, &quot; &quot;], [&quot;&quot;, &quot;|&quot;,&quot;|&quot;, &quot;&quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(mtrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 8 x ~3 Classic nested loops using ij indexes / / / / | | / | | / | | / | | | | Enhanced nested for loops / / / / | | / | | / | | / | | | | For loop with shortcut (*) row expansion / / / / | | / | | / | | / | | | | Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship functio . | |/ __ |__/ ____/ - . import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = &#39; u001b[38;5;214m&#39; SHIP_COLOR = &#39; u001b[38;5;214m&#39; RESET_COLOR = &#39; u001b[38;5;214m&#39; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; . &quot;) print(sp + &quot; . &quot;) print(sp + &quot; .&quot;) print(&quot; ~~~~~/&quot;) print(&quot; /&quot;) print(&quot; /&quot;) print(&quot; V&quot;) print(&quot; |&quot;) print(&quot; |&quot;) print(&quot;&quot;) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(0) # cll to function with parameter time.sleep(2) ship_print(2) time.sleep(2) ship() # activate/call ship function . . . . ~~~~~/ / / V | | . KeyboardInterrupt Traceback (most recent call last) /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb Cell 12 in &lt;cell line: 42&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; ship_print(2) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; time.sleep(2) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; ship() /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb Cell 12 in ship() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=34&#39;&gt;35&lt;/a&gt; for position in range(start, distance, step): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; ship_print(0) # cll to function with parameter &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; time.sleep(2) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; ship_print(2) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-05-16-DS-arrays_lab.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; time.sleep(2) KeyboardInterrupt: .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/animations",
            "relUrl": "/csp/animations",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "AI work",
            "content": "&lt;!DOCTYPE html&gt; . . Favorite Foods . . Add Food Stop Get Cuisine Recommendation . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/aiworktesting/",
            "relUrl": "/csp/aiworktesting/",
            "date": " • May 15, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "college board corrections",
            "content": ". . This situation is consistent with an overflow error. When the count was incremented beyond the maximum value that can be represented by a fixed number of bits, the count wrapped around to a negative number. | . . To ensure that the data gathered from testing a new algorithm is representative of all users, developers should test it on a random sample of users. This will help to avoid bias in the data, as it will be collected from a variety of users with different backgrounds and experiences. | . . An undecidable problem is a problem that cannot be solved by a computer program. This is because there is no algorithm that can always provide a correct yes-or-no answer to the problem. Some instances of an undecidable problem may have a solution, but there is no general solution that can be applied to all instances of the problem. | . . Step 4 iterates over the list and increments the count variable each time the target value is found. Step 5 prints “true” if the count variable appears more than once in the list. | . . The code segment assigns the correct number of bonus points to the bonus variable for all possible values of the timer variable. If the timer variable is greater than 60, the bonus variable is assigned 1500 points. If the timer variable is between 30 and 60, inclusive, the bonus variable is assigned 1000 points. If the timer variable is less than 30, the bonus variable is assigned 500 points. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/correctionscollegeboard/",
            "relUrl": "/csp/correctionscollegeboard/",
            "date": " • May 8, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Title",
            "content": "",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/05/05/testjava.html",
            "relUrl": "/2023/05/05/testjava.html",
            "date": " • May 5, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "College Board MCQ corrections",
            "content": ". . I got this wrong because I did not account for the indexing This would be the result if the loop header was changed to REPEAT 3 TIMES. | . . Fractions are sometimes approximated by decimals, which can lead to rounding errors. Integers, on the other hand, do not have this problem. | . . Both codes would move the robot to the correct square | . . I got this wrong because The two programs initialize i to different values, but they print the same values inside the loop because Program A prints i and then increments it, while Program B increments i and then prints it. | . . The rate of growth was constant however during the later years it was no longer constant | . . I made a problem with reading the graph incorrectly this was an arithmetic error | . . This code segment subtracts the lowest score from the sum of all the scores. It then incorrectly divides the result by the number of scores, instead of dividing it by one less than the number of scores. | . . It can be done by only removing two connections | . . This code segment stores the substring “jack” in the variable animal. It then concatenates “jack” with “a”, storing the result “jacka” in animal. Finally, it concatenates the substring “lope” with “jacka”, storing the result “lopejacka” in animal. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/MCQcorrectionspracexam/",
            "relUrl": "/csp/MCQcorrectionspracexam/",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Title",
            "content": "import requests # initializes an empty dictionary called data with two keys, &quot;pm25&quot; and &quot;pm10&quot; data = {&quot;pm25&quot;: {}, &quot;pm10&quot;: {}} # Creates an empty list called city_list. city_list = [] headers = { &quot;X-RapidAPI-Key&quot;: &quot;093c731fb9mshd2b4db3a5a833acp172c94jsn194a4fa97d9b&quot;, &quot;X-RapidAPI-Host&quot;: &quot;air-quality-by-api-ninjas.p.rapidapi.com&quot; } # Collaborated with Alex Kumar. We made our own modifications to it regarding different dictionaries and lists, but the idea is the same - to find the PM2.5 concentration def find_pm25(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} response = requests.get(url, headers=headers, params=querystring) try: data_json = response.json() pm25_concentration = data_json[&quot;PM2.5&quot;] # Below, we are checking if the value of pm25_concentration is not equal to None. If it is not None, it means that the API has returned a value for the PM2.5 concentration for the given city, and the code proceeds to print the PM2.5 concentration value for that city if pm25_concentration is not None: print(f&quot;The PM2.5 concentration for {city} is {pm25_concentration[&#39;concentration&#39;]}&quot;) if pm25_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of air quality. Enjoy!&quot;) else: print(&quot;This is unsafe air quality. Be cautious!&quot;) data[&quot;pm25&quot;][city] = pm25_concentration[&quot;concentration&quot;] city_list.append(city) # If no data is available for the entered city else: print(f&quot;Sorry, there is no PM2.5 data available for {city}.&quot;) # If some other error occurred except: print(&quot;Sorry, an error occurred while processing your request.&quot;) # Again, collaborated with Alex Kumar. We made our own modifications to it regarding different dictionaries and lists, but the idea is the same - to find the PM10 concentration def find_pm10(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} response = requests.get(url, headers=headers, params=querystring) try: data_json = response.json() pm10_concentration = data_json[&quot;PM10&quot;] if pm10_concentration is not None: print(f&quot;The PM10 concentration for {city} is {pm10_concentration[&#39;concentration&#39;]}&quot;) if pm10_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of air quality. Enjoy!&quot;) else: print(&quot;This is unsafe air quality. Be cautious!&quot;) data[&quot;pm10&quot;][city] = pm10_concentration[&quot;concentration&quot;] city_list.append(city) else: print(f&quot;Sorry, there is no PM10 data available for {city}.&quot;) except: print(&quot;Sorry, an error occurred while processing your request.&quot;) # This while loop was worked on collaboratively by myself and Alex Kumar. We both then made our own modifications to the code, but the idea was mutual. # The purpose of the following is to provide a list of options that continues to loop over and over, allowing the user to make multiple choices before they exit. while True: print(&quot;Here are your options:&quot;) print(&quot;1. Find PM2.5 concentration for a city&quot;) print(&quot;2. Find PM10 concentration for a city&quot;) print(&quot;3. See all your results so far&quot;) print(&quot;4. See just your city list so far&quot;) print(&quot;5. Exit&quot;) choice = input(&quot;Enter choice (1-5): &quot;) if choice == &quot;1&quot;: city = input(&quot;Enter a city: &quot;) find_pm25(city) elif choice == &quot;2&quot;: city = input(&quot;Enter a city: &quot;) find_pm10(city) # Here we are printing out PM2.5 and PM10 concentration values for each city in the user&#39;s data, along with a message on the safety of the air quality based on the concentration level. elif choice == &quot;3&quot;: print(&quot;PM2.5 values:&quot;) for city, pm25 in data[&quot;pm25&quot;].items(): safe_or_not = &quot;safe&quot; if pm25 &lt; 25 else &quot;unsafe&quot; print(f&quot;{city}: {pm25} ({safe_or_not})&quot;) print(&quot;PM10 values:&quot;) for city, pm10 in data[&quot;pm10&quot;].items(): safe_or_not = &quot;safe&quot; if pm10 &lt; 25 else &quot;unsafe&quot; print(f&quot;{city}: {pm10} ({safe_or_not})&quot;) elif choice == &quot;4&quot;: print(&quot;City list:&quot;) for item in city_list: city_name = item.split(&quot;:&quot;)[0] print(city_name) # Here for choice 5, I give full credit to Alex Kumar for writing the code. elif choice == &quot;5&quot;: break else: print(&quot;Sorry, but this isn&#39;t a valid choice. Please try again!&quot;) . Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 1 Enter a city: Los Angeles The PM2.5 concentration for Los Angeles is 14.04 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 1 Enter a city: Boston The PM2.5 concentration for Boston is 2.06 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 1 Enter a city: New York City The PM2.5 concentration for New York City is 1.76 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 3 PM2.5 values: Los Angeles: 14.04 (safe) Boston: 2.06 (safe) New York City: 1.76 (safe) PM10 values: Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 4 City list: Los Angeles Boston New York City Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 2 Enter a city: Miami The PM10 concentration for Miami is 19.87 This is a safe level of air quality. Enjoy! Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 4 City list: Los Angeles Boston New York City Miami Here are your options: 1. Find PM2.5 concentration for a city 2. Find PM10 concentration for a city 3. See all your results so far 4. See just your city list so far 5. Exit Enter choice (1-5): 5 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/04/30/Untitled1.html",
            "relUrl": "/2023/04/30/Untitled1.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Title",
            "content": "import requests storeddata = [{&#39;pm2.5&#39;: {}}, {&#39;pm10&#39;: {}}] # API call that adds the pm25 to the list def findpm25(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;air-quality-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) data = response.json() pm25_concentration = data[&quot;PM2.5&quot;] print(&quot;pm25_concentration for &quot; + str(city) + &quot; is &quot; + str(pm25_concentration[&quot;concentration&quot;])) if pm25_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of pollution&quot;) else: print(&quot;This is unsafe&quot;) if city in storeddata[0][&#39;pm2.5&#39;]: print(f&quot;{city} already exists in pm2.5 dictionary&quot;) else: storeddata[0][&#39;pm2.5&#39;][city] = pm25_concentration[&quot;concentration&quot;] print(f&quot;{city} added to pm2.5 dictionary&quot;) # API call for pm10 function def findpm10(city): url = &quot;https://air-quality-by-api-ninjas.p.rapidapi.com/v1/airquality&quot; querystring = {&quot;city&quot;: city} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;air-quality-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) data = response.json() pm10_concentration = data[&quot;PM2.5&quot;] print(&quot;pm10_concentration for &quot; + str(city) + &quot; is &quot; + str(pm10_concentration[&quot;concentration&quot;])) if pm10_concentration[&quot;concentration&quot;] &lt; 25: print(&quot;This is a safe level of pollution&quot;) else: print(&quot;This is unsafe&quot;) # This adds the data to the list of stored values if city in storeddata[1][&#39;pm10&#39;]: print(f&quot;{city} already exists in pm2.5 dictionary&quot;) else: storeddata[1][&#39;pm10&#39;][city] = pm10_concentration[&quot;concentration&quot;] print(f&quot;{city} added to pm10 dictionary&quot;) # Menu function that will continue to loop over the choices allowing user to do menu multiple times while True: print(&quot;Menu:&quot;) print(&quot;1. Find PM2.5 concentration for a city&quot;) print(&quot;2. Find PM10 concentration for a city&quot;) print(&quot;3. see the list of stored values for pm2.5&quot;) print(&quot;4. see the list of stored values for pm10&quot;) print(&quot;5. Quit&quot;) choice = input(&quot;Enter choice (1-4): &quot;) if choice == &quot;1&quot;: city = input(&quot;Enter city name: &quot;) findpm25(city) elif choice == &quot;2&quot;: city = input(&quot;Enter city name: &quot;) findpm10(city) elif choice == &quot;3&quot;: pm25data = storeddata[0][&#39;pm2.5&#39;] for city, pm in pm25data.items(): print(city, pm) elif choice == &quot;4&quot;: pm10data = storeddata[1][&#39;pm10&#39;] for city, pm in pm10data.items(): print(city, pm) elif choice == &quot;5&quot;: break else: print(&quot;Invalid choice. Please try again.&quot;) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/04/30/Untitled.html",
            "relUrl": "/2023/04/30/Untitled.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Computer Network Hacks",
            "content": ".",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Computernetworks/",
            "relUrl": "/csp/Computernetworks/",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: Intel Core i7 | Memory in GB: 32 gigs | Storage in GB: 1 terabyte | OS: Windows 10 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: lets a user interact with the computer- mouse, microphone, keyboard Output devices: computer communicate with the user- speaker, headphones, monitor Program File: file that the computer can execute to run a program- games, media player, website Program Code: instructions for the computer when a program file is run- stuff behind the game, website, and stuff Processes: program is executed in multiple threads- searching, debugging, sorting, etc Ports: endpoint that lets a server handle requests from devices over the internet Data File: has information in the file, or data in a specific format, can be CRUDed, and tells program what to do Inspect Running Code: the inspect element on browser, shows what is happening behind what we see normally, cherry tomatoes when we debug in VS code Inspect Variables: see the values on the variables to debug and see what is happening | . how does a computer work . The basic parts of a computer are: Input devices: These devices allow users to input data into the computer, such as the keyboard, mouse, and microphone. Output devices: These devices allow users to see or hear the results of the computer’s processing, such as the monitor, printer, and speakers. Storage devices: These devices store data that is not currently being used by the computer, such as the hard drive, CD-ROM, and DVD-ROM. Central processing unit (CPU): The CPU is the “brain” of the computer. It is responsible for carrying out the instructions that are given to it by the computer’s software. Memory: Memory is used to store data that is currently being used by the computer, such as the operating system, applications, and data files. . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path –&gt; A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. Route –&gt; Routing is the process of finding a path from sender to receiver. Computer System –&gt; A computing system is a group of computing devices and programs working together for a common purpose. Computer Device –&gt; A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. Bandwidth –&gt; Bandwidth is usually measured in bits per second. Computer Network –&gt; A computer network is a group of interconnected computing devices capable of sending or receiving data. | . | . The OSI model is a conceptual model that describes the seven layers of a network architecture. The network layer is responsible for routing data between differnt networks, and the application layer is responsible for providing services to the user, such as web browsing or email. . The network layer works by breaking down data into smaller units called packets. Each packet contains the source and destination addresses, as well as the data itself. The network layer then uses routing protocols to determine the best path for each packet to take. Once the packets reach their destination, they are reassembled into the original data. . The application layer is responsible for providing services to the user. For example, the web browser application uses the application layer to request web pages from a web server. The web server then uses the application layer to send the web pages back to the web browser. . The OSI model is a helpful tool for understanding how networks work. It can also be used to troubleshoot network problems. For example, if a user is unable to access a web page, a network administrator can use the OSI model to identify the layer at which the problem is occurring. . Here is a brief overview of the seven layers of the OSI model: . Physical layer: The physical layer is responsible for the transmission of raw data bits over a physical medium, such as a copper wire or an optical fiber. Data link layer: The data link layer is responsible for error detection and correction, as well as flow control. Network layer: The network layer is responsible for routing data between different networks. Transport layer: The transport layer is responsible for ensuring that data is delivered in the correct order and that it is not corrupted. Session layer: The session layer is responsible for managing the communication between two applications. Presentation layer: The presentation layer is responsible for converting data into a format that can be understood by the application. Application layer: The application layer is responsible for providing services to the user. . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | T | F | F | T | F | F | T . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. Fault tolerance is a process that lets an OS respond to failure in the hardware or software. So the system won’t break down completely due to an error or failure. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? The frontend and backend of a web application are naturally distributed. The frontend is typically hosted on a web server, which is a single machine. The backend, on the other hand, can be distributed across multiple machines. This is because the backend typically consists of different components, such as a database, a web server, and an application server. Each of these components can be hosted on its own machine. | . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article The command ENV GUNICORN_CMD_ARGS=”–workers=1 –bind=0.0.0.0:8086” sets the environment variable GUNICORN_CMD_ARGS to the value “–workers=1 –bind=0.0.0.0:8086”. The GUNICORN_CMD_ARGS environment variable is used to pass additional command line arguments to Gunicorn. | . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) . personal example . import time def factorial(n): # Calculate the factorial of n. if n == 0: return 1 else: return n * factorial(n - 1) if __name__ == &quot;__main__&quot;: # Start the timer. start_time = time.time() # Calculate the factorial of 100 in parallel. results = [] for i in range(10): results.append(factorial(100)) # Stop the timer. end_time = time.time() # Print the results. print(results) # Print the elapsed time. print(&quot;Elapsed time:&quot;, end_time - start_time) . This code calculates the factorial of 100 in parallel. It starts by creating a list of 10 worker processes. It then submits the factorial function to each worker process. The worker processes calculate the factorial of 100 in parallel. The results of the calculation are then collected and printed. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/04/30/AP_computers_networks.html",
            "relUrl": "/2023/04/30/AP_computers_networks.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "P4-M 4/28 Binary Lesson HACKS",
            "content": "Lesson Note Taker . Fill in the blanks below during the binary presentation. You can visit our website here!^ Due to last minute deployment issues, may need to run a local server . git clone https://github.com/TheoH32/Runtime_Terror.git | run: | bundle install | bundle exec jekyll serve | . Binary . Binary is a base 2 number system. | 0 represents off and 1 represents on | A bit is the minimum unit of binary information stored in a computer system. | Boolean Expressions . A boolean expression is a logical statement that is either TRUE or FALSE and compares data. | Truth Tables . The logical operations shown in truth tables are and, or, not, and XOR. | # AND 5 &gt; 3 and 5 == 3 + 2 . True . 5 &lt; 3 and 5 == 5 . False . 5 == 5 or 5 != 5 . True . 5 &lt; 3 or 5 != 5 . False . Real Life Example using Boolean Expressions . Try changing the conditions and/or the logical operation below! Run the code to see if you are eligible to vote. . age = 19 citizen = (True) if age &gt;= 18 and citizen: print(&quot;You are eligible to vote.&quot;) else: print(&quot;You are not eligible to vote.&quot;) . You are eligible to vote. . I went to the refinery met this girl she a 1010 so finery it made me think about binary turns out she non binary . Binary Conversions . Binary to Decimal . We can count in binary by using powers of 2. | In binary, we read from right to left. | 0111 has a value of 7. | Binary Search . For a binary search, the list must be sorted. | In a binary search, computers start at the middle (front,middle,end)/ | The number of steps required in a binary search follows the equation: log2(n)+1. | Binary searches also work with a list of strings. We can sort them alphabetically. | Binary searches can be represented in tree diagrams. | Hacks . You will NOT be awarded any points for sections that are INCOMPLETE . Note Taker . Fill in all of the blanks above. | Lesson Quiz . Complete the lesson quiz | SCREENSHOT SCORE and paste it here (or paste screenshot with submission) | Binary Game . Complete the Binary game and reach a minimum score of 10! | SCREENSHOT SCORE and paste it here (or with submission) | Binary Conversions Practice . Convert the decimal number &quot;17&quot; into binary. 10001 | | Convert the binary number 1010 into decimal. 10 | | Convert the decimal number &quot;122&quot; into hexadecimal. 7A | | Convert the hexadecimal number &quot;09&quot; into binary. 1001 | | Binary Search Questions . Make a binary search tree of different the list [1,2,4,15,25,30,31] 31 / 25 30 / / 15 20 31 / / 4 18 27 / 2 | | Put this list of strings in a order that can be used for binary search [&quot;Donut”,&quot;Cake”,&quot;Soda”,&quot;Banana”,&quot;Fruit”] Here is the list in alphabetical order: [&quot;Banana&quot;, &quot;Cake&quot;, &quot;Donut&quot;, &quot;Fruit&quot;, &quot;Soda&quot;]. | | Explain why Binary Search is more efficient than Sequential Search. Binary search is a more efficient algorithm than sequential search for finding a target value in a sorted list. Binary search works by repeatedly dividing the list in half until the target value is found. This means that binary search only needs to make a logarithmic number of comparisons, while sequential search needs to make a linear number of comparisons. | | Extra Credit: . Translate the binary number, 1001010, into octal (base 8). SHOW YOUR WORK AND EXPLAIN YOUR THINKING. OR | write the best rap line (determined during the lesson by group) | . Octal is a number system that is based on the number 8, using the digits 0 to 7. In contrast, binary is a number system based on the number 2, using only the digits 0 and 1. To convert a binary number to octal, we can split the binary digits into groups of three digits each, starting from the right. Next, we can replace each group of three binary digits with the corresponding octal digit. . Here are the steps to convert a binary number to octal: . Start with a binary number, for example: 1001010. Group the binary digits into groups of three, starting from the right: 1 001 010. Replace each group of three binary digits with the corresponding octal digit: 1 1 2. Write the resulting octal digits together to get the octal equivalent of the binary number: 112. Therefore, to convert a binary number to octal, we need to group the binary digits into sets of three, then replace each set with the corresponding octal digit. This process helps us to quickly convert between binary and octal representations. . I went to the refinery met this girl she a 1010 so finery it made me think about binary turns out she non binary . Hacks Scoring . Hack Comments Grade . Note Taker | fill in the blanks above | 0.1 | . Lesson Quiz | under 100% = 0.1 only | 0.2 | . Binary Game | must score at least 10 points | 0.2 | . Binary Conversions Practice | if incorrect= 0.2 awarded | 0.2 | . Binary Search Questions | if incorrect= 0.2 awarded | 0.2 | . Extra Credit | MUST SHOW WORK | 0.1 | . Total | expected= 0.9/1 | 1/1 | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/binary/lesson",
            "relUrl": "/binary/lesson",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "DevOps Lesson",
            "content": "import socket # Change the following host and see what IP it prints! host = &quot;google.com&quot; ip = socket.gethostbyname(host) print(ip) . 142.250.189.14 . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) print(&quot;Successfully connected!&quot;) . Successfully connected! . Check-In . What is an IP address? String of numbers that is used to uniquely identify parties on the internet | | What is a TCP port? TCP allows packets to be transmitted across the internet | it allows you to tell if each packet is recieved by the destination | | Slide Hacks . The Domain Name System (DNS) is a system that translates domain names (such as www.google.com) into IP addresses, | it is used by computers to establish connections. | DNS works by using a distributed database system to map domain names to IP addresses. When a user types a domain name into their browser, the browser sends a request to a DNS resolver. The resolver then queries a series of DNS servers to find the IP address associated with the domain name, and returns it to the user&#39;s browser. | DNS resolvers are computer programs or services provided by ISPs or public DNS services, and are responsible for handling the DNS lookup process on behalf of client devices such as computers or smartphones, that are trying to access websites or other Internet resources. | with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) # Send a GET request to &quot;/&quot; s.sendall(b&quot;GET / HTTP/1.1 r n r n&quot;) # Recieve &amp; print 2048 bytes of data data = s.recv(2048) print(data.decode()) . HTTP/1.1 200 OK Date: Wed, 26 Apr 2023 20:58:16 GMT Expires: -1 Cache-Control: private, max-age=0 Content-Type: text/html; charset=ISO-8859-1 Content-Security-Policy-Report-Only: object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-e2W1noqr2QfhXzNpmV5jFg&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp P3P: CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34; Server: gws X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN Set-Cookie: 1P_JAR=2023-04-26-20; expires=Fri, 26-May-2023 20:58:16 GMT; path=/; domain=.google.com; Secure Set-Cookie: AEC=AUEFqZejiYBZqogUso4QEqrnxc1o8BIze5Ho-B4t8zndFOGow3-fkSGp3n4; expires=Mon, 23-Oct-2023 20:58:16 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax Set-Cookie: NID=511=ZY88DADR8cwGbbTntBXgMMFFvJYTZjK8F6XPqasY7qXlMwO5VTnNormh9eZCxqRsAcswyHQRN9ntMRHPFX783IWl3-HcWdO9Hj3eCn91pWEuJ6vDhT0gkxSFgq-u7Bw46FiJZJb77otdnJ1zNJYgt1E-Dxs-cGJTXulpbAxyl4M; expires=Thu, 26-Oct-2023 20:58:16 GMT; path=/; domain=.google.com; HttpOnly Accept-Ranges: none Vary: Accept-Encoding Transfer-Encoding: chunked 59bc &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content=&#34;Search the world&#39;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&#39;re looking for.&#34; name=&#34;description&#34;&gt;&lt;meta content=&#34;noodp&#34; name=&#34;robots&#34;&gt;&lt;meta content=&#34;text/html; charset=UTF-8&#34; http-equiv=&#34;Content-Type&#34;&gt;&lt;meta content=&#34;/images/branding/googleg/1x/googleg_standard_color_128dp.png&#34; itemprop=&#34;image&#34;&gt;&lt;title&gt;Google&lt;/title&gt;&lt;script nonce=&#34;e2W1noqr2QfhXzNpmV5jFg&#34;&gt;(function(){window.google={kEI:&#39;aJBJZI6bE-nikPIPvJudoAg&#39;,kEXPI:&#39;0,1359409,6059,206,4804,2316,383,246,5,1129120,1197780,621,380090,16114,28684,22430,1362,12311,17588,4998,13228,3847,38444,2872,2891,3926,7828,606,30668,30022,15324,432,3,346,1244,1,16916,2652,4,1528,2304,29062,13065,13658,2980,1457,16786,5827,2530,4097,7593,1,8710,30337,1,3106,2,14022 . import requests # Change the URL to whatever you&#39;d like response = requests.get(&quot;https://cnn.com&quot;) print(&quot;Status code:&quot;, response.status_code) print(&quot;Headers:&quot;, response.headers) print(&quot;Response text:&quot;, response.text[:100]) # Add a line to print the &quot;Content-Type&quot; header of the response # Try an image URL! . Status code: 200 Headers: {&#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Content-Length&#39;: &#39;506553&#39;, &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39;, &#39;X-Content-Hub&#39;: &#39;build-env=prod; unique-deployment-key=rn04277w; build-version=v4.11.11-0-g920a570e6; build-commit-hash=920a570e6&#39;, &#39;access-control-allow-origin&#39;: &#39;*&#39;, &#39;cache-control&#39;: &#39;max-age=60&#39;, &#39;content-security-policy&#39;: &#34;default-src &#39;self&#39; blob: https://*.cnn.com:* http://*.cnn.com:* *.cnn.io:* *.cnn.net:* *.turner.com:* *.turner.io:* *.ugdturner.com:* courageousstudio.com *.vgtf.net:*; script-src &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; &#39;self&#39; *; style-src &#39;unsafe-inline&#39; &#39;self&#39; blob: *; child-src &#39;self&#39; blob: *; frame-src &#39;self&#39; *; object-src &#39;self&#39; *; img-src &#39;self&#39; data: blob: *; media-src &#39;self&#39; data: blob: *; font-src &#39;self&#39; data: *; connect-src &#39;self&#39; data: *; frame-ancestors &#39;self&#39; https://*.cnn.com:* http://*.cnn.com https://*.cnn.io:* http://*.cnn.io:* *.turner.com:* courageousstudio.com;&#34;, &#39;x-content-type-options&#39;: &#39;nosniff&#39;, &#39;x-xss-protection&#39;: &#39;1; mode=block&#39;, &#39;X-Last-Modified&#39;: &#39;Wed, 03 May 2023 20:56:11 GMT&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Via&#39;: &#39;1.1 varnish, 1.1 varnish&#39;, &#39;Accept-Ranges&#39;: &#39;bytes&#39;, &#39;Date&#39;: &#39;Wed, 03 May 2023 20:59:18 GMT&#39;, &#39;Age&#39;: &#39;159&#39;, &#39;Set-Cookie&#39;: &#39;countryCode=US; Domain=.cnn.com; Path=/; SameSite=None; Secure, stateCode=CA; Domain=.cnn.com; Path=/; SameSite=None; Secure, geoData=san diego|CA|92127|US|NA|-700|broadband|33.020|-117.110|825; Domain=.cnn.com; Path=/; SameSite=None; Secure, FastAB=0=4952,1=5277,2=2608,3=2774,4=9004,5=9993,6=6690,7=1254,8=3936,9=3421,10=2248,11=7026,12=3126,13=3297,14=1967,15=5646,16=3363,17=5406,18=1909,19=4386; Domain=.cnn.com; Path=/; Expires=Thu, 02 May 2024 20:59:18 GMT; SameSite=Lax&#39;, &#39;X-Served-By&#39;: &#39;cache-iad-kjyo7100119-IAD, cache-bur-kbur8200131-BUR&#39;, &#39;X-Cache&#39;: &#39;HIT, HIT&#39;, &#39;X-Cache-Hits&#39;: &#39;137, 2&#39;, &#39;X-Timer&#39;: &#39;S1683147559.717975,VS0,VE1&#39;, &#39;Vary&#39;: &#39;Accept-Encoding, Accept-Language&#39;, &#39;alt-svc&#39;: &#39;h3=&#34;:443&#34;;ma=86400,h3-29=&#34;:443&#34;;ma=86400,h3-27=&#34;:443&#34;;ma=86400&#39;} Response text: &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34; data-uri=&#34;cms.cnn.com/_pages/clg34ol9u000047nodabud1o2@published&#34; . NGINX . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws) print(response.text) . &lt;html&gt;&lt;head&gt;&lt;title&gt;ContentKeeper&lt;/title&gt;&lt;/heQad&gt; &lt;body bgcolor=&#34;#A02E5F&#34; text=&#34;White&#34; link=&#34;Lime&#34; vlink=&#34;Aqua&#34;&gt; &lt;center&gt;&lt;br&gt;&lt;h1&gt;ContentKeeper&lt;br&gt;Non-Managed Site&lt;/h1&gt; No access is available to NON-Managed Sites.&lt;br&gt;&lt;br&gt; &lt;table border=&#34;1&#34; cellspacing=&#34;0&#34;&gt; &lt;tr&gt;&lt;td&gt;URL&lt;/td&gt;&lt;td&gt;&lt;b&gt;3.130.255.192&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Username&lt;/td&gt;&lt;td&gt;&lt;b&gt;1930793/pusd&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;/body&gt;&lt;/html&gt; . Configuration . server { // Listen on virtual &quot;port 80&quot; listen 80; listen [::]:80; server_name 3.130.255.192; location / { // Inform server about original client proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; // Forward all requests transparently to the server running on our computer proxy_pass http://localhost:9099; } } . Load Balancing . upstream example.com { server server1.example.com; server server1.example.com; } . HTTP Headers . server { add_header X-Cool-Header &quot;I love APCSP!&quot;; location /pages { add_header X-Cooler-Header &quot;This is my secret header!&quot;; } } . Check In . Research 1 HTTP header and describe, in detail, its purpose. The &quot;User-Agent&quot; header is a significant HTTP header that serves a crucial role. It is sent from the client to the server as part of an HTTP request and is used to identify the type of client software making the request, which could be a web browser, a mobile app, or a search engine crawler. | | Write a line in a sample NGINX configuration that will add that specific header to the /information location location /information { add_header User-Agent &quot;MyCustomUserAgentString&quot;; # Other configuration options for this location} | | Explain the purpose of the load balancing performed by NGINX To improve web application availability, scalability, and performance, NGINX utilizes load balancing techniques that distribute incoming traffic among multiple servers or instances. The goal is to avoid overloading any single server with traffic. NGINX achieves this by implementing various load balancing algorithms, such as round-robin, least connections, and IP hash, to determine how to allocate traffic. | | Modify the following code block to obtain the value of the secret header on /products of the AWS site | aws = &quot;3.130.255.192&quot; #response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) print(&quot;The secret header is:&quot;, &quot;&#39;X-Cooler-Header&#39;: &#39;This is my secret header!&#39;&quot;) . The secret header is: &#39;X-Cooler-Header&#39;: &#39;This is my secret header!&#39; . Hacks . Complete the above check-in questions and change the hosts (0.1) | Complete the above code-segment to retrieve the secret header (0.1) | . Bonus (0.05) . Create a diagram showing the layers of abstraction that allow us to use HTTP (IP, TCP, etc.) . CORS Hacks . Explain what CORS is and what it stands for Cross-Origin Resource Sharing, or CORS for short, is a mechanism that permits web servers to authorize web browsers to access resources from a domain that differs from the one that issued the initial request. Its primary function is to either grant or restrict access from other domains. | | Describe how you would be able to implement CORS into your own websites To implement CORS on a website, specific HTTP headers must be configured on the server-side response for requests originating from other domains. The necessary headers to be set are &quot;Access-Control-Allow-Origin&quot;, &quot;Access-Control-Allow-Methods&quot;, and &quot;Access-Control-Allow-Headers&quot;. | | Describe why you would want to implement CORS into your own websites The implementation of CORS is significant as it enables websites to obtain resources from various domains, ultimately enhancing the user experience and facilitating the creation of sophisticated web applications that rely on resources from multiple domains. | | How could use CORS to benefit yourself in the future? Using CORS can benefit developers in the long term by eliminating cross-origin security issues and enabling the creation of complex web applications that use resources from multiple domains. It also allows developers to access data from APIs hosted on different domains, which is useful for developing applications that rely on data from multiple sources. | | Total: 0.2 points . KASM Hacks . What is the purpose of &quot;sudo&quot; when running commands in terminal? In the terminal, &quot;sudo&quot; allows running other commands with administrator privileges, enabling tasks such as software installation or system modification. | | What are some commands which allow us to look at how the storage of a machine is set up as? If you want to inspect the storage configuration of a machine, some useful commands to consider are &quot;df -h&quot; for available file system space, &quot;lsblk&quot; to obtain information about storage devices, and &quot;mount&quot; to view file systems currently in use. | | What do you think are some alternatives to running &quot;curl -O&quot; to get the zip file for KASM? Aside from &quot;curl -O&quot;, options for downloading the KASM zip file include web browsers, download manager apps, or alternate command-line tools such as &quot;wget&quot;. | | What kind of commands do you think the &quot;install.sh&quot; command has and why is it necessary to call it? Using &quot;install.sh&quot; initiates installation and configuration of the KASM software on the system, potentially including file downloads and customizations. | | Explain in at least 3-4 sentences how deploying KASM is related to/requires other topics talked about in the lesson and/or potential ways to add things mentioned in the lesson to this guide. Deploying KASM necessitates knowledge of command-line usage, software package management, and network security measures. You can expand this guide to include other topics, such as configuring firewalls, user permissions, and integrating KASM with other security tools. | | Total: 0.2 points .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/04/26/devops-lesson.html",
            "relUrl": "/2023/04/26/devops-lesson.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Alex part for Review",
            "content": "Iteration . What is iteration? . In programming, iteration refers to the process of repeating a set of instructions until a specific condition is met. This can be achieved using loop structures like for loops and while loops. | . For Loops . A for loop is used to iterate over a sequence (e.g. a list, tuple, string, etc.) and execute a set of statements for each item in the sequence. Here&#39;s the basic syntax of a for loop in Python: . sequence = [1,2,3,4,5,6,7] for variable in sequence: print(variable) . 1 2 3 4 5 6 7 . my_string = &quot;Hello, World!&quot; for character in my_string: print(character) . H e l l o , W o r l d ! . While Loops A while loop is used to repeat a set of statements as long as a condition is true. Here&#39;s the basic syntax of a while loop in Python: . num = 0 while num &lt; 5: print(num) num += 1 . 0 1 2 3 4 . Applications of Iteration . Iteration is a fundamental concept in computer programming and is used in a variety of real-life applications. Here are some examples: . Data Processing . Data processing often involves iterating over large datasets to perform specific operations on each element. For example, in a data analysis task, you might iterate over a list of numbers to compute the average, or iterate over a list of strings to find the longest string. | . User Interfaces . User interfaces often involve iteration to display and handle data from various sources. For example, in a web application, you might iterate over a list of users to display their information in a table. Similarly, in a desktop application, you might iterate over a list of files to display them in a file explorer. | . Machine Learning . Machine learning algorithms often involve iterative processes to train models and improve their accuracy. For example, in a gradient descent algorithm, you might iterate over a set of training data to update the model&#39;s parameters and minimize the loss function. | . Popcorn hack . make a list related to your CPT project | make a while loop that will print each term in the list | make a for loop that will print each term in the list | simulation mechanics . In Python, pop() is a method that is used to remove and return an element from a list. The syntax for using pop() is as follows: . my_list = [1, 2, 3, 4, 5] print(my_list) my_list.pop() print(my_list) my_list.pop(1) print(my_list) . [1, 2, 3, 4, 5] [1, 2, 3, 4] [1, 3, 4] . In Python, append() is a built-in method that is used to add an element to the end of a list. The syntax for using append() is as follows: . my_list = [] my_list.append(1) my_list.append(2) my_list.append(3) print(my_list) . [1, 2, 3] .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/iterationwork",
            "relUrl": "/csp/iterationwork",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Data structures lesson",
            "content": "Word Guessing Game . Word Guessing Game . Guess the word: . Enter a letter: . Guess Number of guesses remaining: . . for (let i = 0; i &lt; word.length; i++) { if (word[i] === letter) { wordLetters[i] = letter; foundLetter = true; } } . This is a loop that iterates over the letters in the word and checks to see if the guessed word matches any of the letters in the actual word | afer iterating, if the word matches it will mark the letter as found adn the user will get instant feedback and see if the word was chosen | . const words = [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;orange&#39;, &#39;pear&#39;]; . here is the list of possible words | Each of the words are stored in the list that is created in javascript | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/datastructurelessonideas/",
            "relUrl": "/csp/datastructurelessonideas/",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Hacks for big idea fin",
            "content": "print(&quot;hi&quot;) . hi .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/finhacks",
            "relUrl": "/csp/finhacks",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Hacks for big idea fin",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of ieration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays | Chess board or a spreadsheet or even a tiktak toe board | | What is a modern day game that could be classified as a 2D array | Tetris and the chess game is a 2D array game. | . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . How I used 2D Arrays (game example) . Describe a 2D array in your own words | A datastructure that has two dimensions | . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 2: Iteration . Robot Game:Finn Carpenter- What is the defenition of iteration in your own words . looping over code | For example, a for loop can use iteration to step though objects in a list or array. | . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | Explain how the game relates to itertation | The game shows how looping works and how you can reduce the complexity of some code by repeating the same code by using a loop | . How I used iteration (game example) . What parts of the code use iteration | looping uses iteration for example a for loop or a while loop | It also iterates over the control inputs | . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # print(List[0]) print(Dict[1]) . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . Explain which parts of the code use lists Initially, the variable named &quot;word_list&quot; comprises a collection of terms related to computer science. Subsequently, the variable labeled &quot;scrambled_word&quot; contains a list of letters obtained by randomly selecting a word and shuffling its letters. Finally, the &quot;guesses&quot; variable maintains a record of the number of attempts made by the user. | . | Explain what list manipulation is happening in that part By utilizing the random.sample() function, one can randomly extract a subset of items from a list. In this scenario, this function is used to randomly choose a set of letters from a word string, which are then organized in a randomized sequence in the scrambled_word list. | . | . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | . | Create a code segment with iteration that does something cool | . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works Uses the 2D array and you can put in the boxes and then to win it uses if statements | The code for the game creates a 3x3 grid and allows two players to take turns placing X&#39;s and O&#39;s. The first player to get three of their marks in a row wins the game. If all 9 squares are filled and no player has three marks in a row, the game is a tie. | . | Give 3 Examples of games that can be made from 2D arrays A maze | Drawing game | pacman game | . | . List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries Lists have no key only has terms and to call to them you must use index | dictionaries have unique keys | . | Make a code block that manipulates either a list or a dictionary | . Questions . What are some examples of 2D Arrays? . Examples of 2D Arrays consist of a chessboard, where each row represents a row of the board and each column represents a column of the board. A spreadsheet, where each row represents a record and each column represents a specific field. Or a basic game board, where each row represents a row of the board and each column represents a column of the board. . What is a modern day game that could be classified as a 2D array? . Tetris is a contemporary puzzle game that falls into the category of a 2D array. In the game, players must stack falling blocks into complete rows, and the game board is represented as a 2D array. Each row on the board represents a row of the game board, and each column denotes a column of the board. . Describe a 2D array in your own words . A 2D array is an array that possesses two dimensions or axes. It can be viewed as a rectangular grid of elements, where each element in the array is uniquely recognized by its corresponding row and column indexes. . What is the definition of iteration in your own words? . Iteration refers to the repetitive process of performing a procedure or operation until the desired result is attained. For instance, a for loop can use iteration to iterate over objects in a list or array. . Explain how the game relates to iteration? . The game operates by repeatedly pressing the arrow keys to shift the square around the screen. This process is a perfect example of iteration, as the player continually performs the same action until they achieve their goal. . What parts of the code use iteration? . The for loops in the movements array are the parts of the code that utilize iteration. These loops iterate over the UPinput, DOWNinput, LEFTinput, and RIGHTinput variables to form an array of movements. . Explain which parts of the code use lists? . The word_list variable, which comprises a list of computer science words, the scrambled_word variable, which is a list of letters in the randomly selected word, in a random order, and the guesses variable, which keeps track of the number of guesses the user has made, are all examples of lists utilized in the code. . Explain what list manipulation is happening in that part? . In the code, the random.sample() function is used to extract a random sample of elements from a list. In this instance, it is utilized to select a random sample of letters from the word string, which are then organized in a randomized sequence in the scrambled_word list. . . . . Create a code segment with iteration that does something cool . for i in range(10): print(i*i) . 0 1 4 9 16 25 36 49 64 81 . Code that manipulates a dictionary . dic = {&quot;name&quot; : &quot;alex&quot;, &quot;age&quot;: &quot;16&quot;} print(dic) dic[&quot;gender&quot;] = &quot;man&quot; print(dic) print(dic[&quot;name&quot;]) . {&#39;name&#39;: &#39;alex&#39;, &#39;age&#39;: &#39;16&#39;} {&#39;name&#39;: &#39;alex&#39;, &#39;age&#39;: &#39;16&#39;, &#39;gender&#39;: &#39;man&#39;} alex . Code that manipulates a list . my_list = [&quot;frog&quot;, &quot;Cat&quot;, &quot;dog&quot;] # Add an element to the list my_list.append(&quot;orange&quot;) # Remove an element from the list my_list.remove(&quot;Cat&quot;) # Sort the list my_list.sort() # Get the length of the list print(len(my_list)) # Print the list print(my_list) . 3 [&#39;dog&#39;, &#39;frog&#39;, &#39;orange&#39;] .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/finhacksbigidea",
            "relUrl": "/csp/finhacksbigidea",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Tri-3-Lesson",
            "content": "What you should Have to Start . Should have wget this file (tri3-lesson.ipynb) | wget this file: https://raw.githubusercontent.com/JoshuaW03628/Repository-1/master/nba_player_statistics.csv | Copy Path from nba_player_statistics.csv and replace prior path for it. | . Lesson Portion 1: ReIntroduction to Data Analysis, NunPy, and Pandas, Why is it important? . Data Analysis. . Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances. | . What is NunPy and Pandas . Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions. | Imagine you have a lot of toys, but they are all mixed up in a big box. NumPy helps you to put all the same types of toys together, like all the cars in one pile and all the dolls in another. Pandas is like a helper that helps you to remember where each toy is located. So, if you want to find a specific toy, like a red car, you can ask Pandas to find it for you. | Just like how it&#39;s easier to find a toy when they are sorted and organized, it&#39;s easier for grown-ups to understand and analyze big sets of numbers when they use NumPy and Pandas. | . Lesson Portion 2 More into NunPy . What we are covering; . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Examining NumPy arrays | Creating NumPy arrays and performing intermediate array operations | Popcorn Hacks, Make your own percentile NunPy array | . What is NunPy&#39;s use in data analysis/ how to import NunPy. . NumPy is a tool in Python that helps with doing math and data analysis. It&#39;s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It&#39;s used a lot by scientists and people who work with data because it makes their work easier and faster. . import numpy as np . List of NunPy Functions, what they do, and examples. . Link; https://www.educba.com/numpy-functions/ | . Example of Using NunPy in Our Project . This code calculates the total plate appearances for a baseball player using NumPy&#39;s sum() function, similar to the original example. It then uses NumPy to calculate the total number of bases (hits plus walks) for the player, and divides that by the total number of plate appearances to get the on-base percentage. The results are then printed to the console. . import numpy as np # Example data player_hits = np.array([3, 1, 2, 0, 1, 2, 1, 2]) # Player&#39;s hits in each game player_walks = np.array([1, 0, 0, 1, 2, 1, 1, 0]) # Player&#39;s walks in each game player_strikeouts = np.array([2, 1, 0, 2, 1, 1, 0, 1]) # Player&#39;s strikeouts in each game # array to store plate appearances (PA) for the player total_pa = np.sum(player_hits != 0) + np.sum(player_walks) + np.sum(player_strikeouts) # array to store on-base percentage (OBP) for the player total_bases = np.sum(player_hits) + np.sum(player_walks) obp = total_bases / total_pa # Print the total plate appearances and on-base percentage for the player print(f&quot;Total plate appearances: {total_pa}&quot;) print(f&quot;On-base percentage: {obp:.3f}&quot;) . Total plate appearances: 21 On-base percentage: 0.857 . Activity 1; PopCorn Hacks; Creating a NunPy Array and Analyzing the Data using Array Operations . import numpy as np #Create a NumPy array of the heights of players in a basketball team heights = np.array([192, 195, 193, 200, 211, 199, 201, 198, 184, 190, 196, 203, 208, 182, 207]) # Calculate the percentile rank of each player&#39;s height percentiles = np.percentile(heights, [25, 50, 75]) # Print the results print(&quot;The 25th percentile height is&quot;, percentiles[0], &quot;cm.&quot;) print(&quot;The 50th percentile height is&quot;, percentiles[1], &quot;cm.&quot;) print(&quot;The 75th percentile height is&quot;, percentiles[2], &quot;cm.&quot;) # Determine the number of players who are in the top 10% tallest top_10_percent = np.percentile(heights, 90) tallest_players = heights[heights &gt;= top_10_percent] print(&quot;There are&quot;, len(tallest_players), &quot;players in the top 10% tallest.&quot;) . The 25th percentile height is 192.5 cm. The 50th percentile height is 198.0 cm. The 75th percentile height is 202.0 cm. There are 2 players in the top 10% tallest. . import numpy as np print(&quot;grades&quot;) #Create a NumPy array of the x grades = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) # Calculate the percentile rank of x y = np.percentile(grades, [25,50,75]) # Print the results print(&quot;25 percentile&quot;, y[0], &quot;&quot;) print(&quot;50 percentile&quot;, y[1], &quot;&quot;) print(&quot;75 percentile&quot;, y[2], &quot;&quot;) # Determine the number of players who are in the top 10% x t = np.percentile(grades, 90) z = grades[grades &gt;= t] print(&quot;There are&quot;, len(z), &quot;grades in the top 10% (grades).&quot;) . grades 25 percentile 5.0 50 percentile 9.0 75 percentile 13.0 There are 2 grades in the top 10% (grades). . Lesson Portion 3 More into Pandas . What we are Covering . Explanation of Pandas and its uses in data analysis | Importing Pandas library | Loading data into Pandas DataFrames from CSV files | Manipulating and exploring data in Pandas DataFrames | Example of using Pandas for data analysis tasks such as filtering and sorting | . What are pandas and what is its purpose? . Pandas is a software library that is used in Python | Pandas are used for data analysis and data manipulation | Pandas offer data structures and operations for manipulating numerical tables and time series. | Pandas is free | . Things you can do using pandas . Data Cleansing; Identifying and correcting errors, inconsistencies, and inaccuracies in datasets. | Data fill; Filling in missing values in datasets. | Statistical Analysis; Analyzing datasets using statistical techniques to draw conclusions and make predictions. | Data Visualization; Representing datasets visually using graphs, charts, and other visual aids. | Data inspection; Examining datasets to identify potential issues or patterns, such as missing data, outliers, or trends. | . Pandas and Data analysis . The 2 most important data structures in Pandas are: . Series ; A Series is a one-dimensional labeled array that can hold data of any type (integer, float, string, etc.). It is similar to a column in a spreadsheet or a SQL table. Each element in a Series has a label, known as an index. A Series can be created from a list, a NumPy array, a dictionary, or another Pandas Series. | DataFrame ;A DataFrame is a two-dimensional labeled data structure that can hold data of different types (integer, float, string, etc.). It is similar to a spreadsheet or a SQL table. Each column in a DataFrame is a Series, and each row is indexed by a label, known as an index. A DataFrame can be created from a dictionary of Series or NumPy arrays, a list of dictionaries, or other Pandas DataFrame. | . Dataframes . import pandas as pd . pd.__version__ . &#39;1.4.2&#39; . Importing CSV Data . imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Specifies a player&#39;s name &#39;Jimmy Butler&#39; to filter the DataFrame for that player&#39;s stats. It creates a new DataFrame called &#39;player_stats&#39; which only contains rows where the &#39;NAME&#39; column matches &#39;Jimmy Butler&#39;. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), and assists per game (APG) using the print() function and string formatting. | The code uses the double square brackets [[PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]] to select only the columns corresponding to the player&#39;s points per game, rebounds per game, and assists per game from the player_stats DataFrame. | In summary, the code loads NBA player statistics data from a CSV file, filters it for a specific player, and displays the stats for that player&#39;s PPG, RPG, and APG using a Pandas DataFrame. | . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/home/alexkumar/vscode/fastpages-APCSP/_notebooks/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . Stats for Jimmy Butler: PPG RPG APG 0 35.0 5.0 11.0 . In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. . The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose. . Imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Asks the user to input a player name using the input() function and assigns it to the variable player_name. | Filters the DataFrame for the specified player name using the df[df[&#39;NAME&#39;] == player_name] syntax, and assigns the resulting DataFrame to the variable player_stats. | Checks if the player_stats DataFrame is empty using the empty attribute. If it is empty, prints &quot;No stats found for that player.&quot; Otherwise, it proceeds to step 6. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), assists per game (APG), and total points + rebounds + assists (P+R+A) using the print() function and string formatting. | In summary, this code loads NBA player statistics data from a CSV file, asks the user to input a player name, filters the DataFrame for that player&#39;s stats, and displays the player&#39;s stats for PPG, RPG, APG, and P+R+A. If the player is not found in the DataFrame, it prints a message indicating that no stats were found. | . import pandas as pd df = pd.read_csv(&#39;/home/alexkumar/vscode/fastpages-APCSP/_notebooks/nba_player_statistics.csv&#39;) # Load CSV file into a Pandas DataFrame player_name = input(&quot;Enter player name: &quot;) # Get player name input from user player_stats = df[df[&#39;NAME&#39;] == player_name] # Filter the DataFrame to only include stats for the specified player if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Display the stats for the player inputted. . Stats for Chris Paul: PPG RPG APG P+R+A 63 11.5 7.5 9.0 28.0 . Lesson Portion 4 . What we will be covering . Example of analyzing data using both NumPy and Pandas libraries | Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library | . Example of analyzing data using both NumPy and Pandas libraries . import numpy as np import pandas as pd # Load CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/home/alexkumar/vscode/fastpages-APCSP/_notebooks/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for the specified player player_name = input(&quot;Enter player name: &quot;) player_stats = df[df[&#39;NAME&#39;] == player_name] if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Convert the player stats to a NumPy array player_stats_np = np.array(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Calculate the average of each statistic for the player player_stats_avg = np.mean(player_stats_np, axis=0) # Print out the average statistics for the player print(f&quot; nAverage stats for {player_name}:&quot;) print(f&quot;PPG: {player_stats_avg[0]:.2f}&quot;) print(f&quot;RPG: {player_stats_avg[1]:.2f}&quot;) print(f&quot;APG: {player_stats_avg[2]:.2f}&quot;) print(f&quot;P+R+A: {player_stats_avg[3]:.2f}&quot;) . Average stats for LeBron James: PPG: 21.00 RPG: 11.00 APG: 5.00 P+R+A: 37.00 . NumPy impacts the given code because it performs operations on arrays efficiently. Specifically, it converts a Pandas DataFrame object to a NumPy array object, and then calculates the average statistics for a the player you guys inputted. Without NumPy, it would be more difficult and less efficient to perform these calculations on large data sets. It does the math for us. . Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library . Matplotlib is used essentially to create visuals of data. charts,diagrams,etc. . import numpy as np import pandas as pd import matplotlib.pyplot as plt # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/home/alexkumar/vscode/fastpages-APCSP/_notebooks/nba_player_statistics.csv&#39;) # Print the first 5 rows of the DataFrame print(df.head()) # Calculate the mean, median, and standard deviation of the &#39;Points&#39; column mean_minutes = df[&#39;MPG&#39;].mean() median_minutes = df[&#39;MPG&#39;].median() stddev_minutes = df[&#39;MPG&#39;].std() # Print the results print(&#39;Mean Minutes: &#39;, mean_minutes) print(&#39;Median Minutes: &#39;, median_minutes) print(&#39;Standard Deviation Minutes: &#39;, stddev_minutes) # Create a histogram of the &#39;Points&#39; column using Matplotlib plt.hist(df[&#39;MPG&#39;], bins=20) plt.title(&#39;MPG Histogram&#39;) plt.xlabel(&#39;MPG&#39;) plt.ylabel(&#39;Frequency&#39;) plt.show() . RANK NAME TEAM POS AGE GP MPG USG% TO% FTA ... APG 0 1 Jimmy Butler Mia F 33.6 1 42.9 34.3 9.9 8 ... 11.0 1 2 Kawhi Leonard Lac F 31.8 2 40.2 30.0 11.9 17 ... 6.0 2 3 Khris Middleton Mil F 31.7 1 33.1 37.5 19.8 10 ... 4.0 3 4 Devin Booker Pho G 26.5 2 44.1 28.8 16.2 14 ... 6.0 4 5 De&#39;Aaron Fox Sac G 25.3 2 38.2 31.6 9.0 14 ... 7.0 SPG BPG TPG P+R P+A P+R+A VI ORtg DRtg 0 3.0 0.0 3.0 40.0 46.0 51.0 11.6 117.2 103.8 1 2.0 0.5 3.0 41.0 40.5 47.0 11.0 129.5 110.4 2 0.0 0.0 5.0 42.0 37.0 46.0 12.8 115.5 111.9 3 2.5 1.5 4.0 33.0 38.0 39.0 5.2 121.9 111.0 4 3.5 0.5 2.5 34.0 38.0 41.0 9.1 112.6 108.8 [5 rows x 29 columns] Mean Minutes: 20.985483870967748 Median Minutes: 23.0 Standard Deviation Minutes: 12.844102823170283 . In this example code, we first import the necessary libraries, including NumPy, Pandas, and Matplotlib. We then load the CSV file into a Pandas DataFrame using the pd.read_csv() function. We print the first 5 rows of the DataFrame using the df.head() function. Next, we calculate the mean, median, and standard deviation of the &#39;MPG&#39; column using the appropriate Pandas methods, and print the results. And, we create a histogram of the &#39;MPG&#39; column using Matplotlib by calling the plt.hist() function and setting appropriate axis labels and a title. We then call the plt.show() method to display the plot. Even though NumPy is not directly used in this code, it is an important underlying component of the pandas and Matplotlib libraries, which are used to load, manipulate and visualize data. It allows them to work more efficiently . Lesson Portion 5; Summary . Summary/Goals of Lesson: . One of our goals was to make you understand data analysis and how it can be important in optimizing business performance. We also wanted to make sure you understood the use of Pandas and NumPy libraries in data analysis, with a focus on NumPy. As someone who works with data, we find Pandas incredibly useful for manipulating, analyzing, and visualizing data in Python. The way we use pandas is to calculate individual player and team statistics. We are a group that works with numerical data, so NumPy is one of our favorite tools for working with arrays and applying mathematical functions to them. It is very fast at computing and manipulating arrays making it a very valuable tool for tracking statistics which is important to our group. For example, if you have an array of the points scored by each player in a game, you can use NumPy to calculate the total points scored, average points per player, or the highest and lowest scoring players. . Lesson Portion 6 Hacks . Printing a CSV File (0.5) . Use this link https://github.com/ali-ce/datasets to select csv file of a topic you are interested in, or you may find one online. | Once you select your topic make sure it is a csv file and then you want to press on the button that says raw. | After that copy that information and create a file with a name and .csv at the end and paste your information. | Below is a start that you can use for your hacks. | Your goal is to print 2 specific parts from data (example could be like population and country). | . Popcorn Hacks (0.2) . Lesson Portion 1. #### Answering Questions (0.2) | Found Below. | . Submit By Thursday 8:35 A.M. . How to Submit: Slack a Blog Post that includes all of your hacks to &quot;Joshua Williams&quot; on Slack. | . import pandas as pd # read the CSV file df = pd.read_csv(&quot;/home/alexkumar/vscode/fastpages-APCSP/_notebooks/Exchanges and Markets.csv&quot;) # display the data in a table newfd = df[df[&quot;ID&quot;]== &quot;AllCoin - AimCoin / Bitcoin&quot;] print(newfd[[&quot;Traded Currencies&quot;, &quot;Percentage of Market&quot;]]) . Traded Currencies Percentage of Market 15 AimCoin, Bitcoin 0.00% . Question Hacks; . What is NumPy and how is it used in data analysis? . NumPy is a Python library that provides a high-performance multidimensional array object and tools for working with arrays. What is Pandas and how is it used in data analysis? | Pandas is a Python library that provides high-performance, easy-to-use data structures and data analysis tools for working with structured (tabular, multidimensional, potentially heterogeneous) and time series data. How is NunPy different than Pandas for data analysis? | NumPy and Pandas are both powerful tools for data analysis, but they have different strengths and weaknesses. NumPy is better suited for tasks that require high-performance numerical computing, while Pandas is better suited for tasks that require data manipulation and analysis. What is a DataFrame? | A DataFrame is a two-dimensional data structure in Pandas that is similar to a spreadsheet or SQL table. It is made up of rows and columns, and each cell can contain a different data type. DataFrames are a powerful tool for data analysis because they allow you to store, manipulate, and analyze data in a variety of ways. What are some common operations you can perform with NunPy? | Some common operations you can perform with NumPy include: | . Creating arrays Accessing and modifying array elements Performing mathematical operations on arrays How Can You Incorporate Either of these Data Analysis Tools (NunPy, Pandas) into your project? . To incorporate either NumPy or Pandas into your project, you can install them using the Python Package Index (PyPI). Once they are installed, you can import them into your project and start using them. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/notebooks/2023/04/19/tri3_lesson.html",
            "relUrl": "/notebooks/2023/04/19/tri3_lesson.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Full stack guide",
            "content": ".",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Fullstackguidecanva/",
            "relUrl": "/csp/Fullstackguidecanva/",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Simulations for Project CHeck 2",
            "content": "Demonstration of List . Adding text to a list | This is a simulation where you can see the text getting added to the text box! | . Click me! . . Dictionary Simulation . Welcome to the dictionary simulation! Below, you will find a list of words and their definitions. To view the definition of a word, simply click on the button next to it. . Word List . Apple View Definition . | Banana View Definition . | Cactus View Definition . | Dolphin View Definition . | Elephant View Definition . | . Dictionaries: . A dictionary is a collection of key-value pairs that are unordered, mutable, and indexed. | Dictionaries are defined using curly braces {} with key-value pairs separated by a colon (:). | Keys in a dictionary should be unique and immutable (strings, numbers, and tuples), while values can be of any data type. | Dictionaries can be accessed using the keys, using the squarebracket notation with the key name as the index. | You can also use the .get() method to retrieve a value for a given key. If the key does not exist, the method returns None (or a default value if provided). | Dictionaries have several built-in methods such as .keys(), .values(), and .items() to retrieve the keys, values, and key-value pairs respectively. | You can add, update, and remove elements from a dictionary using various built-in methods. 2D Arrays: . | A 2D array, also known as a matrix, is a collection of elements arranged in rows and columns. | A 2D array is defined using square brackets [] with each row separated by a comma, and each element within the row separated by a space. | You can access individual elements within a 2D array using square brackets and the row and column indices (e.g. arr[row][column]). | 2D arrays can be used to represent data that has two dimensions, such as an image or a spreadsheet. | You can perform various operations on 2D arrays such as transposing (swapping rows and columns), adding and subtracting, and multiplying by a scalar or another matrix. | There are several libraries available in Python, such as NumPy and Pandas, that provide more efficient and powerful tools for working with 2D arrays and matrices. | . Example Matrix / 2d array . matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] . Accessing Elements . To access an element in a 2D array, you need to specify the row and column indices. For example, to access the element in row 2, column 3 of the matrix array above (which contains the value 6), you would use the following syntax: . element = matrix[1][2] # row 2, column 3 . Modifying Elements . To modify an element in a 2D array, you can use the same syntax as for accessing elements. For example, to change the value of the element in row 2, column 3 of the matrix array above to 10, you would use the following syntax: . matrix[1][2] = 10 # row 2, column 3 . Iterating and printing items . for row in matrix: for element in row: print(element) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/artifactsandsimulations/",
            "relUrl": "/csp/artifactsandsimulations/",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Blog with solutions and learning for 2018 MCQ",
            "content": "Overall Score . . Some topics covered in this MCQ is programming, algorithms, data structures, networking, and encryption Some topics that I gained extra practice is with the coding blocks and determing the next block | Creating simulations was another topic that I enjoyed when taking this test | Some reflection or area to work on is cloud computing on Internet communication | Cloud computing refers to the delivery of computing services over the internet. It involves using remote servers to store, manage, and process data | . | . Quiz corrections . . Cloud computing has made it easier for people to work together on projects and share information over the internet. However, it has also created new security concerns as data is stored on remote servers, and companies need to be careful about protecting their information. It is important to stay informed about the latest trends and best practices in cloud computing to use it effectively and securely. | The correct answer here is B and C | Cloud computing has definitely enhanced collaboration | and It has also introduced security concerns | . . FOr this coding problem I misread the problem | One thing that I need to reflect on is reading the problem more carefully and understanding the problem better | The correct answer to this problem is C and D because those code segments will output the wrong value because the code segment will look for the first number that is smaller however depending on the data set this will not work because they will not always have the smallest value in the beggining | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/MCQCollegeboard2018/",
            "relUrl": "/csp/MCQCollegeboard2018/",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "CPT Writeup for weather",
            "content": "Write-Up (Air Quality Analyzer) . video Link . 3a. . 3.a.i. This program provides air quality information to citizens and potential travelers so that they can make informed decisions about whether or not to be cautious of air quality in a given city. 3.a.ii. This program utilizes the requests module to establish a connection with a public API that provides air quality information for various cities. It enables the user to input a city name and retrieve data on either PM2.5 or PM10 concentrations. Additionally, the user can view a list of previously retrieved concentrations. To store the concentration values, the program employs a dictionary called ‘data.’ This dictionary comprises two keys, ‘pm25’ and ‘pm10,’ each with a dictionary containing city names and concentration values.When the user selects option 1 or 2, the program sends a request to the API to obtain concentration data for the specified city. If the data is accessible, the program outputs the concentration along with a safety message based on the concentration value. Afterward, it adds the city and concentration to the ‘data’ dictionary. Upon selecting option 3, the program produces a list of city names and their respective PM2.5 and PM10 concentration values saved in the ‘data’ dictionary. Finally, the program executes a while loop to continue running until the user selects option 4 to exit. . 3.a.iii. . The name of the variable is pm25 which is a dictionary that stores the stored conectration of pm25 . 3b. . 3.b.i. . 3.b.ii. . . 3.b.iii. . The name of the variable representing the collection type is “stored data”, which is a list of dictionaries consisting of the stored concentration values of pm25 and pm10 in the inputted cities by the user. . 3.b.iv. . As previously mentioned, the second image illustrates how the program uses the collection type “pm25” as a dictionary. This enables the program not only to output the respective PM2.5 concentration value for a given city, but also to store user inputs if the menu option 3 is selected. In essence, “pm25” is a collection type that functions as a dictionary, storing PM2.5 concentrations for various cities. Each key in the “pm25” dictionary corresponds to a city, and its value represents the corresponding PM2.5 concentration. . 3.b.v. . The PM2.5 concentration data collected is stored in a data dictionary, where the key “pm25” points to a sub-dictionary that contains data for different cities. Using a dictionary as a storage mechanism enables easy access and manipulation of the data. This allows the program to retrieve PM2.5 concentration data for a specific city by accessing the corresponding key in the data dictionary. The collection type “pm25” is essential because it enables the program to store and retrieve PM2.5 concentration data for various cities across multiple program runs. This also avoids making unnecessary API requests and saves time and resources as the program can access previously collected data when the user requests PM2.5 concentration data for a previously searched city. . 3.c. . 3.c.i. . 3.c.ii. . . 3.c.iii. . The two functions available here are named “find_pm25” and “find_pm10,” and their respective purposes are indicated by their names. They are capable of providing the numerical integer value representing the concentration of either pm25 or pm10 for any city within the United States. These functions are invoked within a while loop to accomplish the menu’s objectives. Upon selecting either option, the user will be prompted to enter a city name, and the corresponding concentration value will be returned by the program. . 3.c.iv. . The provided code implements sequencing, selection, and iteration to offer an intuitive interface for accessing air quality information for various cities. Specifically, sequencing is employed to present a menu of options for the user to select from, including: obtaining PM2.5 concentration for a given city, obtaining PM10 concentration for a given city, viewing stored concentration values for PM2.5 and PM10 for various cities, and exiting the program. Selection is utilized to discern the user’s preferred action based on their choice. For instance, if the user chooses option 1, they will be prompted to input a city name, and the find_pm25 function will be invoked to retrieve and display the PM2.5 concentration for that city. Similarly, if option 2 is selected, the user will be asked to input a city name, and the find_pm10 function will be invoked to retrieve and display the PM10 concentration. Iteration is employed to display the stored concentration values for all cities when the user selects option 3. Finally, if the user chooses option 4, the program will terminate. . 3.d . 3.d.i. . Call One The initial invocation occurs within the function designed to retrieve and yield the PM2.5 concentration value for the specified city. Upon successful execution of the function, a message should be printed out that displays the PM2.5 concentration level for the city as well as whether the air quality is safe or hazardous. If the function fails to find data for the specified city, a message should be printed out informing the user that there is no PM2.5 concentration data available for the city. . Call Two . The second instance of calling a function occurs within the code block responsible for retrieving and returning the PM10 concentration level for the given city. Upon a successful query, the program should output a message displaying the PM10 concentration value for the city and indicating whether the corresponding air quality level is safe or hazardous. If the function is unable to find data for the city, a message should be printed out notifying the user that there is no PM10 concentration data available for the specified city. . 3.d.ii. . Condition(s) tested by Call One Here, the condition being tested is whether there is any data available for the PM2.5 concentration in the given city. If the data is available, the code segment that prints the PM2.5 concentration for the city is executed, followed by a nested selection statement that checks whether the PM2.5 concentration is less than 25. If the concentration is less than 25, the message “This is a safe level of air quality.” is printed. Otherwise, the message “This is unsafe air quality. Be cautious!” is printed. The PM2.5 concentration value is then stored in the data dictionary. If the data is not available for the given city, the message “Sorry, there is no PM2.5 data available for {city}.” is printed. Condition(s) tested by Call Two Call two is testing the condition pm10_concentration[“concentration”] &lt; 25 in the find_pm10 function. If the condition is true, the program will execute the code block that prints “This is a safe level of air quality. Enjoy!” and stores the PM10 concentration value in the data dictionary under the key pm10. If the condition is false, the program will execute the code block that prints “This is unsafe air quality” and stores the PM10 concentration value in the data dictionary under the key pm10. . 3.d.iii. . Results of Call One The output of the first function call is dependent on the city input argument. If the PM2.5 API response provides a valid concentration value for the given city, then the function will display the PM2.5 concentration value and a corresponding message that indicates if the air quality is safe, based on the concentration level. Additionally, the PM2.5 concentration value will be added to the data dictionary. However, if the API response does not contain any PM2.5 data for the specified city, the function will print a message indicating that. In the event of an error during the request processing, the function will display an error message. . Results of Call Two . The code checks for the availability of PM10 concentration data for the provided city argument. If the data exists, the PM10 concentration value is fetched and compared against the safety threshold of 25. If the concentration value is lower than 25, the function will display a message indicating safe air quality and save the value in the data dictionary. Otherwise, a message indicating unsafe air quality is printed. In case the concentration value is lower than 25, it will be stored in the data dictionary using the pm10 key and the provided city. If the PM10 concentration data is not available for the specified city, the function will print a message stating the unavailability of data. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/CPTwriteupWeather/",
            "relUrl": "/csp/CPTwriteupWeather/",
            "date": " • Apr 16, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Algorithms and logic",
            "content": "This uses python to make a fibonacci sequence . def fibonacci(n): numbers = [] for i in range(n): if i == 0 : print(&quot;0&quot;) numbers.append(0) elif i ==1 : print(&quot;1&quot;) numbers.append(1) else: print(numbers[i-2] +numbers[i-1]) numbers.append(numbers[i-1] + numbers[i-2]) fibonacci(10) # calls the function fibonacci and gives in 10 . 0 1 1 2 3 5 8 13 21 34 . This also runs the fibonacci however in javascript . function fibonacci(n) { var numbers = [] for (let i = 0; i &lt; n; i++) { if (i===0) { numbers.push(0) console.log(&quot;0&quot;) } else if (i===1) { numbers.push(1) console.log(&quot;1&quot;) } else { numbers.push(numbers[i-2] + numbers[i-1]) console.log(numbers[i-2] + numbers[i-1]) } } } fibonacci(7) . 0 1 1 2 3 5 8 . This uses javascript and html to test for a palindrome . // &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;give palindrome&quot; class=&quot;form-control&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;text&quot; placeholder=&quot;palindrome?&quot; class=&quot;form-control&quot;&gt; &lt;script&gt; var input = document.getElementById(&quot;input&quot;) document.getElementById(&quot;input&quot;).addEventListener(&quot;change&quot;, Palindrome); function Palindrome() { console.log(document.getElementById(&quot;input&quot;).value) const word = document.getElementById(&quot;input&quot;).value var reverse = &quot;&quot; for (var i = word.length - 1; i &gt;= 0; i--) { reverse += word[i]; } console.log(reverse) if (reverse== word) { document.getElementById(&quot;text&quot;).value = &quot;this is a palindrome&quot; } else { document.getElementById(&quot;text&quot;).value = &quot;this is not a palindrome&quot; } } &lt;/script&gt; . . TRUTH TABLE . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {/* &lt;p id=&quot;text1&quot; style=&quot;padding: 15px; line-height: 1.6; border: 1px solid white; width: 150px&quot;&gt; &lt;script&gt; */} function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() &lt;/script&gt; . Come up with a Procedure/Function that show... . The function that I created is the truth function that generates a truth table using binary data . Data Abstraction . uses an array of arrays with binary data that will represent the rows in the truth table Procedural Abstraction | I made a truth function that runs an algorithm that populates the truth table, this can be called to multiple times because it is a function Algorithm using iteration and selection | I used multiple loops to parse through the binary data and evaluate the binary logic to determine whether the statements where true | if statements can be used to check if the binary logic was true or not Frontend / Backend, using an API and persistent storage | made html text box that was populated by the javascript | . &lt;/div&gt; .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Algorithmsandlogic",
            "relUrl": "/csp/Algorithmsandlogic",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "MCQ 4 Blog",
            "content": "Overall Score . . Q1 wrong . . Option A is incorrect because data compression is useful not only for files being transmitted over the Internet but also for files stored on local storage media.Option D is a true statement about data compression. There are trade-offs involved in choosing a compression technique for storing and transmitting data. Different compression techniques have different advantages and disadvantages, and the choice of technique will depend on factors such as the type of data being compressed | . Q2 wrong . . B is wrong bc as the search procedure’s code or internal abstractions cannot be modified by the student therefore, the argument passed to the search procedure should be a word, rather than a definition. | C is right bc The student has knowledge that the procedure performs value searching, but lacks knowledge of the searching mechanism, thus demonstrating the implementation of procedural abstraction. | . Q3 wrong . . C is wrong bc The given code scans the list from the second element onward and compares only student scores to the maximum possible score, which is correct. However, it fails to verify the final element in the list. As the loop terminates when the index equals the length of the list, the last student score in the list will not be compared to the maximum possible score. | . Q4 wrong . . “Backing up data” takes the longest time for a large company (around 10,000 customers) according to the table, with a time of 200 hours. | Scaling up to a very large company of about 100,000 customers is likely to require more time to back up the data. | Therefore, “Backing up data” is expected to take the longest amount of time when scaled up for a very large company. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/CollegeboardMCQ4/",
            "relUrl": "/csp/CollegeboardMCQ4/",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection f key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is constant. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # they have curly brackets # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Taylor Swift . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . . mixtape = { &quot;title&quot;: &quot;Thriller&quot;, &quot;artist&quot;: &quot;Michael Jackson&quot;, &quot;year&quot;: 1982, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Post-Disco&quot;, &quot;Funk&quot;], &quot;tracks&quot;: { 1: &quot;Wanna Be Startin&#39; Somethin&#39;&quot;, 2: &quot;Baby Be Mine&quot;, 3: &quot;The Girl Is Mine&quot;, 4: &quot;Thriller&quot;, 5: &quot;Beat It&quot;, 6: &quot;Billie Jean&quot;, 7: &quot;Human Nature&quot;, 8: &quot;P.Y.T. (Pretty Young Thing)&quot;, 9: &quot;The Lady in My Life&quot; } } print(mixtape) . {&#39;title&#39;: &#39;Thriller&#39;, &#39;artist&#39;: &#39;Michael Jackson&#39;, &#39;year&#39;: 1982, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Post-Disco&#39;, &#39;Funk&#39;], &#39;tracks&#39;: {1: &#34;Wanna Be Startin&#39; Somethin&#39;&#34;, 2: &#39;Baby Be Mine&#39;, 3: &#39;The Girl Is Mine&#39;, 4: &#39;Thriller&#39;, 5: &#39;Beat It&#39;, 6: &#39;Billie Jean&#39;, 7: &#39;Human Nature&#39;, 8: &#39;P.Y.T. (Pretty Young Thing)&#39;, 9: &#39;The Lady in My Life&#39;}} . print(mixtape.get(&#39;tracks&#39;)[4]) print(mixtape[&#39;tracks&#39;][4]) . Thriller Thriller . mixtape[&quot;producer&quot;] = set([&#39;Micheal Jackson&#39;]) # Printing the dictionary print(mixtape) # Printing the producer set print(mixtape[&quot;producer&quot;]) . {&#39;title&#39;: &#39;Thriller&#39;, &#39;artist&#39;: &#39;Michael Jackson&#39;, &#39;year&#39;: 1982, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Post-Disco&#39;, &#39;Funk&#39;], &#39;tracks&#39;: {1: &#34;Wanna Be Startin&#39; Somethin&#39;&#34;, 2: &#39;Baby Be Mine&#39;, 3: &#39;The Girl Is Mine&#39;, 4: &#39;Thriller&#39;, 5: &#39;Beat It&#39;, 6: &#39;Billie Jean&#39;, 7: &#39;Human Nature&#39;, 8: &#39;P.Y.T. (Pretty Young Thing)&#39;, 9: &#39;The Lady in My Life&#39;}, &#39;producer&#39;: {&#39;Micheal Jackson&#39;}} {&#39;Micheal Jackson&#39;} . mixtape[&quot;genre&quot;].append(&quot;Pop&quot;) . print(f&quot;Title: {mixtape[&#39;title&#39;]}&quot;) print(f&quot;Artist: {mixtape[&#39;artist&#39;]}&quot;) print(&#39;Producer(s):&#39;) for prod in mixtape[&#39;producer&#39;]: print(f&quot;-- {prod}&quot;) print(f&quot;Year: {mixtape[&#39;year&#39;]}&quot;) print(&quot;Genres:&quot;) for genre in mixtape[&#39;genre&#39;]: print(f&quot;-- {genre}&quot;) print(&quot;Tracks:&quot;) for track_number, track_title in mixtape[&#39;tracks&#39;].items(): print(f&quot;{track_number}. {track_title}&quot;) . Title: Thriller Artist: Michael Jackson Producer(s): -- Micheal Jackson Year: 1982 Genres: -- Pop -- Post-Disco -- Funk -- Pop Tracks: 1. Wanna Be Startin&#39; Somethin&#39; 2. Baby Be Mine 3. The Girl Is Mine 4. Thriller 5. Beat It 6. Billie Jean 7. Human Nature 8. P.Y.T. (Pretty Young Thing) 9. The Lady in My Life . options = [] for k,v in mixtape.items(): # iterate using a for loop for key and value options.append(str(k.lower())) # Define the menu function def menu(): # Display the menu options print(&#39; n Select an option from the list below:&#39;) for option in options: print(option) # Get the user&#39;s choice search = input(&quot;What would you like to know about the album from the list of properties shown? Type the full word or press enter to exit.&quot;).lower() # Find the selected option in the options list selected_option = None for option in options: if search == str(option): selected_option = str(option) break if selected_option == &quot;title&quot;: print(f&#39; n Title: {mixtape[options[0]]} n&#39;) elif selected_option == &quot;artist&quot;: print(f&#39; n Artist: {mixtape[options[1]]} n&#39;) elif selected_option == &quot;year&quot;: print(f&#39; n Year: {mixtape[options[2]]} n&#39;) elif selected_option == &quot;genre&quot;: print(&quot; n Genre(s):&quot;) for g in Mixtape[&#39;genre&#39;]: print(f&quot;- {g}&quot;) elif selected_option == &quot;tracks&quot;: print(&quot; n Tracks:&quot;) for track_number, track_title in mixtape[&#39;tracks&#39;].items(): print(f&quot;{track_number}) {track_title}&quot;) elif selected_option == &quot;producer&quot;: print(&quot; n Producer(s):&quot;) for p in mixtape[&#39;producer&#39;]: print(f&quot;- {p}&quot;) elif search == &quot;&quot;: return else: print(&quot; n Property not found. Please try again. n&quot;) # Repeat the menu menu() menu() . Select an option from the list below: title artist year genre tracks producer Artist: Michael Jackson Select an option from the list below: title artist year genre tracks producer Year: 1982 Select an option from the list below: title artist year genre tracks producer Producer(s): - Micheal Jackson Select an option from the list below: title artist year genre tracks producer . import datetime tasks = {} def add_task(task_name, due_date): due_date_obj = datetime.datetime.strptime(due_date, &#39;%Y-%m-%d %H:%M:%S&#39;) tasks[task_name] = {&#39;due_date&#39;: due_date_obj, &#39;completed&#39;: False} print(f&quot;Task &#39;{task_name}&#39; added with due date {due_date}.&quot;) def complete_task(task_name): if task_name in tasks: tasks[task_name][&#39;completed&#39;] = True print(f&quot;Task &#39;{task_name}&#39; marked as completed.&quot;) else: print(f&quot;Task &#39;{task_name}&#39; not found.&quot;) def print_due_tasks(): today = datetime.datetime.today() print(&quot;Tasks due today or earlier:&quot;) for task_name, task_details in tasks.items(): if task_details[&#39;due_date&#39;] &lt;= today and not task_details[&#39;completed&#39;]: print(f&quot;- {task_name} (due {task_details[&#39;due_date&#39;]})&quot;) add_task(&#39;Complete project&#39;, &#39;2023-04-05 23:59:59&#39;) add_task(&#39;Buy groceries&#39;, &#39;2023-04-02 12:00:00&#39;) add_task(&#39;Call mom&#39;, &#39;2023-04-03 09:00:00&#39;) complete_task(&#39;Buy groceries&#39;) print_due_tasks() . Task &#39;Complete project&#39; added with due date 2023-04-05 23:59:59. Task &#39;Buy groceries&#39; added with due date 2023-04-02 12:00:00. Task &#39;Call mom&#39; added with due date 2023-04-03 09:00:00. Task &#39;Buy groceries&#39; marked as completed. Tasks due today or earlier: .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Simulations",
            "content": "Simulation 1 . Adding text to a list | This is a simulation where you can see the text getting added to the text box! | . Click me! . . Dictionary Simulation . Welcome to the dictionary simulation! Below, you will find a list of words and their definitions. To view the definition of a word, simply click on the button next to it. . Word List . Apple View Definition . | Banana View Definition . | Cactus View Definition . | Dolphin View Definition . | Elephant View Definition . . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/sikmulationideas/",
            "relUrl": "/csp/sikmulationideas/",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "CSUSM Presentation Notes",
            "content": "Notes . Works in Calstate San Marcos | Loves physics | Continued and took AP physics and continued to pursue physics | Cal State San Marcos is one of the few that has physics | Wanted to be close to family | Cal State wasn’t the easiest | Did not know how college was | failed calc because it was hard, had many failures however she always perservered and worked to grow | Worked in the lab and was inspired to work at a phd at USD | Cal State san marcos is a smaller school | Opened up many doors for her . | Was a delingquent in high school | Started at palomar college right after high school | during the pandemic he transfered to Cal State san marcos pursuing compsci | did not get to see campus until last semester | this is because of covid year | took 6 years to get bachlors degree | Cal State is a newer Cal State built in 1989 | 21st out of 23 | new engineering building and they work at a new building | national leader in social mobility | changes social economic status | very easy to get internships | best part of san diego is that there are many new industries that offer many new oppurtunities such as internships | lots of stairs | applied physics in elecronics, biological sience | computer science and computer information systems | cyber security program and computer engineering | smaller campus with more room to constantly change the curriculum | electrical engineering and software engineer | most often came in from mechanical engineering and applied physics and lead to a mastters program | very hands on programs | will be trained as an experimental physician | Biological Science, Dy Matthew Escobar mescobar@csusm.edu | math Dr amber puha apuha@csusm.edu | Many clubs at cal state san marcos | Cybersecurity club, robotics, 3D printing club, women in stem, and society physics students | very large student list. | Internships | Internships offer work experience for a limited time period | networking and campus events will help with internships | google can help with internships | clubs will help too with new oppurtunities | when applying for an internship avoid unpaid internships | if you are applying for something ask faculty members for help | writing centers can help you with your essays | summer scholars program gives you help with research | 10 week summer program and gives you a full time stiped or a part time stiped. | quantum bridge program is another program that helps cal state san marcos students when applying to the college | grant vs scholarship | grant is government funded money | scholarship is privately funded | sports can give you scholarships | to find scholarships you can yourself | you can get a scholarship for basicaly anything, simply even being mexican | grants are more of a demographic thing hard to get | depending on how much money your parents make will affect your grants | when you declare an indepenedt it gives you more economic potential | college debt is real and scary | there are two loans, you want to avoid getting loans | there are subsidized loans and unsubsidized loan | unsubsidized loan is partially funded by the government preventing you from going into debt from high interest rates | semester at cal state san marcos is 3k | subsidied loans do not accrue interest | unsubsidized loands do accrue interest | apply for fafsa | debt free college student | got internship at the safari park | some people go into biomedical | Cal State is a big teaching school | you can get paid for going to graduate school | make sure to get paid for your research | Cougar blue day and CSUSM | . Reflection . The presentation touched on several key topics, including academic programs, resources, and challenges that students may encounter at CSSM. One of the main takeaways from the presentation is the diverse range of academic programs and resources available to students at CSSM. The notes highlighted several areas of study, such as physics, computer science, and biological sciences, as well as programs like cybersecurity and computer engineering. Additionally, CSSM’s focus on social mobility and providing opportunities for students from diverse backgrounds to achieve academic and career success was commendable.Another important aspect of the presentation was the discussion of challenges that students at CSSM may face. For example, the pandemic has impacted the ability of students to fully experience the campus and its resources. Additionally, college debt is a real concern for many students, and the presentation stressed the importance of being aware of the resources available to help mitigate the financial burden of higher education. Overall, the presentation provided valuable insight into the experiences of students at CSSM and the opportunities and challenges that come with pursuing higher education. The presenters effectively conveyed the message that CSSM offers valuable resources and opportunities to its students, but it is also important for students to be aware of the potential obstacles and to seek out the resources available to help them navigate those challenges. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/CalStateSanMarcos/",
            "relUrl": "/csp/CalStateSanMarcos/",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "TEAM RAE planning",
            "content": "Data Structures including List, Dictionaries, 2D arrays and Iteration (Big Idea 3). . I plan to create multiple simulations showing off the us of lists and dictionaries and the how they work | Along with this I plan to also show how to iterate through these, this could be done through a visual simulation where the user can give input and see the iteration in real time | I want to also explain the uses of lists and dictionaries and explain the how this is data abstraction | I can also give a demonstration on how it was used in my CPT projet and how they can implenet the use of these data structures in their CPT projects as well | . Here is the Scrum Planning poster and timeline . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/RAEEplanningblog/",
            "relUrl": "/csp/RAEEplanningblog/",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Project Planning for teaching",
            "content": "Big Teams Data Structures including List, Dictionaries, 2D arrays and Iteration (Big Idea 3) . To complete my CPT project, I intend to repurpose some of the code from my previous group project. During the last trimester, I was responsible for developing the backend code, where I designed a personality testing function that updated a separate database, a user profile that collected and encrypted user information for future access, and a sign-in/log-in feature. I plan to utilize the user profile components and incorporate database storage to a simple game like Snake. Essentially, I will create a game that allows players to store their scores in a user database and profiles. Since our previous group project was not personalized, we decided to pursue separate CPT projects, while still collaborating on a group project. | . import random def spinnernum (): spin = int(input(&quot;how many choices?&quot;)) random_number = random.randint(1, spin) return random_number numbers = [] def simulation (): numbers.append(spinnernum()) for i in range(3): simulation() print(numbers) . [2] [2, 2] [2, 2, 6] . This is a simple simulation where you can see the list getting filled with random numbers . It takes the user input and uses the random library to input the numbers into the list | Here you can see how the list works | . my_dict = {} while True: key = input(&quot;Enter a key (or &#39;stop&#39; to exit): &quot;) if key == &#39;stop&#39;: break value = input(&quot;Enter a value: &quot;) my_dict[key] = value print(&quot;Dictionary contents:&quot;) for key, value in my_dict.items(): print(key, &quot;-&gt;&quot;, value) . Dictionary contents: age -&gt; 15 gender -&gt; male dog -&gt; yes . this is a simulation of a dictionary applying values to keys | This can be used to highlight the functionality of a dictionary and how quick it can be to access values | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/ProjectPlanningsimulation/",
            "relUrl": "/csp/ProjectPlanningsimulation/",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "CPT planning!",
            "content": "Ideas . Health and fitness tracker: Develop a web app that allows users to track their daily exercie routines, water ntake, and nutrition. The ap can store the user’s data in a database and display it in graphs and charts. . Personal finance manager: Create a program that help users manage their finances by tracking expenses, creating budgets, and generating reports. The program can use APIs to retrieve financial data and store it in a database. . Language larning app: Design a mobile app that helps user learn a new language by providing vocabulary lists, quizzes, and games. The app can use text-to-speech and speech-to-text features to aid pronunciation and conversation practice. . Social media platform: Build a social media platform that allow users to share text, images, and videos with fiends and followers. The platform can have features such as lkes, comments, and sharing, as well as privacy settings and a user profile system. . Online marketplace: Develop an online marketplace that connects buyers and sellers of goods and services. The marketplace can have feature such as search and filter, messaging, and payment processing. . Progress . I have already worked on my old CPT project from last trimester that works for time management From first trimester we have created a social media platform as well that we can work to implement pictures. So far it is only text and blogs . One other idea that I have is some type of calculator that can do complex calculations maybe for physics. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/CPTplanningfortest/",
            "relUrl": "/csp/CPTplanningfortest/",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post40": {
            "title": "Big Idea 2 Quiz",
            "content": "Review For Big Idea 2 Quiz . Here is my score for this quiz | For this quiz I got a 22/25 making a few minor errors | Some of the skills assessed in the quiz include filtering and sorting data, counting items in a dataset, and identifying advantages of lossless over lossy compression. | This quiz covers various topics related to data analysis and management, including compression algorithms, analyzing different types of data, using spreadsheets and databases, and working with binary numbers. | . . Answer B is correct. Lossless compression algorithms can reconstruct the original data exactly, while lossy compression algorthms cannot guarantee the reconstruction of the original data because they discard some information during the comression process. Therefore, a lossless compression algorithm is often preferred when it is important to preserve the original data without any loss. | For this question I messed the wording, the losless compressin stores all the data and does not lose ant data. While the lossy compression is simply lossy and will not completely rebuild the data | . . Answer A is correct. Compressing the file using a lossless compression algorithm before uploading it reduces the size of the file, while allowing the user to completly restore the file to its original version. This approach meets the users need of reducing the file size while ensuring the ability to fully restore the file to its original version. | This problem was very simple, as when you want to keep the data you would always go with choosing the losless data. it is the clear obvious answer and I made a simple mistake by putting lossy for the image | . . This problem was very challenging for me as I have not had a lot of practice with this | For this I got one of the correct choices however I did not see that choice D would work as well | Sorting the spreadsheet by year will put the oldest entries first. If you filter by year, entries without years will be removed. Filtering by photographer will remove entries without a photographer. Filters don’t change the entry order, so the photo with the earliest year will be at the top. | Through this process you will be bble to meet the required set | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BigIdea2quizandcorrection/",
            "relUrl": "/csp/BigIdea2quizandcorrection/",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post41": {
            "title": "Space and Time compexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . Because it can affect the speeds and efficiency of a program | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . Do you think this is a time complexity or space complexity or both problem? . I think this is a time complexity as the bigger the picture the more time it takes | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . # for i in numbers: # for j in numbers: # print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) # print(fibonacci(34)) print(fibonacci(40)) . 102334155 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) print(generate_subsets([1,2,3,4,5,6])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4], [1, 2, 3, 5, 6], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3], [1, 2, 4, 5, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4], [1, 2, 5, 6], [1, 2, 5], [1, 2, 6], [1, 2], [1, 3, 4, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4], [1, 3, 5, 6], [1, 3, 5], [1, 3, 6], [1, 3], [1, 4, 5, 6], [1, 4, 5], [1, 4, 6], [1, 4], [1, 5, 6], [1, 5], [1, 6], [1], [2, 3, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4], [2, 3, 5, 6], [2, 3, 5], [2, 3, 6], [2, 3], [2, 4, 5, 6], [2, 4, 5], [2, 4, 6], [2, 4], [2, 5, 6], [2, 5], [2, 6], [2], [3, 4, 5, 6], [3, 4, 5], [3, 4, 6], [3, 4], [3, 5, 6], [3, 5], [3, 6], [3], [4, 5, 6], [4, 5], [4, 6], [4], [5, 6], [5], [6], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(36)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 0.9291074275970459 seconds 14930352 Time taken: 2.8077468872070312 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. . | Bubble Sort: It is one of the simplest sorting algorithms, where each element is compared with its adjacent element and swapped if the adjacent element is greater. This process is repeated until the list is sorted. The time complexity of the bubble sort algorithm is O(n^2). . | Selection Sort: In this algorithm, the smallest element in the list is found and swapped with the first element. Then, the smallest element in the remaining list is found and swapped with the second element, and so on. The time complexity of the selection sort algorithm is O(n^2). . | Insertion Sort: This algorithm works by iterating through the list and inserting each element into its proper position in the sorted sub-list. The time complexity of the insertion sort algorithm is also O(n^2). . | Why is time and space complexity important when choosing an algorithm? . Programmers must prioritize considering the space and time complexity in their code as these are significant factors that influence code efficiency and readability. Optimal code that occupies minimal space and executes in the shortest time possible proves most effective for larger-scale projects. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? The choice of algorithm depends on the problem, input size, and resources available. Constant time algorithms are suitable for small data and limited resources, while exponential time algorithms may be necessary for larger data. For instance, in cryptography and scientific simulations, exponential time algorithms may be essential for accurate results. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? For algorithms with nested loops, time complexity is usually polynomial (O(n^2), O(n^3), etc.) based on the input size (n). Recursive algorithms&#39; time complexity is determined by the number of recursive calls and input size, typically expressed using recurrence relations. Time complexity for sorting and searching is dependent on the number of elements being sorted or searched, like O(n log n) for quicksort or merge sort and O(n) for linear search. Algorithms utilizing data structures like arrays, lists, or trees have space complexity proportional to the size of the data stored, such as O(n) for an algorithm creating an array of size n. | . | . Complete the Time and Space Complexity analysis questions linked below. Practice . The time complexity of the problem is O(N+M) because the first loop is O(N) and the second loop is O(M), with N and M being independent variables. The space complexity is constant or O(1) because variable size does not depend on input size. | the answer is option 4 there are two nested loops that both iterate over the same collection, thus the time taken to complete the algorithm grows quadratically with the size of the collection. | the answer is option 2 the first for statement is N. The second for statement is logN. pow(2,j) represents the step size so for each iteration of the second for, j increases until 2^j = n which means that j = log(2)n. Then it stops so the time complexity is N*logN. | Option 2 is the answer. The worst-case time complexity of an algorithm is the largest amount of time it takes to run for any input size. When one algorithm is asymptotically more efficient than another, it means it has a smaller worst-case time complexity. This implies that as input size grows towards infinity, the faster algorithm will eventually be X. For instance, algorithm X with O(n log n) worst-case time complexity is asymptotically more efficient than algorithm Y with O(n^2) worst-case time complexity. As the input size gets larger, X will eventually become faster than Y for large enough inputs. | Option 4 is the answer. The code iterates and assigns the halved and added value of &quot;i&quot; to variable &quot;a.&quot; As &quot;i&quot; approaches 0, N decreases in larger quantities initially and then slows down, following a logarithmic pattern. | Option 3 is correct. Programmers must consider both time and memory efficiency when evaluating algorithms. It&#39;s important to ensure that the algorithm doesn&#39;t use too much memory and that the program runs within a reasonable time frame. | Option 2 is correct. To calculate the time complexity of an algorithm, programmers typically identify the operations that the algorithm performs and count the number of times each operation is executed as a function of the input size n. This approach helps in determining how the algorithm&#39;s performance will scale with an increase in input size. | Option 3 is the answer. The time complexity is n*(n-1) because the first for loop runs n times, and the second for loop runs n-1 times. | The statement &#39;Algorithm B always has a worse running time than Algorithm A&#39; is false. Although Algorithm B may have a better asymptotic complexity than A, it does not always run faster for small input sizes. Asymptotic complexity only shows how an algorithm behaves as the input size grows towards infinity, but for small inputs, Algorithm A may still run faster than Algorithm B. |",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/SpaceandTime/",
            "relUrl": "/csp/SpaceandTime/",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post42": {
            "title": "Unit 2.4 Hacks",
            "content": "from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlitebbal.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular id = db.Column(db.Integer, primary_key=True) _task = db.Column(db.String(255), unique=False, nullable=False) _timeExpected = db.Column(db.String(255), unique=True, nullable=False) def __init__(self, task, timeExpected): self._task = task # variables with self prefix become part of the object, self._timeExpected = timeExpected @property def task(self): return self._task # a setter function, allows name to be updated after initial object creation @task.setter def task(self, task): self._task = task # a getter method, extracts uid from object @property def timeExpected(self): return self._timeExpected # a setter function, allows uid to be updated after initial object creation @timeExpected.setter def uid(self, timeExpected): self._timeExpected = timeExpected def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;task&quot;: self.task, &quot;timeExpected&quot;: self.timeExpected, } # CRUD update: updates user name, password, phone # returns self def update(self, task=&quot;&quot;, timeExpected=&quot;&quot;): self.task = task db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # just a definition . def initUsers(): with app.app_context(): db.create_all() u1 = User(task=&#39;Basketball&#39;, timeExpected=&quot;13 minutes&quot;) u2 = User(task=&#39;Track&#39;, timeExpected=&quot;51 minutes&quot;) u3 = User(task=&#39;math hw&#39;, timeExpected=&quot;16 minutes&quot;) u4 = User(task=&#39;CSP hw&#39;, timeExpected=&quot;17 minutes&quot;) u5 = User(task=&#39;Swim&#39;, timeExpected=&quot;15 minutes&quot;) u6 = User(task=&#39;Drawing&#39;, timeExpected=&quot;55 minutes&quot;) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid 13 minutes Created new uid 51 minutes Created new uid 16 minutes Created new uid 17 minutes Created new uid 15 minutes Created new uid 55 minutes . def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;task&#39;: &#39;Farming&#39;, &#39;timeExpected&#39;: &#39;13 minutes&#39;}, {&#39;id&#39;: 2, &#39;task&#39;: &#39;Track&#39;, &#39;timeExpected&#39;: &#39;51 minutes&#39;}, {&#39;id&#39;: 3, &#39;task&#39;: &#39;math hw&#39;, &#39;timeExpected&#39;: &#39;16 minutes&#39;}, {&#39;id&#39;: 4, &#39;task&#39;: &#39;CSP hw&#39;, &#39;timeExpected&#39;: &#39;17 minutes&#39;}, {&#39;id&#39;: 5, &#39;task&#39;: &#39;Swim&#39;, &#39;timeExpected&#39;: &#39;15 minutes&#39;}, {&#39;id&#39;: 6, &#39;task&#39;: &#39;Drawing&#39;, &#39;timeExpected&#39;: &#39;55 minutes&#39;}] . def find_by_task(task): with app.app_context(): user = User.query.filter_by(_task=task).first() return user # returns user object . def deleteuser(): id = input(&quot;enter task&quot;) user = find_by_task(id) print(user) if user is not None: with app.app_context(): db.session.delete(user) db.session.commit() print(&quot;User deleted.&quot;) else: print(&quot;User not found.&quot;) deleteuser() print(&quot;new DB&quot;) read() . None User not found. new DB . [{&#39;id&#39;: 1, &#39;task&#39;: &#39;Farming&#39;, &#39;timeExpected&#39;: &#39;13 minutes&#39;}, {&#39;id&#39;: 2, &#39;task&#39;: &#39;Track&#39;, &#39;timeExpected&#39;: &#39;51 minutes&#39;}, {&#39;id&#39;: 4, &#39;task&#39;: &#39;CSP hw&#39;, &#39;timeExpected&#39;: &#39;17 minutes&#39;}, {&#39;id&#39;: 5, &#39;task&#39;: &#39;jumping&#39;, &#39;timeExpected&#39;: &#39;15 minutes&#39;}, {&#39;id&#39;: 6, &#39;task&#39;: &#39;Drawing&#39;, &#39;timeExpected&#39;: &#39;55 minutes&#39;}, {&#39;id&#39;: 7, &#39;task&#39;: &#39;bowling&#39;, &#39;timeExpected&#39;: &#39;20&#39;}, {&#39;id&#39;: 8, &#39;task&#39;: &#39;jumprope&#39;, &#39;timeExpected&#39;: &#39;19&#39;}, {&#39;id&#39;: 9, &#39;task&#39;: &#39;bathroom&#39;, &#39;timeExpected&#39;: &#39;10&#39;}, {&#39;id&#39;: 10, &#39;task&#39;: &#39;code&#39;, &#39;timeExpected&#39;: &#39;15&#39;}] . def updateuser(): id2 = input(&quot;id&quot;) task2= input(&quot;new task&quot;) with app.app_context(): user = User.query.filter_by(id=id2).first() user.update(task=task2) db.session.commit() def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() updateuser() . AttributeError Traceback (most recent call last) /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb Cell 8 in &lt;cell line: 20&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; return json_ready &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; read() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; updateuser() /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb Cell 8 in updateuser() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; with app.app_context(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; user = User.query.filter_by(id=id2).first() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; user.update(task=task2) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; db.session.commit() AttributeError: &#39;NoneType&#39; object has no attribute &#39;update&#39; . def create(): # optimize user time to see if uid exists task = input(&quot;Enter your task&quot;) user = find_by_task(task) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object TimeExpected = input(&quot;Enter Time Expected&quot;) # Initialize User object before date user = User(task=task, timeExpected=TimeExpected, ) with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . NameError Traceback (most recent call last) /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb Cell 9 in &lt;cell line: 27&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; except: # error raised if object not created &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; print(&#34;Unknown error uid {uid}&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; create() /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb Cell 9 in create() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def create(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # optimize user time to see if uid exists &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; task = input(&#34;Enter your task&#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; user = find_by_task(task) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; try: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-17-2.4Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(&#34;Found n&#34;, user.read()) NameError: name &#39;find_by_task&#39; is not defined . Menu . def process(): endpoint = input(&quot;r for read, d for delete, u for update, c for create&quot;) if endpoint == &quot;r&quot;: with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready elif endpoint == &quot;d&quot;: deleteuser() elif endpoint == &quot;u&quot;: updateuser() elif endpoint == &quot;c&quot;: create() else: print(&#39;function not found&#39;) process() . [{&#39;id&#39;: 1, &#39;task&#39;: &#39;Farming&#39;, &#39;timeExpected&#39;: &#39;13 minutes&#39;}, {&#39;id&#39;: 2, &#39;task&#39;: &#39;Track&#39;, &#39;timeExpected&#39;: &#39;51 minutes&#39;}, {&#39;id&#39;: 4, &#39;task&#39;: &#39;CSP hw&#39;, &#39;timeExpected&#39;: &#39;17 minutes&#39;}, {&#39;id&#39;: 5, &#39;task&#39;: &#39;jumping&#39;, &#39;timeExpected&#39;: &#39;15 minutes&#39;}, {&#39;id&#39;: 6, &#39;task&#39;: &#39;Drawing&#39;, &#39;timeExpected&#39;: &#39;55 minutes&#39;}, {&#39;id&#39;: 7, &#39;task&#39;: &#39;bowling&#39;, &#39;timeExpected&#39;: &#39;20&#39;}, {&#39;id&#39;: 8, &#39;task&#39;: &#39;jumprope&#39;, &#39;timeExpected&#39;: &#39;19&#39;}, {&#39;id&#39;: 9, &#39;task&#39;: &#39;bathroom&#39;, &#39;timeExpected&#39;: &#39;10&#39;}] .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/24hackstocpt",
            "relUrl": "/csp/24hackstocpt",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post43": {
            "title": "Unit 2.4 Hacks",
            "content": "from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlitebbal2.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class Time(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular id = db.Column(db.Integer, primary_key=True) _task = db.Column(db.String(255), unique=False, nullable=False) _timeExpected = db.Column(db.String(255), unique=True, nullable=False) def __init__(self, task, timeExpected): self._task = task # variables with self prefix become part of the object, self._timeExpected = timeExpected @property def task(self): return self._task # a setter function, allows name to be updated after initial object creation @task.setter def task(self, task): self._task = task # a getter method, extracts uid from object @property def timeExpected(self): return self._timeExpected # a setter function, allows uid to be updated after initial object creation @timeExpected.setter def uid(self, timeExpected): self._timeExpected = timeExpected def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;task&quot;: self.task, &quot;timeExpected&quot;: self.timeExpected, } # CRUD update: updates user name, password, phone # returns self def update(self, task=&quot;&quot;, timeExpected=&quot;&quot;): self.task = task db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # just a definition . def initUsers(): with app.app_context(): db.create_all() u1 = Time(task=&#39;Basketball&#39;, timeExpected=&quot;13 minutes&quot;) u2 = Time(task=&#39;Track&#39;, timeExpected=&quot;51 minutes&quot;) u3 = Time(task=&#39;math hw&#39;, timeExpected=&quot;16 minutes&quot;) u4 = Time(task=&#39;CSP hw&#39;, timeExpected=&quot;17 minutes&quot;) u5 = Time(task=&#39;Swim&#39;, timeExpected=&quot;15 minutes&quot;) u6 = Time(task=&#39;Drawing&#39;, timeExpected=&quot;55 minutes&quot;) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid 13 minutes Created new uid 51 minutes Created new uid 16 minutes Created new uid 17 minutes Created new uid 15 minutes Created new uid 55 minutes . def read(): with app.app_context(): table = Time.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;task&#39;: &#39;Basketball&#39;, &#39;timeExpected&#39;: &#39;13 minutes&#39;}, {&#39;id&#39;: 2, &#39;task&#39;: &#39;Track&#39;, &#39;timeExpected&#39;: &#39;51 minutes&#39;}, {&#39;id&#39;: 3, &#39;task&#39;: &#39;math hw&#39;, &#39;timeExpected&#39;: &#39;16 minutes&#39;}, {&#39;id&#39;: 4, &#39;task&#39;: &#39;CSP hw&#39;, &#39;timeExpected&#39;: &#39;17 minutes&#39;}, {&#39;id&#39;: 5, &#39;task&#39;: &#39;Swim&#39;, &#39;timeExpected&#39;: &#39;15 minutes&#39;}, {&#39;id&#39;: 6, &#39;task&#39;: &#39;Drawing&#39;, &#39;timeExpected&#39;: &#39;55 minutes&#39;}] . def find_by_task(task): with app.app_context(): user = Time.query.filter_by(_task=task).first() return user # returns user object . def deleteuser(): id = input(&quot;enter task&quot;) user = find_by_task(id) print(user) if user is not None: with app.app_context(): db.session.delete(user) db.session.commit() print(&quot;User deleted.&quot;) else: print(&quot;User not found.&quot;) deleteuser() print(&quot;new DB&quot;) read() . {&#34;id&#34;: 5, &#34;task&#34;: &#34;Swim&#34;, &#34;timeExpected&#34;: &#34;15 minutes&#34;} User deleted. new DB . [{&#39;id&#39;: 1, &#39;task&#39;: &#39;Basketball&#39;, &#39;timeExpected&#39;: &#39;13 minutes&#39;}, {&#39;id&#39;: 2, &#39;task&#39;: &#39;Track&#39;, &#39;timeExpected&#39;: &#39;51 minutes&#39;}, {&#39;id&#39;: 3, &#39;task&#39;: &#39;math hw&#39;, &#39;timeExpected&#39;: &#39;16 minutes&#39;}, {&#39;id&#39;: 4, &#39;task&#39;: &#39;CSP hw&#39;, &#39;timeExpected&#39;: &#39;17 minutes&#39;}, {&#39;id&#39;: 6, &#39;task&#39;: &#39;Drawing&#39;, &#39;timeExpected&#39;: &#39;55 minutes&#39;}] . def updateuser(): id2 = input(&quot;id&quot;) task2= input(&quot;new task&quot;) with app.app_context(): user = Time.query.filter_by(id=id2).first() user.update(task=task2) db.session.commit() def read(): with app.app_context(): table = Time.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() updateuser() . def create(): # optimize user time to see if uid exists task = input(&quot;Enter your task&quot;) user = find_by_task(task) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object TimeExpected = input(&quot;Enter Time Expected&quot;) # Initialize User object before date user = Time(task=task, timeExpected=TimeExpected, ) with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;task&#39;: &#39;Walking&#39;, &#39;timeExpected&#39;: &#39;10&#39;} . Menu . def process(): endpoint = input(&quot;r for read, d for delete, u for update, c for create&quot;) if endpoint == &quot;r&quot;: with app.app_context(): table = Time.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready elif endpoint == &quot;d&quot;: deleteuser() elif endpoint == &quot;u&quot;: updateuser() elif endpoint == &quot;c&quot;: create() else: print(&#39;function not found&#39;) process() . [{&#39;id&#39;: 1, &#39;task&#39;: &#39;Basketball&#39;, &#39;timeExpected&#39;: &#39;13 minutes&#39;}, {&#39;id&#39;: 2, &#39;task&#39;: &#39;soccer&#39;, &#39;timeExpected&#39;: &#39;51 minutes&#39;}, {&#39;id&#39;: 3, &#39;task&#39;: &#39;math hw&#39;, &#39;timeExpected&#39;: &#39;16 minutes&#39;}, {&#39;id&#39;: 4, &#39;task&#39;: &#39;CSP hw&#39;, &#39;timeExpected&#39;: &#39;17 minutes&#39;}, {&#39;id&#39;: 6, &#39;task&#39;: &#39;Drawing&#39;, &#39;timeExpected&#39;: &#39;55 minutes&#39;}, {&#39;id&#39;: 7, &#39;task&#39;: &#39;Walking&#39;, &#39;timeExpected&#39;: &#39;10&#39;}, {&#39;id&#39;: 8, &#39;task&#39;: &#39;bathroom&#39;, &#39;timeExpected&#39;: &#39;20&#39;}] .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/24hackstocpt",
            "relUrl": "/csp/24hackstocpt",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post44": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . structure or blueprint of a database that defines how the data is organized, stored, and accessed. What is the purpose of identity Column in SQL database? | . | Columns are each record in the database What is the purpose of a primary key in SQL database? | . | primary key is the integer that describes the column, however we normally use a uid What are the Data Types in SQL table? | . | Integers, dates. | . import sqlite3 database = &#39;instance/sqlite1.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? I think that the connection object connects the user to the db | . | Same for cursor object? allows user to go to individual rows | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? There are many attributes in the debugger menu some things that we can see is the data per user | . | Is &quot;results&quot; an object? How do you know?- Results is an object as it has funcitons and variables . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$Hy1fgsUrtLQyLFiH$3cc83ddb860b8d0280bd58777f499233b49938f866621f2c2f8d3f89387d21cd&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$P90Vru6IpHL7U63y$006c43d8ab5a908b3efd46b2a7868fc775afb6824d90aa78f397e49b64406fc8&#39;, &#39;2023-03-19&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$N3WXOyCsMWK2U1aH$12aa4bac51817a5bc267bce2f0ea8e2c0f838b6519f9a89a2f0c8a8380fa346f&#39;, &#39;2023-03-19&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$tlXlHcOJONoIQBCN$bfe767ff69482666be328ccb0066e22df2211b9b65b5d9e4a6077f6695f58b40&#39;, &#39;2023-03-19&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$JEr0jrGsiNOUAL5w$c9b2e9f38f5cb16e5159f9a59f55fce471207fe5e2fc95fc55c595ad044280eb&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$2U5NaLM79LSEezIj$2902b375a8637c42351cdac4ba1859d8e3a1eb2f2a32b38eefcebbb08c548041&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? I think that I like the OOP better as I have had more practice with it however the new way of user the cursor method does seem simple | . | Explain purpose of SQL INSERT. Is this the same as User init? . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? The except woould happen if there is an error and it will output the error message | . | What code seems to be repeated in each of these examples to point, why is it repeated? The committing is getting repeated | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id 15 the password has been successfully updated . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes beause if it doesnt work properly it could damage the db | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? The f makes it a format string and prints out the message | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? The menu repats the function by lower the letters as well | . | Could you refactor this menu? Make it work with a List? Yes this could work with a list comparing the input to a function then runnning the function | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$P6bYSHBhIPCvZes5$d023ab574a8e8f39249dddab0871e504ce70a26d92b951f9075e04b837c2e563&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$EelEuFI8O8AJ0CbA$6c1bf82f03ef89fe77e72e27ba46f4b518b2a9a085ab81b87a236162af65c873&#39;, &#39;2023-03-16&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$UkCSrTDd0K9frnNA$c49478c9d697425fe7dfebcaf406d1b344fe66059d2983778c993794d0ebef20&#39;, &#39;2023-03-16&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$wB6WBIi8nm8egabE$1779947084eb70c8ee99953f11ea0edfeb031d07c76e5c8760bfd8dec19ede73&#39;, &#39;2023-03-16&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$ZT7Ld54b0mCuvHiE$d5352499d56aedc0f99e36e2f0ca222ff3787185e60f16a279c7badc641402e3&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$QSMvq4uxS2B8jOcD$265dde28ad8051e0eb62b0454206120eef8209e77c5bbfe0d1d098914f69bff0&#39;, &#39;1921-10-21&#39;) (7, &#39;&#39;, &#39;&#39;, &#39;sha256$vE4eNGXDN06y5z9G$6776d90abcaad9a11c422e35814ab99ba8752423375f6ef172c8f3ee82870a02&#39;, &#39;2023-03-16&#39;) (8, &#39;Alex&#39;, &#39;15&#39;, &#39;teehee&#39;, &#39;2000-15-10&#39;) Please enter c, r, u, or d . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post45": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite1.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User class user is the defining the template for users, its a class definition template, we are going to use this template to create objects of type user, but this is a template so when we see this code it is not going to do anyting right away so we do this code first so we can use this code later just like the HTTP off of the flask . | . | db.Model inheritance We are inheriting the model adding our own changes to it, someone that is a databaase scientist makes the tempalte and we use it | . | init method init instantiate an instance of the user class wit specific values for instance variables based on parameters | . | @property, @&lt;column&gt;.setter Defines getters and setters for class attributes | . | create, read, update, delete methods SQLalchemy methods can can manipulate the attributes of the instance | . | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): # class user is the defining the template for users, its a class definition template, we are going to use this template to create objects of type user, but this is a template so when we see this code it is not going to do anyting right away so we do this code first so we can use this code later just like the HTTP off of the flask . __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # We are inheriting the model adding our own changes to it, someone that is a databaase scientist makes the tempalte and we use it # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): # init instantiate an instance of the user class wit specific values for instance variables based on parameters self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # setters can change the attributes and property gets the data # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # just a definition . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object Create All Tables from db Object:To make SQL tables using the defined models, you can use the db.create_all() method on the db object. 2. User Object Constructors: User Object Constructors create a new User with particular characteristics. 2. User Object Constructors | Creates a class for the functions that you can reference | | Try / Except checks for errors in Python and displays an error message if there are any issues. | | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by Finds the user by querying the database | | user.password Verifies the user by checking the password | | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . True . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except If it doesn ot work it uses the except method | | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Invalid date require YYYY-mm-dd, date defaulted to 03-17-2023 Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}] . def deleteuser(): uid = input(&quot;enter UID&quot;) user = find_by_uid(uid) print(user) if user is not None: with app.app_context(): db.session.delete(user) db.session.commit() print(&quot;User deleted.&quot;) else: print(&quot;User not found.&quot;) deleteuser() print(&quot;new DB&quot;) read() . {&#34;id&#34;: 7, &#34;name&#34;: &#34;&#34;, &#34;uid&#34;: &#34;&#34;, &#34;dob&#34;: &#34;03-17-2023&#34;, &#34;age&#34;: 0} User deleted. new DB . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}] . def updateuser(): id2 = input(&quot;id&quot;) name2 = input(&quot;new name&quot;) with app.app_context(): user = User.query.filter_by(id=id2).first() user.update(name=name2) db.session.commit() updateuser() . AttributeError Traceback (most recent call last) /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 16 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; user.update(name=name2) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; db.session.commit() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; updateuser() /home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 16 in updateuser() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; with app.app_context(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; user = User.query.filter_by(id=id2).first() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; user.update(name=name2) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexkumar/vscode/fastpages-APCSP/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; db.session.commit() AttributeError: &#39;NoneType&#39; object has no attribute &#39;update&#39; . All in one function: . In this code it takes the input from the user and from this input it will choose one of the crud enpoints, create read or delete. | and from this it will take more input accordingly to the function called and then will change the SQLite database | . def process(): endpoint = input(&quot;r for read, d for delete, u for update, c for create&quot;) if endpoint == &quot;r&quot;: with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready elif endpoint == &quot;d&quot;: deleteuser() elif endpoint == &quot;u&quot;: updateuser() elif endpoint == &quot;c&quot;: create() else: print(&#39;function not found&#39;) process() . Invalid date require YYYY-mm-dd, date defaulted to 03-17-2023 Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0} . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post46": {
            "title": "Week 25 Hacks",
            "content": "lossy image . Jpeg images are very lossy, this is an example of a lossy image | In lossy compression, some of the original image data is permanently discarded, resulting in a reduction in quality. The amount of data that is discarded depends on the degree of compression used. Higher levels of compression lead to greater loss of data and lower image quality. | . Lossless image . PNGS are lossless so if you scale the image it does not lose pixels | Lossless compression algorithms typically work by finding patterns in the image data and representing those patterns in a more efficient way. This can result in a significant reduction in file size without any loss of information. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;luka.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 255 - (pixel[0]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average2, average, average, pixel[3])) else: image[&#39;gray_data&#39;].append((average2, average, average)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;luka.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 255 - (pixel[1]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average2, average, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average2, average)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;luka.jpg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 254 - (pixel[2]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average2, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average, average2)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from PIL import Image, ImageFilter # Load image image = Image.open(&quot;luka.jpg&quot;) # Apply Gaussian blur filter blurred_image = image.filter(ImageFilter.GaussianBlur(radius=5)) # Display blurred image blurred_image.save(&quot;blurred_image.jpg&quot;) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Week25hacks",
            "relUrl": "/csp/Week25hacks",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 2.3 Hacks",
            "content": "import seaborn as sns # Load the titanic dataset tips_data = sns.load_dataset(&#39;tips&#39;) tips_data.head(15) . total_bill tip sex smoker day time size . 0 16.99 | 1.01 | Female | No | Sun | Dinner | 2 | . 1 10.34 | 1.66 | Male | No | Sun | Dinner | 3 | . 2 21.01 | 3.50 | Male | No | Sun | Dinner | 3 | . 3 23.68 | 3.31 | Male | No | Sun | Dinner | 2 | . 4 24.59 | 3.61 | Female | No | Sun | Dinner | 4 | . 5 25.29 | 4.71 | Male | No | Sun | Dinner | 4 | . 6 8.77 | 2.00 | Male | No | Sun | Dinner | 2 | . 7 26.88 | 3.12 | Male | No | Sun | Dinner | 4 | . 8 15.04 | 1.96 | Male | No | Sun | Dinner | 2 | . 9 14.78 | 3.23 | Male | No | Sun | Dinner | 2 | . 10 10.27 | 1.71 | Male | No | Sun | Dinner | 2 | . 11 35.26 | 5.00 | Female | No | Sun | Dinner | 4 | . 12 15.42 | 1.57 | Male | No | Sun | Dinner | 2 | . 13 18.43 | 3.00 | Male | No | Sun | Dinner | 4 | . 14 14.83 | 3.02 | Female | No | Sun | Dinner | 2 | . Anaylzing the data set . This data set analyzes the amount of tip and includes different variables such as the gender, smoker, day and time, and it also includes the size | The tip varies with total bill however the other factors may have an impact | . df = tips_data df[&#39;sex&#39;] = df[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;Male&#39; else 0) # 0 is female and 1 is male df[&#39;smoker&#39;] = df[&#39;smoker&#39;].apply(lambda x: 1 if x == &#39;Yes&#39; else 0) # smoker is 1 non smoker is 0 df.head() . total_bill tip sex smoker day time size . 0 16.99 | 1.01 | 0 | 0 | Sun | Dinner | 2 | . 1 10.34 | 1.66 | 1 | 0 | Sun | Dinner | 3 | . 2 21.01 | 3.50 | 1 | 0 | Sun | Dinner | 3 | . 3 23.68 | 3.31 | 1 | 0 | Sun | Dinner | 2 | . 4 24.59 | 3.61 | 0 | 0 | Sun | Dinner | 4 | . from sklearn.preprocessing import OneHotEncoder import pandas as pd enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(df[[&#39;day&#39;]]) onehot = enc.transform(df[[&#39;day&#39;]]).toarray() cols = [&#39;day_&#39; + val for val in enc.categories_[0]] df[cols] = pd.DataFrame(onehot) df.drop([&#39;day&#39;], axis=1, inplace=True) df.dropna(inplace=True) . df.head() . total_bill tip sex smoker time size day_Fri day_Sat day_Sun day_Thur . 0 16.99 | 1.01 | 0 | 0 | Dinner | 2 | 0.0 | 0.0 | 1.0 | 0.0 | . 1 10.34 | 1.66 | 1 | 0 | Dinner | 3 | 0.0 | 0.0 | 1.0 | 0.0 | . 2 21.01 | 3.50 | 1 | 0 | Dinner | 3 | 0.0 | 0.0 | 1.0 | 0.0 | . 3 23.68 | 3.31 | 1 | 0 | Dinner | 2 | 0.0 | 0.0 | 1.0 | 0.0 | . 4 24.59 | 3.61 | 0 | 0 | Dinner | 4 | 0.0 | 0.0 | 1.0 | 0.0 | . from sklearn.preprocessing import OneHotEncoder import pandas as pd enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(df[[&#39;time&#39;]]) onehot = enc.transform(df[[&#39;time&#39;]]).toarray() cols = [&#39;time_&#39; + val for val in enc.categories_[0]] df[cols] = pd.DataFrame(onehot) df.drop([&#39;time&#39;], axis=1, inplace=True) df.dropna(inplace=True) . df.head() . total_bill tip sex smoker size day_Fri day_Sat day_Sun day_Thur time_Dinner time_Lunch . 0 16.99 | 1.01 | 0 | 0 | 2 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | . 1 10.34 | 1.66 | 1 | 0 | 3 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | . 2 21.01 | 3.50 | 1 | 0 | 3 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | . 3 23.68 | 3.31 | 1 | 0 | 2 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | . 4 24.59 | 3.61 | 0 | 0 | 4 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | . print(df.query(&quot;tip &gt; 0&quot;).mean()) . total_bill 19.785943 tip 2.998279 size 2.569672 day_Fri 0.077869 day_Sat 0.356557 day_Sun 0.311475 day_Thur 0.254098 time_Dinner 0.721311 time_Lunch 0.278689 dtype: float64 . /tmp/ipykernel_12209/703362537.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. print(df.query(&#34;tip &gt; 0&#34;).mean()) . print(&quot;max for male&quot;) print() print(df.query(&quot;sex == 1&quot;).max()) print() print(&quot;min for male&quot;) print() print(df.query(&quot;sex == 1&quot;).min()) . max for male total_bill 50.81 tip 10.00 size 6.00 day_Fri 1.00 day_Sat 1.00 day_Sun 1.00 day_Thur 1.00 time_Dinner 1.00 time_Lunch 1.00 dtype: float64 min for male total_bill 7.25 tip 1.00 size 1.00 day_Fri 0.00 day_Sat 0.00 day_Sun 0.00 day_Thur 0.00 time_Dinner 0.00 time_Lunch 0.00 dtype: float64 . /tmp/ipykernel_12209/1846147331.py:3: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. print(df.query(&#34;sex == 1&#34;).max()) /tmp/ipykernel_12209/1846147331.py:7: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. print(df.query(&#34;sex == 1&#34;).min()) . df.head() df[&#39;tip_ratio&#39;] = df[&#39;tip&#39;] / df[&#39;total_bill&#39;] df.head() df.drop([&#39;total_bill&#39;], axis=1, inplace=True) df.head() . tip sex smoker size day_Fri day_Sat day_Sun day_Thur time_Dinner time_Lunch tip_ratio . 0 1.01 | 0 | 0 | 2 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 0.059447 | . 1 1.66 | 1 | 0 | 3 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 0.160542 | . 2 3.50 | 1 | 0 | 3 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 0.166587 | . 3 3.31 | 1 | 0 | 2 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 0.139780 | . 4 3.61 | 0 | 0 | 4 | 0.0 | 0.0 | 1.0 | 0.0 | 1.0 | 0.0 | 0.146808 | . df.drop([&#39;tip&#39;], axis=1, inplace=True) . import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score data = df X = data[[&#39;size&#39;, &#39;sex&#39;, &#39;smoker&#39;, &#39;day_Fri&#39;, &#39;day_Sat&#39;, &#39;day_Sun&#39;, &#39;day_Thur&#39;, &#39;time_Dinner&#39;, &#39;time_Lunch&#39;]] y = data[&#39;tip_ratio&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=True) model = LinearRegression() model.fit(X_train, y_train) y_pred = model.predict(X_test) mse = mean_squared_error(y_test, y_pred) mae = mean_absolute_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) print(&quot;mse&quot;, mse) print(&quot;mae&quot;, mae) print(&quot;r2&quot;, r2) . mse 0.005770406726776936 mae 0.038372554793093525 r2 -0.00193944292273307 . mean_size = df[&#39;size&#39;].mean() # Print the mean size print(mean_size) . 2.569672131147541 . mean_gender = df[&#39;tip_ratio&#39;].mean() # Print the mean size print(&quot;mean_gender&quot;, mean_gender) . mean_gender 0.16080258172250478 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/23hackswithtips",
            "relUrl": "/csp/23hackswithtips",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post48": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7352941176470589 LogisticRegression Accuracy: 0.788235294117647 . /home/alexkumar/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post49": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? cd or change directory, ls which shows the files inside the directory | . | What are the command you use in Windows terminal to access files? We start with changing the directories and from the cd to the correct folder and then we can select specific files that we want to work with. Windows uses parenthesis while the linux and mac use slashes | . | What are some of the major differences? Path separator:The most obvious difference is the path separator. Windows uses backslashes () to separate directories and files, while Mac/Linux use forward slashes (/). Provide what you observed, struggled with, or leaned while playing with this code. | . | Why is path a big deal when working with images? images have a lot of characteristics. The file path is important when working with images because it identifies the location of the image file on the computer&#39;s file system. Errors can occur if the file path is incorrect or invalid, and the format may differ depending on the operating system. | . | How does the meta data source and label relate to Unit 5 topics? Metadata refers to data that describes other data. It provides context and additional information about the data itself, such as its format, structure, and source. In the context of data wrangling and exploration, metadata can be used to understand the characteristics of the data, such as its size, type, and any potential issues or limitations that may need to be addressed. | . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython and Jupyter Notebooks provides a powerful and flexible platform for data analysis and scientific computing, with rich features and capabilities for working with a wide range of data types and formats. t is particularly useful for data analysis and scientific computing, as it provides a powerful and flexible environment for exploring and manipulating data. | . | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Smile.png&quot;}, ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet Smile.png PNG RGBA Original size: (1200, 1200) Scaled size: (320, 320) -- scaled image -- . grey image . . This is the JPEG . . This is a . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. AP Prep | In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Data%20compression",
            "relUrl": "/csp/Data compression",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post50": {
            "title": "MCQ College Board 3",
            "content": ". The robot in Grid I proceeds by moving forward along the bottom row until it reaches the end, after which it executes two right turns, moves forward twice, executes two more right turns, and continues moving forward until it reaches the end of the middle row. It then executes two left turns, moves forward twice, executes two more left turns, and proceeds to move forward until it reaches its destination, as indicated by the “Goal_Reached” condition being satisfied. . | The option is not correct because in Grid II, the robot lands on the middle square of the grid facing right. Although it cannot turn right, it can turn left. It proceeds by moving forward until it reaches the middle square of the top row, at which point it turns left and moves forward to the square in the upper right corner of the grid. However, since the robot cannot move right, left or forward from this square, it becomes stuck in a perpetual loop of the “REPEAT UNTIL” command, as the “Goal_Reached” condition can never be satisfied. . | . . For a binary search to function as intended on a list, it is crucial that the list be sorted in either ascending or descending order. If the list is unsorted, the binary search algorithm will not be able to locate the desired element efficiently, as it relies on the assumption that the middle element of the list is the one being searched for. Therefore, sorting the list before performing a binary search is a prerequisite to ensure its success. . | This statement is incorrect. Sorting a list of values does not depend on the numerical base used to represent them. The sorting process itself is independent of the numerical base and is only concerned with arranging the values in a specific order. However, when performing operations on the values, such as arithmetic or comparison, it is essential to ensure that the values are represented consistently in the same numerical base. . | . . For a binary search algorithm to operate correctly on a list, it is imperative that the list be sorted in either ascending or descending order. The binary search algorithm’s success is based on the premise that it can efficiently locate a desired element in the middle of the sorted list by comparing it to the search value. . | The accuracy of the binary search operation is not dependent on the numerical base used to store the values being searched. The binary search algorithm is concerned solely with the arrangement of the elements in the list and how they compare to the search value. It does not depend on the representation of the values in any specific numerical base. . | . . When employing simulations, the extent of their usefulness is determined by the model used in the simulation. The model’s level of complexity and accuracy dictates the level of realism and fidelity of the simulation results. Despite the advantages of having an intricate model, there may be valid reasons for utilizing a simplified model | One such reason is the ease of implementation. A less complex model may be easier to simulate and analyze, making it more practical and efficient for some applications. Therefore, while a simplified model may not be as realistic, it may still provide useful insights and facilitate understanding of the system being studied. | . . The number of steps required to sort a list increases linearly as the size of the list increases. Specifically, the number of steps is equal to 10n for a list of size n. This represents a polynomial efficiency, which suggests that the algorithm’s performance remains reasonable as the size of the list increases. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BlogCollegeboard3review/",
            "relUrl": "/csp/BlogCollegeboard3review/",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post51": {
            "title": "Hacks for Unit 3.17 and 3.18",
            "content": "Hacks/Assignment Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . num = [] count = 0 def collatz(i): global count global num while i &gt; 1: if (i % 2): # i is odd i = 3*i + 1 count +=1 num.append(i) else: # i is even i = i//2 count +=1 num.append(i) else: print(count) print(num) i = int(input(&#39;Enter i: &#39;)) collatz(i) . 5 [16, 8, 4, 2, 1] . Hacks/assignment Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] sum = num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] +num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] sum2 = sum + sum +sum + sum + sum + sum + sum + sum + sum + sum + sum +sum + sum + sum + sum + sum + sum + sum print(sum2) . 3600 . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] print(36*sum(num)) . 3600 . The bottom one is more efficient because it uses built in functions to add the numbers instead of having to add each one individually which takes a long time. Then adding the sum everytime is even more inneficient . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] if True: sum = 0 for i in num: sum += num[i-1] print(sum*36) . 3600 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/317hacks",
            "relUrl": "/csp/317hacks",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post52": {
            "title": "5.5 and 5.6 big idea blog",
            "content": "Big Idea 5.5 . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. During this Tech Talk, we will be discussing three license types: the Creative Commons Zero v1.0 Universal, the Open Source MIT License, and the Open Source GPL License. The Creative Commons Zero v1.0 Universal license offers public use without the possibility of copyrighting. The Open Source MIT License permits distribution of closed source materials and requires credit to be given to the original creator. Finally, the Open Source GPL License gives the owner complete control over the project, but prohibits the distribution of closed source components. | | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. In my opinion, we should adopt the Open Source GPL License for our GitHub projects. This ensures that we are both legally and ethically crediting the owners of any source code we utilize. Similar to how music and movie companies protect their digital content through Digital Rights Management to prevent piracy and regulate ownership, it’s important for us to use Creative Commons software for educational purposes, as it is freely available for all to use. While open source code is often free, businesses may choose not to make their licenses open source. However, they still rely on access to open source code to be successful. | | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. For my own personal blog I made my repository a Open Source GPL license. We also made the license for the group repository a Open Source GPL License. We chose this license because it allows our code to be open for anyone’s use but it doesn’t allow anyone to distribute our closed sources of the code. | | Big Idea 5.6 . Describe PII you have seen on project in CompSci Principles The PII I have seen on project in CSP is that we know each other’s names, emails, photos, education, and addresses and phone numbers. I have seen these on project in CSP because we display it on our github projects. | | What are your feelings about PII and your personal exposure? I believe it is important to be mindful of the personal information we put online, particularly with regards to Personally Identifiable Information (PII). While it may be acceptable to share our names and email addresses, it is crucial to avoid sharing private and sensitive information such as Social Security numbers, passwords, and other confidential details. However, it is also important to recognize the benefits that PII can bring to companies, as they can use this information to tailor their websites to our interests and preferences, potentially increasing their popularity and success. | | Describe good and bad passwords? What is another step that is used to assist in authentication. A strong password should consist of a mix of uppercase and lowercase letters, numbers, symbols, and punctuation. On the other hand, a weak password may be easily guessable and may include full words, commonly used passwords, pet names, and personal information. To enhance security, it’s advisable to use two-factor authentication, which requires access to two separate devices in order to log into an account. | | Try to describe Symmetric and Asymmetric encryption. I think that Symmetric encryption is where one secret key encrypts and decrypts the information. Asymmetric encryption uses two keys, a public and private to encrypt and decrypt the information. | | Provide an example of encryption we used in AWS deployment. One example is SSL encryption. And this uses both the symmetric and the asymmetric encryption. | | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. I have not learned the hard way with a phishing scheme because most of the phishing emails I receive go to the spam. But when I do see one, I read the email and see that it is a phishing scam. On instagram I see this very often as many accounts get hacked and end up sending me links and files. Usually these work by pretending to be a company or something that they are not. | |",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/bigideablogforweek21/",
            "relUrl": "/csp/bigideablogforweek21/",
            "date": " • Feb 12, 2023"
        }
        
    
  
    
        ,"post53": {
            "title": "Big Idea 5.3 computing bias",
            "content": "Intentional or Purposeful bias (Crossover Group Up, 10 minutes) . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . From our groups reserach, we conclude that the younger generationsa are often using tiktok | We also see that the older group using facebook | 25+ can use facebook while under that goes for Tiktok | There could be a purposeful exclusion because the divide between the groups is very prominent | It is not harmful because the different age groups have different interests and the application can cater to those interests | I think that it is also good for business because it allows the application to focus on one small group of people rather than having to focus on the larger group. With this it can specialize and possibly include features that would cater to the old or cater specific to the young | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . I think that they use female voices because of the old gender roles. The old untrue gender roles of how women are supposed to be there to help | Another possible reason for this female voice is that it could be more positive or lighter in tone compared to a male voice; the voice could be more peaceful and better for the ear | I think that it is not really harmful as you can change the voice | It could possibly be good for business because it has lighter tones than that of a male voice | Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) | Many of our opinions subconsciesly stem from the ideas that we see online. Netflix google and facebook often inspire our ideas even though we might not be aware. | Often in the news we are given limited perspectives that are biased. And when given these biased viewpoints we tend to follow them because we do not understand the other viewpoints | One specific exmaple of this is with Google and how often the information on there is based | . Come up with some thoughts on the video and be ready to discuss them as I call on you. Here are some ideas… . The owner of the computer thinks that this is intentional because he is claiming that the computer is purposely avoiding him by calling the computer racist. By this he implies that the computer purposely does not recognize his face because it chooses not to. I think this is happening because there is not proper lighting but when the white person goes into fram she reflects off more light which makes it easier for the camera to recognize the perosn versus when he does it, there is less light reflected and the computer cannot see him properly, I think that it has to be corrected because the software should work more often and the lighting was good enough to sense where he was. It is more of a problem with the software rather than the software choosing not to sense him. To produce a better outcome I would make it more accurate and work more often. | . Big Idea 5.4 . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . We could make a blog that all of us could edit, like a BIG group repo where we could add our ideas to it. This could be very helpful because now it will encapsulate all of our classes learning and if someone is behind it is very easy to go learn from another groups learning on the big repo | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . Yes my projects would be better because I would be able to crosscheck my learnings and be able to validate my information. It is important to do that because it wil make sure my information that I am presenting is correct. | . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . The data that I would collect at the N@tm would be the input and feedback that I get form the parents. This could be very helpful because I can then make my project better and more efficient using their feedback. Their perspectives could be different and offer new ways to improve my project that our group would not be able to understand without the input. This owuld make my final project better because then it would be applicable to multiple perspectives | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/ComputingBiasBigIdea/",
            "relUrl": "/csp/ComputingBiasBigIdea/",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post54": {
            "title": "MCQ Blog",
            "content": "I got a 48/50 | In this MCQ I had a lot of practice with algorithms and understanding the purpose and function behind them. I also was able to learn from my mistakes and think about the functions in a different way. For example question 7, I learned how to check for different conditions and see about how to think about it in a different way. | . . This answer is wrong because I made a simple reading error. In this example it takes about a simple function that would predict whether an book is borrowed. It would not make sense to take the product between them | In order for this to be true, it would make sense to add them and see if the product is even because that means that the returns and buys are equal for it to be a even number | . . This is an if statement inside of another if statement. This represents the beggining statement as it can check for two different conditions, and if the conditions are true it will give the proper answer | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/MCQQuestions2Review/",
            "relUrl": "/csp/MCQQuestions2Review/",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post55": {
            "title": "IndividualBlog",
            "content": "Each individual preforms starts “pre-view” outline/write up of materials requried for College Board For my video submission, in order to meet the College Board requirements for the Performance task, I need to show the input and output and the program working. I also need to show what is the purpose of the program and emphasize what the program does with the user input. I also need to have data abstraction in my program, this can be in the form of a list that stores the data of the user. In my video I also need to show off the use of sequencing selection and iteration for my algorithms in order to show off how I am using functions to simplifiy the process. I need to explain the algorithms in order to show off complexity | . | Describe the portion of the Project you will use for Create Performance task In our SAAKD group, I will show off my feature that allows the user to time their tasks by storing the users input into a table and having a timer inside of the html that will track the time it takes for their activities | . | Describe code plan as it is required for CB My plan is to have a function that will be able to take in the users input, for expected time and also the name of the task. This function will store all the data in a list and also it will start a timer. Another function will be used to add the entries from this list and put it in the form of a html table and give output to the user so they can see the live action timer. Finally I will also use another funciton that will be able to take entries from the list and remove them in case the user is done with an adtivity. The list that is behind the code poses as my data abstration as it can be easy to iterate through in order to quickly populate the table with data | . | Consider what will be demonstrated in the video In my video I will give a brief overview of the code quickly showing off the functionality and how it is used. Then I will continue explain what the purpose of it as I go over one example of my adding a class with an expected time. Then I will wait, pause the timer and delete it to show off all the functionality of my project. | . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/IndividualBlog2/",
            "relUrl": "/csp/IndividualBlog2/",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post56": {
            "title": "Big Idea Blog",
            "content": "Think of three beneficial effects of your projects based on 5.1 Unit The timer allows users to manage their schedules | The todo list can help users keep track of their ideas and goals | the notes function will help people stay organized with their homework and class notes | | Think of a potential harmful effect of your project One potential harmful thing is that people will become to reliant on the calculator and will not be able to do simple math after | | Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admi password on lab machines at school? One pro is that it makes students stay on task and focus on their school work instead of doing things like playing games or watching youtube videos as these can be distracting. One con is that often when trying to find data or information online some websites may be blocked for being a distraction when they actually are not. This can prevent or slow down learning when it is a struggle to find information online and the sites are blocked for security reasons | | What concerns do you have personally about the digital divide? for oyuself or for others? I think that for myself I will be at a benefit because I have access to the internet as well as a laptop that will give me access to a wealth of knowledge online. This is very unfair, because some people that are not as fortunate and will not be able to learn as quickly. They will not be able to get access to all the infromation as me and they will have slower learning efficiency. Some technologies such as canvas and google drive and desmos really help me with visuals and understanding the concepts | |",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/csp/2023/01/30/BigIdeablog.html",
            "relUrl": "/markdown/csp/2023/01/30/BigIdeablog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post57": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date, datetime from dateutil.relativedelta import relativedelta def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) def jsonSerial(obj): &quot;&quot;&quot;JSON serializer for objects not serializable by default json code&quot;&quot;&quot; if isinstance(obj, (datetime, date)): return obj.isoformat() raise TypeError (&quot;Type %s not serializable&quot; % type(obj)) class User: def __init__(self, name, uid, password, ClassOf, dob): self._name = name self._uid = uid self._ClassOf = ClassOf self.dob = dob self.set_password(password) @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict @property def ClassOf(self): return self._ClassOf @ClassOf.setter def ClassOf(self, ClassOf): self._ClassOf = ClassOf @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; def __str__(self): return json.dumps(self.dictionary) def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; def __str__(self): return json.dumps(self.dictionary) def ToJSON(self): ret = { &#39;name&#39;: self.name, &#39;age&#39;: calculate_age(self.dob), &#39;uid&#39;: self.uid, &#39;classOf&#39;: self.ClassOf } return json.dumps(ret, default = jsonSerial) def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; def tester(users, uid, psw): result = None for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(str(user)) return result def __str__(self): return json.dumps(self.dictionary, default = jsonSerial ) if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Safin&#39;, uid=&#39;bobby&#39;, password=&#39;bobby11&#39;,dob = date(2006, 2, 11), ClassOf = 2024) u2 = User(name=&#39;Kaiden&#39;, uid=&#39;billy&#39;, password=&#39;123bill&#39;,dob = date(2005, 7, 10), ClassOf = 2024) u3 = User(name=&#39;Amay&#39;, uid=&#39;may&#39;, password=&#39;123may&#39;,dob = date(2006, 3, 3), ClassOf = 2024) u4 = User(name=&#39;Bron&#39;, uid=&#39;bronny&#39;, password=&#39;123bronnn&#39;,dob = date(1989, 12, 8), ClassOf = 2000) u5 = User(name=&#39;David&#39;, uid=&#39;vid&#39;, password=&#39;123vidd&#39;,dob = date(2006, 11, 9), ClassOf = 2024) users = [u1, u2, u3, u4, u5] . for i in users: print(&quot;Here is info about&quot;, i.name + &quot;, n t&quot; ,i) print(&quot;Here is a representation of the class instance of &quot;, i.name,&quot; n t&quot; + repr(i)) print(&quot;Here is a non-json description&quot;, &quot;name:&quot;, i.name, &quot;age:&quot;, i.age, &quot; n n&quot;) . Here is info about Safin, {&#34;name&#34;: &#34;Safin&#34;, &#34;uid&#34;: &#34;bobby&#34;, &#34;dob&#34;: &#34;2006-02-11&#34;, &#34;age&#34;: 16} Here is a representation of the class instance of Safin User(name=Safin, uid=bobby, password=sha256$2pvob4zLDf1wuhyp$af8363b52f67f598b3aafd0ac75b399cfa0ac70fdbe909f56db1f00ffc0758c6,dob=2006-02-11) Here is a non-json description name: Safin age: 16 Here is info about Kaiden, {&#34;name&#34;: &#34;Kaiden&#34;, &#34;uid&#34;: &#34;billy&#34;, &#34;dob&#34;: &#34;2005-07-10&#34;, &#34;age&#34;: 17} Here is a representation of the class instance of Kaiden User(name=Kaiden, uid=billy, password=sha256$RtxVdTx3P3xIhlPt$b56ad6f232b28c5cb10fd6ca469d0c219c7d08cc7e34119a36f25c765f03da29,dob=2005-07-10) Here is a non-json description name: Kaiden age: 17 Here is info about Amay, {&#34;name&#34;: &#34;Amay&#34;, &#34;uid&#34;: &#34;may&#34;, &#34;dob&#34;: &#34;2006-03-03&#34;, &#34;age&#34;: 16} Here is a representation of the class instance of Amay User(name=Amay, uid=may, password=sha256$y2aI8rskHyuY7qSG$d828972304ae5e2c917fc3b2046cf0903139b5379bce79fe714ac433f194a5bb,dob=2006-03-03) Here is a non-json description name: Amay age: 16 Here is info about Bron, {&#34;name&#34;: &#34;Bron&#34;, &#34;uid&#34;: &#34;bronny&#34;, &#34;dob&#34;: &#34;1989-12-08&#34;, &#34;age&#34;: 33} Here is a representation of the class instance of Bron User(name=Bron, uid=bronny, password=sha256$ma5jJtoeRRKYhFVg$2d97145750ed26c5c4e122d67ea98dfc607eb07c3172beb4e1ca1171a716ecc2,dob=1989-12-08) Here is a non-json description name: Bron age: 33 Here is info about David, {&#34;name&#34;: &#34;David&#34;, &#34;uid&#34;: &#34;vid&#34;, &#34;dob&#34;: &#34;2006-11-09&#34;, &#34;age&#34;: 16} Here is a representation of the class instance of David User(name=David, uid=vid, password=sha256$BfsuMCoaq8hDjPGG$0b19798d8452e6f23dc277b78c787f8bc5623e1763ccfc76c9e29bd8d9f46037,dob=2006-11-09) Here is a non-json description name: David age: 16 . import json class task: def __init__(self, activity, time): self._time = time self._activity = activity @property def activity(self): return self._activity @activity.setter def task(self, activity): self._activity = activity @property def time(self): return self._time @time.setter def time(self, time): self._time = time @property def dict(self): data = { &quot;Activity&quot; : self.activity, &quot;time&quot; :self.time } def __str__(self): return json.dumps(self.dict) def __repr__(self): return f&#39;user(Task={self._activity}, time={self._time})&#39; class1 = task(&quot;Calc&quot;, 20) class2 = task(&quot;CSP&quot;, 50) print(&quot;Person 1 activity :&quot;, class1.activity) print(&quot;person 1 time:&quot;, class1.time, &quot; n&quot;) print(&quot;Person 2 activity :&quot;, class2.activity) print(&quot;person 2 time:&quot;, class2.time) print(repr(class1)) print(repr(class2)) . Person 1 activity : Calc person 1 time: 20 Person 2 activity : CSP person 2 time: 50 user(Task=Calc, time=20) user(Task=CSP, time=50) . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/pbl/2023/01/10/PBL-model.html",
            "relUrl": "/csp/pbl/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post58": {
            "title": "Final Blog for teaching",
            "content": "Hacks + Notes . Lesson Hacks Notes Grades . Unit 3 Sections 1-2 | Hacks | Notes | 1 | . Unit 3 Sections 3-4 | Hacks | Notes | 1 | . Unit 3 Sections 5-7 | Hacks | Notes | 0.9 | . Unit 3 Sections 8-10 | Hacks | Notes | 1 | . Unit 3 Sections 9-11 | Hacks | Notes | 0.93 | . Unit 3 Sections 12-13 | N/A | Notes | N/A | . Unit 3 Sections 14-15 | Hacks | Notes | 0.9 | . Unit 3 Sections 16 | Hacks | Notes | 0.9 | . Unit 3 Sections 17-18 | Hacks | Notes | N/A | . Vocab . Bits, Bytes, Hexadecimal / Nibbles: | . A bit is the smallest unit of data, representing either a 0 or a 1. A byte is a unit of digital information that consists of 8 bits. Hexadecimal is a numbering system that represents numbers using the base 16, with the digits 0-9 and A-F. Each hexadecimal digit represents 4 bits, so two hexadecimal digits make up 1 byte. . Binary Numbers: Unsigned Integer, Signed Integer, Floating Point: | . An unsigned integer is a binary number that can only represent positive numbers. A signed integer is a binary number that can represent both positive and negative numbers using a sign bit. A floating point number is a binary number that can represent real numbers with a decimal point. . Binary Data Abstractions: Boolean, ASCII, Unicode, RGB: | . A boolean is a data type that can only have two values: True or False. ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text using numbers. Unicode is a character encoding standard that represents a wide range of characters from various scripts. RGB (Red Green Blue) is a color model that represents colors as a combination of red, green, and blue values. . Data Compression: Lossy, Lossless (note discussed yet): | . Lossy data compression is a method of reducing the size of a file by removing some of the data. This can result in a loss of quality, but the file size is smaller. Lossless data compression is a method of reducing the size of a file without losing any data. The file size is smaller, but the quality is not compromised. . Variables, Data Types, Assignment Operators: | . A variable is a named location in memory that stores a value. Data types define the type of value that a variable can store, such as an integer, a string, or a boolean. Assignment operators are used to assign a value to a variable. In Python, the assignment operator is the equal sign (=). . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: | . A list is an ordered collection of values that can be of any data type. Lists are created using square brackets and the values are separated by commas. For example: my_list = [1, 2, 3] A 2D list is a list of lists, representing a table of values with rows and columns. A dictionary is a collection of key-value pairs, where each key is mapped to a value. Dictionaries are created using curly braces and the key-value pairs are separated by commas. For example: my_dict = {‘key’: ‘value’} A class is a template for creating objects. It defines the properties and methods of the objects. . Algorithms, Sequence, Selection, Iteration: | . An algorithm is a set of steps for solving a problem. Sequence is the order in which statements are executed in a program. Selection is the decision-making process in a program, using control statements such as if-else statements. Iteration is the repetition of a block of code using loops. . Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables: | . An expression is a combination of values, variables, and operators that evaluates to a result. Comparison operators are used . Variables: variables are storage . var = 3 . This is an example of a variabe . Data Types: Some datatypes are string lists . list = [] . This is a list . Assignment Operators: the arrow represents assignment operators . varknow = 6 . we are assigning a value to this . Managing Complexity with Variables: Lists: lists can be used to store many types of data . sports = [&quot;basketball&quot;,&quot;soccer&quot;] . 2D Lists, . list = [] . Dictionaries: very good way to store keys and terms . dict = {&quot;car&quot;:&quot;good&quot;, &quot;cat&quot;:,&quot;bad&quot;} . Class Algorithms, Algorithms help smplify code . def function(): print(&quot;hi&quot;) . def new(): print(&quot;this is a function&quot;): . Sequence: represents the order . print(&quot;this is first&quot;) print(&quot;this is after&quot;) . Selection makes decision based on data . if dog==True: print(&quot;there is a dog&quot;) . Iteration this is aloop . for i in range(5): print(&quot;hi&quot;) . this loops over 5 times . Expressions, Comparison Operators,some comparison terms are like &lt; and &gt; . if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) . Booleans Expressions and Selection, selects if a value is true or not . boolean = True falseboolean = False . Booleans Expressions and Iteration, Truth Tables . function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() . Characters,A word can be split into characters . word = &quot;hi&quot; split = word.split() . Strings, basic values held in a variable . string = &quot;hi&quot; . Length, There is a length function that can get the length of any string . list = [1,2,3,4,5,6] length = len(list) . This gets the length of the list . Concatenation, You can combine databases with this . import pandas pd = pd.concat() . Python If, can check for certain conditions . if boolean=True: print(&quot;any text here&quot;) . Elif, This can be used to check for a second function and this is very useful when choosing between certain conditions . if boolean=True: print(&#39;good&#39;) elif boolean=False: print(&quot;this is bad&quot;) . Else conditionals; . if True: print(&quot;this is true&quot;) else: print(&quot;not possible&quot;) . Nested Selection Statements . if True: if dogs==True: print(&quot;very good&quot;) . This can be used to checkfor many conditions whithin a certain condition, you can nest many conditions . Python For, . for i in range(5): print(i) . While loops with Range, . while i&lt;6: i+= 1 . Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/TableAndTeachingNotes/",
            "relUrl": "/TableAndTeachingNotes/",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Final Blog for teaching",
            "content": "Hacks + Notes . Lesson Hacks Notes Grades . Unit 3 Sections 9-11 | Hacks | Notes | 0.93 | . Unit 3 Sections 12-13 | N/A | Notes | N/A | . Unit 3 Sections 14-15 | Hacks | Notes | 0.9 | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/TableAndTeachingNotes/",
            "relUrl": "/TableAndTeachingNotes/",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Hacks for Unit 3.16",
            "content": "What makes it a simulation? A simulation is a automated process made to replicate a situation to get the output or practice. | . | What are it’s advantages and disadvantages? Some advantages are that it is easier and it takes less resources to actually do vs an experiment where is can be costly and hard. A disadvantage is that it is not as accurate as it does not take into account the outside factors | . | In your opinion, would an experiment be better in this situation? It depends on the situation | . | . Hack #1 (0.3) Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). . You can simulate picking a random card from a deck of cards | Since there are 52 cards you will need to have some type of random number generator and assign each number to a card so when it randomly picks a card it will match it to a number | This is a simulation because it is not real and uses code to replicate | Its easier than actually picking a card however it is not accurate | I think an experiment would be better because sometimes when picking cards it is not alwas exactly random | . Hack #2 (0.1) Simulations Quiz (either screenshot or paste quiz in your notebook) . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 (0.2) Describe the rolling dice simulation (answer guiding questions) . This rolling dice simulation is a simulation because you are not actually rolling the dice instead you are creating code to replicate it. | It is more efficient and you don&#39;t actually need the dice to replicate it. It is less accurate than having an experiment because depending on the way you roll the dice it is not always exactly random | In my opinion I think that in order to have proper results, rolling the dice by hand would be better because there are definitely outside factors | . Hack #4 (0.3) Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) Colors = [] # New Feature for i in roll_results: if i == 1: Colors.append(&quot;red&quot;) if i ==2: Colors.append(&quot;blue&quot;) if i==3: Colors.append(&quot;black&quot;) if i ==4: Colors.append(&quot;green&quot;) if i ==5: Colors.append(&quot;grey&quot;) if i ==6: Colors.append(&quot;purple&quot;) print(&quot;random colors:&quot;, Colors) . random colors: [&#39;blue&#39;, &#39;purple&#39;, &#39;blue&#39;] . Extra Credit (0.1) For the extra 0.1: try coding a simple simulation and describe it (guiding question) . import random num = random.randrange(0,5) weather = [&quot;rainy&quot;, &#39;thunder&#39;, &#39;snowy&#39;, &#39;windy&#39;, &#39;sunny&#39;] print(weather[num]) . rainy . In this simulation that I created, it uses the random library to get a random number in the range (0,5) Once this number is generated it goes through the weather list and goes in with the index of the random numer to generate a random weather This is a good simulation because it generates a random weather and this can show the weather of a day . This is a simulation because it is just generating a random weather based off of code rather than real life factors | Its good because it is easy to use and you do not need access to expensive weather measuring tools however it is definitely innaccurate | I think it would be better to have a real experiment because this way in my simulation, it is innacurate | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/316hacks",
            "relUrl": "/csp/316hacks",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Technical Business Panel",
            "content": "Kathyleen Beveridge . Worked with Mort in Qualcomm | MBA at USC | finance major | first job as an investment banker, on track to sell stocks and be a stockbroker | The major was not for her and changed career to tech | started for high tech career and went to qualcomm | left 5 years ago from qualcomm | Thermo Fisher as high tech major HP- Create tech that makes life better for everyone everywhere | qualcomm - inventing tech the world loves | all these companies are trying to use tech to make the world better | . | Thermo Fisher - Enable our customers to make the world healthier cleaner and safer | 125k employees | Many scientists and engineers that makes extremely high revenues | Senior Director of marketing | Aims to create big impacts on the world Kris Porter . | Livermore high school alum | enrolled at UCLA electrical engineering | enjoyed stem a lot | worked in the cs classes and did bad, got Cs however came back to the computer science field | Center for embedded networked sensors info mechanical systems | . | learned about linux operating software | as he graduated stocks crashed no companies hired, had to look for jobs | 2010 joined a startup with email marketing | devops is what checks that everything works or stopping hackers when pushing your site | worked to secure sites and encrypting the websites | after devops worked for NBC universal streaming software | moved to san diego because if his girlfriend | Mr Mort hired him to work at qualcomm | gained lots of experience at qualcomm | then worked at twitter, still currently working at twitter | Machine learning experience at qualcomm CCNA training learned about python streaming media infrastructure for 2012 olympics Twitter projects Data centers Migrating home timeline to graphQL What is graphQL? does not work for twitter anymore | half the company got laid off, including his team | gitlab using machine learning to figure out when to delete repositories using ML model depending on who is downloading data from it | the ML model helped save money and allowed for them to delete unused repositories | python libraries keras and sql used to make models | . Important skills: continuous learning, always learn more keep learning new languages and infrastructure always keep learning, any opportunity that leads to more learning is good don’t be concerned about money and other things as long as you are still learning Qualcomm is a semiconductor industry and the company had to go around acquiring new companies . coding changes the way you think and changes your problem solving mindset | this mindset can be applied to many different feilds | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BusinessPanel/",
            "relUrl": "/BusinessPanel/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Hacks for Unit 3.17 and 3.18",
            "content": "Hacks/Assignment Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . num = [] count = 0 def collatz(i): global count global num while i &gt; 1: if (i % 2): # i is odd i = 3*i + 1 count +=1 num.append(i) else: # i is even i = i//2 count +=1 num.append(i) else: print(count) print(num) i = int(input(&#39;Enter i: &#39;)) collatz(i) . 5 [16, 8, 4, 2, 1] . Hacks/assignment Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] sum = num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] +num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] sum2 = sum + sum +sum + sum + sum + sum + sum + sum + sum + sum + sum +sum + sum + sum + sum + sum + sum + sum print(sum2) . 3600 . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] print(36*sum(num)) . 3600 . The bottom one is more efficient because it uses built in functions to add the numbers instead of having to add each one individually which takes a long time. Then adding the sum everytime is even more inneficient . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] if True: sum = 0 for i in num: sum += num[i-1] print(sum*36) . 3600 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/317hacks",
            "relUrl": "/csp/317hacks",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Extended blog for notes after Unit 3 section 14",
            "content": "Unit 3 Sections 14 and 15 . Section 3.14.1 - Libraries . Software library contains procedures | segments of code come from sources | libraries simplify complex algorithms | APIs or application program interfaces specify how a librarycan be used | For librarys, you can call to them in order to addfunctions | libraries have a period that tells the program to look for the library | . import math math.sqrt(64) . This is an example of a library . import random random.randrange() . This allows to import random numbers easily using a library . Lesson 3.15.1 . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . This code goes over the libraries mentioned before and can generate random numbers using the library . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . This is a great example on how randomcan be used to get random numbers . Random is a library with many functions that can generate random nums | . 3.15.2 Lesson . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) . This code flips a coin | . Simulations- Unit 3 Section 16 . 3.16 Intro to Simulations . Many simulations are used, for example testing a car safety | ensuring new technology works | simulating a train | Simulations are different than an experiment because it is less accurate as its not real | Simulations are cheaper and more efficent however it is not as accurate as an experiment | It also cannot account for real life factors or outside facters | . Real examples . You can use a simulation to imitate a game, for example the four corners game. | This game can be recreated with this python script | . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . This game basically assigns you a corner randomly and allows you to pick a corner | . Rolling a Dice Example . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . This code allows us to replicate rolling a dice three times because it usesrandom | This is very useful because now we do not have to actually roll the dice three times | This has some flaws because it is assuming that the roll is going to be perfect and that it will truly be equal for all sides however becauseof outside factors this may not be true | . Game of Life . This code is random and uses the library random to pick random boxes creating random patterns | this is another example of how a simulation can be used to represent cellular automaton | . Period 4 Lesson 17-18 . Undecidability: sometetimes we cannot tell if a certain number will follow the program guidlines for example the number example where you divide by 2 or times by 3 and add one. We have to ensure that all the numbers we put in are predictable . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . This code print sout the hialstone numbers . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Collatz- The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. Undecidable problems gives yes or no but there is no code that can solve it on all inputs unsolvable problems, no algorithm can solve the problem Hailstone numbers are the output of the Collatz code. . Unit 3, Section 17: . Algorithm efficieny is how many steps you have to use to solve a certain problem | by being very efficient you would use less points that this is very helpful because now the code will run more efficiently | | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Moreteachcingnotes/",
            "relUrl": "/Moreteachcingnotes/",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Hacks for Unit 3.14 to 3.15",
            "content": "Hacks 3.14.1 Write a program that uses a library/libraries in any sort of manner. Explain your work/code . import random import math num = random.random()*100 print(math.floor(num)) . 99 . This code uses the math library and the random library to get a random whole number between 0 and 100 . Hacks 3.15.1 Write a few lines of code that implements the import function . import math math.cos(3.14159) . -0.9999999999964793 . Define what an import random function do . The import random function finds the random library and allows the user to have access to many different functions | . List a few other things that we can import other than random . We can import math and this gives us access to many different operators and math functionality | . Hacks 3.15.2 For your hacks you need to create a random number generator that will simulate this situation: There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . import random import math def generator(range): return math.floor(random.random()*range) number = generator(8) if number &lt;= 3: print(&quot;green&quot;) elif number &gt; 3 and number &lt;6: print(&quot;blue&quot;) elif number ==6: print(&quot;purple&quot;) elif number==7: print(&quot;orange&quot;) elif number==8: print(&quot;red&quot;) . purple . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . RANDOM(12,20) will include all numbers between 12 and 20 including 12 and 20. According to Savan | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/39311hacks",
            "relUrl": "/csp/39311hacks",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Hacks for Unit 3.9 to 3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) . It is important to know that algorithms that look different can do the same thing so that when working with others and people have various codes it is important to open your mind to understand the code rather than rejecting it because it looks differet. It is also important to know that even code that looks similar can have different purposes so we dont jump to conclusions when evaluating code for the converted conditional to boolean conversion(0.10) total: 0.25 | . sun = False raincloud = True if sun == True: print(&quot;it is sunny&quot;) else: if raincloud == True: print(&quot;it is cold and rainy&quot;) else: print(&quot;not rainy or hot&quot;) . it is cold and rainy . sun = False raincloud = True sunny = not(raincloud) and sun if sunny == True: print(&quot;it is sunny&quot;) if sunny ==False: print(&quot;it is not sunny&quot;) . it is not sunny . 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . If the party has a size 1 the cost is 10 If the party has size 2 the cost is 15 If the party has size 3 then the cost is 20 if the party has size 4 then the cost is 25 print the cost of the party . . partysize = 4 if partysize ==1: print(&quot;cost is 10&quot;) elif partysize ==2: print(&quot;cost is 15&quot;) elif partysize ==3: print(&quot;cost is 20&quot;) elif partysize ==4: print(&quot;cost is 25&quot;) . cost is 25 . 3.9.3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game Make a function that gets the user guess Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): out = input(&quot;What number?&quot;) return out #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;below the actual&quot;) #change this lower_bound = guess elif int(guess) &gt; int(number): print(&quot;above the actual&quot;) #change this upper_bound = guess elif int(guess) == int(number): upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 50. above the actual Guess a number between 0 and 50. You guessed 30. above the actual Guess a number between 0 and 30. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 5. below the actual Guess a number between 5 and 10. You guessed 7. below the actual Guess a number between 7 and 10. You guessed 8. below the actual Guess a number between 8 and 10. You guessed 9. You guessed the number in 8 guesses! . Hacks: calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . . One = [12,14,44,57,79,80,99] Two = [92,43,74,66,30,12,1] Three = [7,13,96,111,33,84,60] Lists = [One, Two, Three] # loops through the range of the length of lists for x in range(len(Lists)): #sorts the list in order Lists[x].sort() #takes the middle index middleindex = int(len(Lists[x])/2) #outputs print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,Lists[x][middleindex]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . c is out of orderso therefore it is c .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/3111hacks",
            "relUrl": "/csp/3111hacks",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot; .&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . 8.0 . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 8 . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . 12 . B. . import random sum = random.randint(1,18) print(sum) . 17 . C. . import random sum = 3*random.randint(1,6) print(sum) . 12 . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . 6 9 8 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? | . random(1,100) &lt;= 50 random(1,100) == 50 random(1,10) &lt;= 5 random(1,10) &gt;= 5 . The answer is A,C, and D! | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "relUrl": "/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Hacks for Unit 3.9 to 3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) . It is important to know that algorithms that look different can do the same thing so that when working with others and people have various codes it is important to open your mind to understand the code rather than rejecting it because it looks differet. It is also important to know that even code that looks similar can have different purposes so we dont jump to conclusions when evaluating code for the converted conditional to boolean conversion(0.10) total: 0.25 | . sun = False raincloud = True if sun == True: print(&quot;it is sunny&quot;) else: if raincloud == True: print(&quot;it is cold and rainy&quot;) else: print(&quot;not rainy or hot&quot;) . it is cold and rainy . sun = False raincloud = True sunny = not(raincloud) and sun if sunny == True: print(&quot;it is sunny&quot;) if sunny ==False: print(&quot;it is not sunny&quot;) . it is not sunny . 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . If the party has a size 1 the cost is 10 If the party has size 2 the cost is 15 If the party has size 3 then the cost is 20 if the party has size 4 then the cost is 25 print the cost of the party . . partysize = 4 if partysize ==1: print(&quot;cost is 10&quot;) elif partysize ==2: print(&quot;cost is 15&quot;) elif partysize ==3: print(&quot;cost is 20&quot;) elif partysize ==4: print(&quot;cost is 25&quot;) . cost is 25 . 3.9.3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game Make a function that gets the user guess Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): out = input(&quot;What number?&quot;) return out #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;below the actual&quot;) #change this lower_bound = guess elif int(guess) &gt; int(number): print(&quot;above the actual&quot;) #change this upper_bound = guess elif int(guess) == int(number): upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 50. above the actual Guess a number between 0 and 50. You guessed 30. above the actual Guess a number between 0 and 30. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 5. below the actual Guess a number between 5 and 10. You guessed 7. below the actual Guess a number between 7 and 10. You guessed 8. below the actual Guess a number between 8 and 10. You guessed 9. You guessed the number in 8 guesses! . Hacks: calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . . One = [12,14,44,57,79,80,99] Two = [92,43,74,66,30,12,1] Three = [7,13,96,111,33,84,60] Lists = [One, Two, Three] # loops through the range of the length of lists for x in range(len(Lists)): #sorts the list in order Lists[x].sort() #takes the middle index middleindex = int(len(Lists[x])/2) #outputs print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,Lists[x][middleindex]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . c is out of orderso therefore it is c .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/3111hacks",
            "relUrl": "/csp/3111hacks",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Unit 3.5 & 3.8 Hacks",
            "content": "3.5 . Explain in your own words what each logical operator does . AND determines if both of the statements are true | OR determines if either one are true, and even if both are true it will still work | NOT checks if a certain condition is not met, for example no sunny checks to see if its cloudy Code your own scenario that makes sense for each logical operator | . # NOT sun = False if not sun: print(&quot;it is cloudy!&quot;) # AND weight = 240 age = 19 if weight &gt;= 150 and age &gt;= 15: print(&quot;You meet the requirements for this ride!&quot;) # OR emotion = &quot;sad&quot; if emotion==&quot;sad&quot; or emotion==&quot;lonely&quot;: print(&quot;you are depressed&quot;) . 3.6 hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. . Selection: If something is true a specific code will run. EX: If answer is yes then a code block will run | Algorithm: a procedure of code that does something or a task. EX: algorithm that takes in your grades and gives out a GPA number | Conditional statement: runs a function depending or executs if TRUE. EX: if the sun is out, then it is sunny. 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . import random numbers = [0,1] def AND(): num1 = random.choice(numbers) num2 = random.choice(numbers) print(num1, &quot;&amp;&quot;, num2, &quot;=&quot;, num1 &amp; num2) print(&quot;AND&quot;) for i in range(5): AND() def OR(): num1 = random.choice(numbers) num2 = random.choice(numbers) print(num1, &quot;|&quot;, num2, &quot;=&quot;, num1 | num2) print(&quot;OR&quot;) for i in range(5): OR() def XOR(): num1 = random.choice(numbers) num2 = random.choice(numbers) print(num1, &quot;^&quot;, num2, &quot;=&quot;, num1 ^ num2) print(&quot;XOR&quot;) for i in range(5): XOR() . 3.7 . Create 3 different flow charts representing nested statements and transfer them into code. | . . BallColor = &quot;red&quot; size = &quot;7&quot; if BallColor==&quot;red&quot;: if size !=&quot;8&quot;: print(&quot;right color wrong size&quot;) elif size == &quot;8&quot;: print(&quot;right color and right size&quot;) else: if size !=&quot;8&quot;: print(&quot;wrong color wrong size&quot;) elif size == &quot;8&quot;: print(&quot;wrong color and right size&quot;) . . Temp = 79 Humid = True if Temp &gt; 80: if Humid == True: print(&quot;it is hot and humid&quot;) elif Humid == False: print(&quot;it is hot and not humid&quot;) elif Temp&lt;80: if Humid == True: print(&quot;it is not hot and humid&quot;) elif Humid == False: print(&quot;it is not hot and not humid&quot;) . . if money&gt;30: if store == &quot;open&quot;: print(&quot;you can buy it&quot;) elif store == &quot;closed&quot;: print(&quot;You can buy it another day&quot;) else: print(&quot;you do not have enough money&quot;) . Create a piece of code that displays four statements instead of three. Try to do more if you can. . if coins&gt;30: if shop == &quot;open&quot;: print(&quot;you can buy it&quot;) elif store == &quot;closed&quot;: print(&quot;You can buy it another day&quot;) elif time == &quot;night&quot;: print(&quot;come during the day&quot;) else: print(&quot;you cannot buy it&quot;) . Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. STEM = True HISTORY = True if STEM: print(&quot;Calculus, Physics, Biology&quot;) elif HISTORY: print(&quot;European History, Gov, american history&quot;) else: print(&quot;PE, art, english&quot;) . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/3.53.8hacks/",
            "relUrl": "/3.53.8hacks/",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "Hacks for Unit 3.8 to 10",
            "content": "Hacks Unit 3 Section 3.8.1 . Define an Iteration . An iteration repeats over an algorithm until a certain condition is met | . Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) Homework loop Check physics homework: if there is homework: sit down and do physics if there is calc homework sit down and do calc homework if there is csp hw sit down and do cs if there is apel hw sit down and do cs if there are upcoming tests study for the subject . numbers = [1,4,5,7,8,9,10] newnum =[] for i in numbers: num = i*7 newnum.append(num+6) if num ==49: break print(newnum) . [13] [13, 34] [13, 34, 41] . Program a simple iteration. . names = [&quot;alex&quot;, &quot;bob&quot;, &quot;billy&quot;, &quot;Joe&quot;] for i in names: print(i) . alex bob billy Joe . Find the lowest value in a list (Luna Iwazaki) Use the list made bellow Make a variable to hold the minimum and set it to potential minimum value Loop Check each element to see if it is less than the minimum variable If the element is less than the minimum variable, update the minimum After all the elements of the list have been checked, display the minimum value . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] minimum = min(nums) print(minimum, &quot;This is the lowest number&quot;) low = int(nums[0]) for i in range(len(nums)): if int(nums[i]) &lt; low: low = nums[i] print(&quot;the lowest number in nums is:&quot;, low) #good . 10 This is the lowest number the lowest number in nums is: 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/310hacks",
            "relUrl": "/csp/310hacks",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . go to school! . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/trimester%202%20student%20teaching/studentlessons/2022/12/02/unit3-9-11.html",
            "relUrl": "/trimester%202%20student%20teaching/studentlessons/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Unit 3.3 & 3.4 Hacks",
            "content": "HACKS for 3.3 and 3.4 . sequencing | sequencing | selection, sequencing | iteration, sequencing | sequencing | num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 . this results in 3 . hacks for 3.3 . iteration | selection | sequence |",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/33hacks/",
            "relUrl": "/33hacks/",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Unit 3.1 & 3.2 Hacks",
            "content": "Unit 3.1-3.3 Hacks . name = &quot;alex&quot; age = 16 print(&quot;name is&quot;, name) print(&quot;age is&quot;, age) . In your own words, briefly explain by writing down what an assignment operator is . an equal sign is an assignment operator as it assigns a variable to a value In Collegeboard pseudocode, what symbol is used to assign values to variables? | the arrow is used to assign values A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | it would output 22 | . What is a list? . a bundle of multiple elements What is an element | an element could be a number or integer, string, or a boolean expression What is an easy way to reference the elements in a list or string? | use index to find the elements in a list What is an example of a string? | “amay” this is an example of a string foods = [&quot;pizza&quot;, &quot;chicken&quot;, &quot;steak&quot;, &quot;pasta&quot;, &quot;lasagna&quot;, &quot;salad&quot;, &quot;burger&quot;] print(foods[3]) print(foods[-4]) . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [num1,num2,num3] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in [int(a) for a in numlist]: numlist[i -1] += int(add) print(numlist) . . foods = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwhich&quot;] #simplified foods list # it is better to use lists because it is more simple sports1 = &quot;basketball&quot; sports2= &quot;tennis&quot; sports3 = &quot;soccer&quot; sports= [&quot;basketball&quot;,&quot;tennis&quot;,&quot;soccer&quot;] . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/3.1hacks/",
            "relUrl": "/3.1hacks/",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . What corner do you choose?3 You chose corner number 3 and are still in! What corner do you choose?2 You chose corner number 2 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Lesson Notes",
            "content": "Unit 3, Section 1.1: Data Types and Variables . variable is an abstraction that holds a value | variables have meaningful names to help organize | each different language has a specific way to store variables | variables hold variable | makes code more organized, variables can be compared to containers | it is important to choose a name that correlates to the function | integers for numbers | strings stores text | boolean true or false | input function recieves input | document.querySelector is a javascript code that you can use the query the code to find a certain class in order to find the button 3.2.2 Data Absraction with lists . | lists bundle together multiple elements under one name | you can have different types of variables whithin one list | the function list in python splits a string into a list of characters | .join can join the characters together Unit 3.1-3.3 Hacks . name = &quot;alex&quot; age = 16 print(&quot;name is&quot;, name) print(&quot;age is&quot;, age) . In your own words, briefly explain by writing down what an assignment operator is . | an equal sign is an assignment operator as it assigns a variable to a value In Collegeboard pseudocode, what symbol is used to assign values to variables? | the arrow is used to assign values A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | it would output 22 | . What is a list? . a bundle of multiple elements What is an element | an element could be a number or integer, string, or a boolean expression What is an easy way to reference the elements in a list or string? | use index to find the elements in a list What is an example of a string? | “amay” this is an example of a string foods = [&quot;pizza&quot;, &quot;chicken&quot;, &quot;steak&quot;, &quot;pasta&quot;, &quot;lasagna&quot;, &quot;salad&quot;, &quot;burger&quot;] print(foods[3]) print(foods[-4]) . python num1=input(“Input a number. “) num2=input(“Input a number. “) num3=input(“Input a number. “) add=input(“How much would you like to add? “) . | . Add code in the space below . numlist = [num1,num2,num3] . The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. . for i in [int(a) for a in numlist]: numlist[i -1] += int(add) . print(numlist) . ![](/fastpages-APCSP/images/123.png) python foods = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwhich&quot;] #simplified foods list # it is better to use lists because it is more simple sports1 = &quot;basketball&quot; sports2= &quot;tennis&quot; sports3 = &quot;soccer&quot; sports= [&quot;basketball&quot;,&quot;tennis&quot;,&quot;soccer&quot;] . lesson 3.3 and 3.4 . Algorithms are a finite set of instructions that can help you accomplish a task | an algorithm is made up of sequencing selection and iteration | A sequence is the orders or the instructions | selection is what allows algorithms to make decisions | finally iteration is what repeats . | sequential statements specify how signals can be assigned | sequencing is the order that the code explains these steps | arithmetic operators, you can add and do basic operators by using + - / and * | this operator % gives out the remainder | len() gives the number of characters inside of a string | concat(“”, “”) combines two different strings | subtstring() can return specific characters of a string | . HACKS for 3.3 and 3.4 . sequencing | sequencing | selection, sequencing | iteration, sequencing | sequencing | num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 . this results in 3 . hacks for 3.3 . iteration | selection | sequence | lesson plan for 3.5-3.7 . Conditionals allow us to check whether a function is true or false | we can determine whether something is true or false based off of booleans | True or False | we can use binary to also check whether a condtional is true or false | you can use elif statements to check for multiple different | elif statements allow you to check for ideas such as whether an age is a certain level or a height is a certain height | after these conditionals we can then output various things depending on the input | to use binary for true or false, 1 represents true and 0 represents false | 1 and 0 is 0 | 1 Xor 0 is 1 | 1 or 1 is 1 examples of if statements to check for basic conditionals age = 0 cart = 0 # Put the code for ex:1 if age &gt;= 16: print(&quot;works&quot;) # Put the code for ex:2 if cart &lt; 4: (&quot;works&quot;) . | algorithms are a set of instructions that take in input and run a certain job and give an output | selection uses conditionals to make a decision, for example like a boolean expression | . Unit 3 Sections 8 and 10 Notes! . 8.1 | Section Vocabulary: | . Iteration: repeats a certain code blocks over and over as specified . Iteration Statements: repeats until a stopping condition is met . Repeat Until: repeats until blocks iterate over a certain code block until a certain condition is met, will not start unless the condition is false . Break points can be used to check for conditions to stop looping | It is very important to put break points so you don’t have to keep looping forever | iteration is a repeating portion of a code | stopping conditions can be utilized in loops . | 3.8.2 | iteration statement: causes statements to be repeated | when using range function, for example for i in range(10) print(i) #or i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . | These are both loops thata will iterate through the algorithm | . 3.8.3 . sports = [&quot;basketball&quot;,&quot;tennis&quot;] for i in sports: if i == &quot;basletball&quot;: print(i) . Another example of a for loop with embedded if statments number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . | this is a while loop that will checks if there is no remainer, if there is no remainder it will print otherwise it will just add 1 | This can be used to find even numbers and if you want to add them up you can also loop through an algorithm that will add the numbers together | use int() to get numbers | . Unit 3 Sections 9 and 11 . Algorithms can be written in different ways print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . | This code allows us to take an input of the grade and gives the output of a check of how they are doing | small differences in code allows them to have different functions even if it is just the simple change in an operator print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . | This is another function that does the same thing assigning a good job to an A grade | You can nest if statements to test for multiple conditions whithin a single if statement . | Creating outlines of a function before creating it allows you to develop it easier. | Flowcharts are an easy way to visualize the algorithm | Iteration can be used to cycle through an algorithm to check for a condition over and over again | If the certain condition is not met it will keep repeating | Binary search :repeatedly dividing a search interval in half | . Unit 2… Binary/Data Terms . Bits: Bits are the individual numbers that describe binary Bytes, Hexadecimal / Nibbles Binary Numbers: Unsigned Integer, Signed Integer, Floating Point Binary Data Abstractions: Boolean, ASCII, Unicode, RGB Data Compression: Lossy, Lossless (note discussed yet) Unit 3… Algorithm/Programming Terms ——————- Variables: variables are storage . var = 3 . This is an example of a variabe . Data Types: Some datatypes are string lists . list = [] . This is a list . Assignment Operators: the arrow represents assignment operators . varknow = 6 . we are assigning a value to this . Managing Complexity with Variables: Lists: lists can be used to store many types of data . sports = [&quot;basketball&quot;,&quot;soccer&quot;] . 2D Lists, . list = [] . Dictionaries: very good way to store keys and terms . dict = {&quot;car&quot;:&quot;good&quot;, &quot;cat&quot;:,&quot;bad&quot;} . Class Algorithms, Algorithms help smplify code . def function(): print(&quot;hi&quot;) . def new(): print(&quot;this is a function&quot;): . Sequence: represents the order . print(&quot;this is first&quot;) print(&quot;this is after&quot;) . Selection makes decision based on data . if dog==True: print(&quot;there is a dog&quot;) . Iteration this is aloop . for i in range(5): print(&quot;hi&quot;) . this loops over 5 times . Expressions, Comparison Operators,some comparison terms are like &lt; and &gt; . if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) . Booleans Expressions and Selection, selects if a value is true or not . boolean = True falseboolean = False . Booleans Expressions and Iteration, Truth Tables . function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() . Characters,A word can be split into characters . word = &quot;hi&quot; split = word.split() . Strings, basic values held in a variable . string = &quot;hi&quot; . Length, There is a length function that can get the length of any string . list = [1,2,3,4,5,6] length = len(list) . This gets the length of the list . Concatenation, You can combine databases with this . import pandas pd = pd.concat() . Python If, can check for certain conditions . if boolean=True: print(&quot;any text here&quot;) . Elif, This can be used to check for a second function and this is very useful when choosing between certain conditions . if boolean=True: print(&#39;good&#39;) elif boolean=False: print(&quot;this is bad&quot;) . Else conditionals; . if True: print(&quot;this is true&quot;) else: print(&quot;not possible&quot;) . Nested Selection Statements . if True: if dogs==True: print(&quot;very good&quot;) . This can be used to checkfor many conditions whithin a certain condition, you can nest many conditions . Python For, . for i in range(5): print(i) . While loops with Range, . while i&lt;6: i+= 1 . Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Lessonnotes/",
            "relUrl": "/Lessonnotes/",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 3): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section 10 - Lists . Lists Recap . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names. append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . pop() - takes the item off the top of the &quot;stack&quot; (by default it returns the last element of the list but you can also pop from any position) . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # pop last item of list most_recent_name = names.pop() print(most_recent_name) # pop first item of list first_name = names.pop(0) print(first_name) . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are&quot; + str(num_names) + &quot;names.&quot;) . sort() - changes order of list permanently . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . Practice Question . Using the information above fill in the missing code . nums = [] nums.#missing code &#39;15&#39; nums.#missing code &#39;43&#39; nums.#missing code &#39;81&#39; nums.#missing code &#39;25&#39; least = #missing code print(#missing code) . AP Exam Reference Sheet . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . Practice Question . If the list words contain [&#39;song&#39;, &#39;book&#39;, &#39;video&#39;, &#39;book&#39;] what will be the following code output . Finding Values in Lists (Luna Iwazaki) . Part 1 . use the list below | make a variable to hold the minimum and set it to potential minimum value | loop | check each element to see if it is less than the minimum variable | if the element is less than the minimum variable, update the minimum | after all the elements of the list have been checked, display the minimum value | . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] # add code here . Part 2 . use the list from part 1 | find the sum of even numbers in a list | . Unit 3.10.2 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . &lt;/html&gt; &lt;/div&gt; &lt;/div&gt; . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums[&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . . . College Board Reference Sheets . List Operations . . &lt;/div&gt; .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/lesson%20plans/studentteaching/2022/11/28/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/studentteaching/2022/11/28/Unit_3.8_3.10.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Planning lesson",
            "content": "Show off code, binary, using functions in javascript to convert the normal numbers to binary | make functions, express how to call and how to set them up | Show the meaning of procedures and how they are used | Show them how procedures can be useful for code and how they manage the complexity | test | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Planningdocument/",
            "relUrl": "/Planningdocument/",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Since there is only 8 bits in this binary, the highest we can go is 255, if we go to 266 it will not be able to print . &lt;/div&gt; Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . &lt;/div&gt; &lt;/div&gt;",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Binary Calculator",
            "content": "| . | | | | . | | | | . | | | | . | | | | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BinaryCalculator/",
            "relUrl": "/BinaryCalculator/",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Tools Check",
            "content": "local server . . Here is a photo of my local server running, as you can see by the URL it is running my fastpages on my own computer, this is a useful tool because it allows me to make edits in realtime and the edits will show up instantly! | . Running the local server in terminal . . In this screenshot you can see my creating the server using the make server command, and after succesfully running this command you can see the server working and giving out the address to my local server | . Python Jupyter Notebook shows python intepreter working . . In this screenshot I display that in my fastpages there is a working interpreter for python that can read my python code | . Showing Conda and NodeJS . . In this screenshot it is showing that I can access the base or conda and use the NodeJS, I can also access the different versions of python | . Markdown and javascript tools working in binary blog . . In this screenshot I display the working binary code that we were able to make work in class, this code succesfully uses javascript and markdown to put out this page in which the lightbulbs light up and represent binary digits. This shows that my javascript and markdown tools work. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/ToolscheckTrimester2/",
            "relUrl": "/ToolscheckTrimester2/",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "Binary Logic and Abstraction",
            "content": "Binary, Data, Data Structures, Data Abstraction (ASCII, Unicode, Color Codes), . Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. . Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) | Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. | Teach with examples… Segment from CS50 and go to minute 13:15. | Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug | This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research. | . Math in Binary . Learn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools . Logic of Shift . Explore right and left shifts with binary numbers. . In an arithmetic shift, the bits that are shifted out of either end are discarded. | In a left arithmetic shift, zeros are shifted in on the right. | . Understand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2) . How does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. . This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. | Most Significant Bit (MSB), least (LSB) | This example shows negative and positive numbers, using technique called Twos Complement. | In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. | In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. | . UI Concept/Design . Conceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. . n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) | Add buttons for “«” and “ »” | . ASCII and Unicode . Computers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂 . Character Data Abstraction . How are characters stored? How many bits do they take? . ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. | Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. | ASCII - 7 bits, extended to 8 bits with Unicode | UTF-8 | UTF-16 | UTF-32 Sample of Unicode characters. | . UI Concept/Design . The ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: Original ASCII . Color Codes . Pixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. . Monitors 1280 x 1024 Super-eXtended Graphics Array (SXGA) | 1366 x 768 High Definition (HD) | 1600 x 900 High Definition Plus (HD+) | 1920 x 1080 Full High Definition (FHD) | 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) | . | TVs 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … | 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … | 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. | . | Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704| |5.0|2592 x 1944| |7.1|3072 x 2304| |8.0|3264 x 2448| |10.0|3648 x 2736| |12.1|4000 x 3000| |14.7|4416 x 3312| |21.0|5616 x 3744| | . A Color code is a 24 bit abstraction. . There are 8 bits for Red, 8 bits for Blue, and 8 bits for Green. . Name | Hex Code | RGB Code | . Black | #000000 | rgb(0, 0, 0) | . Red | #FF0000 | rgb(255, 0, 0) | . Maroon | #800000 | rgb(128, 0, 0) | . Yellow | #FFFF00 | rgb(255, 255, 0) | . 255 * 255 * 255 combinations of R, G, B . UI Design . Here is a sample program a student used to visualize color by turning buttons on and off. by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block . Logic Gates . The fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables. . Logic Gates can be simulated with 2 bits . Look for bitwise operators on w3schools . UI Concept . Visual concept of logic gates . Establish check boxes for A / B on and off | Show result of Boolean Expression using Gate visual Logic Gates | . UI Design . Logic gate lab in JavaScript by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result . Logic of Logic Gates . A logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). . There are four possible inputs: 0 0 | 0 1 | 1 0 | 1 1 | . | Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 | OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 | XOR is true for 0 1, 1 0 | . | . Practical Application . Logic gates are used everywhere . Unsigned Addition . Here we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits. . Initial UI Implementation . Action buttons for +1 and -1 Additional actions for Turn On and Turn Off . Unsigned Addition . . Signed Addition . Integers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign. . Common concept for Integer Math . Positive number . Basic concept, but not typically used . Negative number . Inverting numbers, twos complement . Two’s complement allows adding for signed and unsigned numbers . Basic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. » and »&gt; have been adapted to handle signed and zero filled shifting. . Technical helpers . Harvard CS50 minute 0 to minute 50 to provide background on some of the information below. . Algorithm in Jinja2 to limit Bits per row . 8 images per row by Kylie Scharf Modulo 8 algorithm add &lt;tr&gt; for every eight bits (code). . Research Helpers . CHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson . Hacks . Data, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. . Use data abstraction (ie data structures) in your lesson | Make sure you teach/learn elements from this blog as you learn algorithms | Add “Science” into your process (research, jupyter notebook, and ultimately running application) | Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "relUrl": "/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "MC blog for final",
            "content": ". This final mc was pretty hard compared to the shorter mc practices that we did before. | Some common errors that I made in the quiz was in 2B. The develop and integrate algorithms. This topic is somewhere that i can work with. In my own code this main idea of 2B would look like creating functions to manage the complexity. I need to work on understanding the purpose more. | Another main idea that i missed is 4B, evaluating and testing algorithms. This means that I need to have a better understanding of what these algorithms do because in the quiz I was making a lot of mistakes with finding errors in the code and figuring out what the problems are in the code. This is very important because if I am able to get better at evaluating algorithms I can make my code more organized and find errors faster. | Along with this, I made a lot of errors with 4C, this is more of the testing and finding errors in my code with algorithms, the questions often showed me code with errors and I would have to find out the error. | . Here are the questions that I got wrong in this practice . The issue that I made in this problem was that instead of looking for numbers less than the desired value I instead put numbers more, this was a simple error because i thought it was a &gt; sign instead of a &lt; sign and this ended with me making that simple error | . . the error inside of this proble was that I overlooked the fact that it did not replace the values, instead it creates a new list that simply reverses the positions of the values and creates a new list. This is different than what I thought because earlier I thought that it was just reverses the values | . . The error in this code was that I though the value was getting compared to all the other values inside of the list, however instead it only starts iterating through the list starting at value K. This way it only compares it to values after. | . . this problem was witha conceptually understanding of the internet and the purpose of using protocols. instead they work to standardized instead of protect. this is why i got this problem wrong | . . This problem is wrong because I did not have a good understanding of how binary worked before taking this test. after further research an lerning about what binary is used for and how it is used. The way this works is with 2 and 2^x depending on which column it is in. | . . This was a minor conceptually error because this was at a first glance right however in the algorithm, the list was then swtiched. | . . In this problem, I made a simple mistake of not noticing that in the end of the algorithm, it sets the value to 50 so no matter of what the input it, in the end it would always give the same output and this is why this problem was wrong because I did not notice the little code block in the end | . . This problem is simply wrong because I used the wrong system to solve. The thing does not interchange the values and instead it sets both to the first value. this is wrong because the purpose of the code is to instead swap the values instead of setting them both to the first value and this is why it is wrong. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/FinalMCPracticereview/",
            "relUrl": "/FinalMCPracticereview/",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "Intro to Engineering",
            "content": "What standards have we hit so far? Which assignment do they relate to? . we covered #7 and #9, which are: . Develop Web and online projects. For #7, I worked with my group to form a frontend for our project. This HTML is then converted and displayed in the client’s browser, showing them the webpage. Fastpages does all the work for us transferring the code and outputting it. Fastpages takes care of the frontend . As for #9, I created a flask based server that runs an api to that the front end can access it. We also worked with fastpages to connect with the backend this way the multiple platforms can communicate and send data to each other. . What standards are you looking forward to learning more about? . I want to work with the 8th standard which is creating databases. I really want to work with databases becauses it will allow our scru project to go to the next level and store more data allowing for more innovation. . What other careers can you benefit from being in this pathway? . I will be able to develop my skills as a software engineer because managing data is extremely important as a software engineer. This will help me be more organize and I can apply it to future projects or internships .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CTEexperience/",
            "relUrl": "/CTEexperience/",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) # Outputs the quote using print() . Your random inspirational quote is, &#34;The bad news is time flies. The good news is you’re the pilot.&#34; -- –Michael Altshuler . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random #importing packages import math from flask import Flask, request app = Flask(__name__) # Creating the flask application # Creating the array of quotes for the API to parse through quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] # Creates a function that uses random to generate a random number whithin the range of the quotes array def randomgen(): number = int(random.random()*len(quotes)) return number # Creating the GET endpoint, so when we call it using /get, it will call to the randomgen function and return the quote from the array @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;Your quote is&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Pbl Webapi_tutorial",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Python Web API Endpoints using Jokes n”, “&gt; A discussion on Web APIs. This is about creating a Web API (Jokes), and creating API that retains data as long as the Web Server is running. This is done using List and Dictionaries as the backend. Ultimately, this example could be extended by adding a database to the backend. However, for now, we are focussing on interaction of Frontend to Backend, this is called an Endpoint. n”, “- toc: true n”, “- comments: false n”, “- permalink: /techtalk/webapi n”, “- image: /images/python_restapi.png n”, “- categories: [3.B, 5.A, 5.B, C5.0, C7.0, C7.6] n”, “- type: pbl n”, “- week: 9 n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Model for API n”, “&gt; We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. n”, “ n”, “- This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. n”, “ - jokes_data contains a list of dictionary records containing joke and reactions: haha or boohoo n”, “ - joke_list contains collection of jokes we will put into jokes_data n”, “ n”, “- Next comes some functions to interact with our jokes n”, “ - def initJokes(): initializes jokes_data n”, “ - def getJokes(): returns the complete list of jokes n”, “ - def getJoke(): returns a single joke from our list n”, “ - … many more function can be examined by reading comments below …” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Most liked 16 n”, “0 If you give someone a program… you will frustrate them for a day; if you teach them how to program… you will frustrate them for a lifetime. n”, “ haha: 16 n”, “ boohoo: 1 n”, “ n”, “Most jeered 6 n”, “11 If it wasn’t for C, we’d all be programming in BASI and OBOL. n”, “ haha: 9 n”, “ boohoo: 6 n”, “ n”, “Random joke n”, “14 Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem. n”, “ haha: 9 n”, “ boohoo: 4 n”, “ n”, “Jokes Count: 18 n” ] } ], “source”: [ “import random n”, “ n”, “jokes_data = [] n”, “joke_list = [ n”, “ &quot;If you give someone a program… you will frustrate them for a day; if you teach them how to program… you will &quot; n”, “ &quot;frustrate them for a lifetime.&quot;, n”, “ &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, n”, “ &quot;UNIX is basically a simple operating system… but you have to be a genius to understand the simplicity.&quot;, n”, “ &quot;Enter any 11-digit prime number to continue.&quot;, n”, “ &quot;If at first you don’t succeed; call it version 1.0.&quot;, n”, “ &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, n”, “ &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; n”, “ &quot;1 byte. And then everything crashed.&quot;, n”, “ &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, n”, “ &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, n”, “ &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, n”, “ &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, n”, “ &quot;If it wasn’t for C, we’d all be programming in BASI and OBOL.&quot;, n”, “ &quot;Computers make very fast, very accurate mistakes.&quot;, n”, “ &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, n”, “ &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, n”, “ &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, n”, “ &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, n”, “ ‘An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?’ n”, “] n”, “ n”, “# Initialize jokes n”, “def initJokes(): n”, “ # setup jokes into a dictionary with id, joke, haha, boohoo n”, “ item_id = 0 n”, “ for item in joke_list: n”, “ jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) n”, “ item_id += 1 n”, “ # prime some haha responses n”, “ for i in range(200): n”, “ id = getRandomJoke()[‘id’] n”, “ addJokeHaHa(id) n”, “ # prime some haha responses n”, “ for i in range(50): n”, “ id = getRandomJoke()[‘id’] n”, “ addJokeBooHoo(id) n”, “ n”, “# Return all jokes from jokes_data n”, “def getJokes(): n”, “ return(jokes_data) n”, “ n”, “# Joke getter n”, “def getJoke(id): n”, “ return(jokes_data[id]) n”, “ n”, “# Return random joke from jokes_data n”, “def getRandomJoke(): n”, “ return(random.choice(jokes_data)) n”, “ n”, “# Liked joke n”, “def favoriteJoke(): n”, “ best = 0 n”, “ bestID = -1 n”, “ for joke in getJokes(): n”, “ if joke[‘haha’] &gt; best: n”, “ best = joke[‘haha’] n”, “ bestID = joke[‘id’] n”, “ return jokes_data[bestID] n”, “ n”, “# Jeered joke n”, “def jeeredJoke(): n”, “ worst = 0 n”, “ worstID = -1 n”, “ for joke in getJokes(): n”, “ if joke[‘boohoo’] &gt; worst: n”, “ worst = joke[‘boohoo’] n”, “ worstID = joke[‘id’] n”, “ return jokes_data[worstID] n”, “ n”, “# Add to haha for requested id n”, “def addJokeHaHa(id): n”, “ jokes_data[id][‘haha’] = jokes_data[id][‘haha’] + 1 n”, “ return jokes_data[id][‘haha’] n”, “ n”, “# Add to boohoo for requested id n”, “def addJokeBooHoo(id): n”, “ jokes_data[id][‘boohoo’] = jokes_data[id][‘boohoo’] + 1 n”, “ return jokes_data[id][‘boohoo’] n”, “ n”, “# Pretty Print joke n”, “def printJoke(joke): n”, “ print(joke[‘id’], joke[‘joke’], &quot; n&quot;, &quot;haha:&quot;, joke[‘haha’], &quot; n&quot;, &quot;boohoo:&quot;, joke[‘boohoo’], &quot; n&quot;) n”, “ n”, “# Number of jokes n”, “def countJokes(): n”, “ return len(jokes_data) n”, “ n”, “# Test Joke Model n”, “if name == &quot;main&quot;: n”, “ initJokes() # initialize jokes n”, “ n”, “ # Most likes and most jeered n”, “ best = favoriteJoke() n”, “ print(&quot;Most liked&quot;, best[‘haha’]) n”, “ printJoke(best) n”, “ worst = jeeredJoke() n”, “ print(&quot;Most jeered&quot;, worst[‘boohoo’]) n”, “ printJoke(worst) n”, “ n”, “ # Random joke n”, “ print(&quot;Random joke&quot;) n”, “ printJoke(getRandomJoke()) n”, “ n”, “ # Count of Jokes n”, “ print(&quot;Jokes Count: &quot; + str(countJokes()))” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Backend Interface for Web API (Control) n”, “&gt; An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems: n”, “1. Python Backend that stores data beyond a single Web page n”, “2. GH Pages/Fastpages Frontend that is responsible for presenting data n”, “ n”, “To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: n”, “- https://flask.nighthawkcodingsociety.com/api/jokes n”, “- https://flask.nighthawkcodingsociety.com/api/jokes/2 n”, “- https://flask.nighthawkcodingsociety.com/api/jokes/random n”, “ n”, “As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. n”, “ n”, “The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. n”, “ n”, “FYI, there is NO output from this section . “ ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [], “source”: [ “from flask import Blueprint, jsonify # jsonify creates an endpoint response object n”, “from flask_restful import Api, Resource # used for REST API building n”, “import requests # used for testing n”, “import random n”, “ n”, “# Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place n”, “app_api = Blueprint(‘api’, name, n”, “ url_prefix=’/api/jokes’) # endpoint prefix avoid redundantly typing /api/jokes over and over n”, “ n”, “# API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 n”, “api = Api(app_api) n”, “ n”, “class JokesAPI: n”, “ # not implemented, this would be where we would allow creation of a new Joke n”, “ class _Create(Resource): n”, “ def post(self, joke): n”, “ pass n”, “ n”, “ # getJokes() n”, “ class _Read(Resource): n”, “ def get(self): n”, “ return jsonify(getJokes()) n”, “ n”, “ # getJoke(id) n”, “ class _ReadID(Resource): n”, “ def get(self, id): n”, “ return jsonify(getJoke(id)) n”, “ n”, “ # getRandomJoke() n”, “ class _ReadRandom(Resource): n”, “ def get(self): n”, “ return jsonify(getRandomJoke()) n”, “ n”, “ # getRandomJoke() n”, “ class _ReadCount(Resource): n”, “ def get(self): n”, “ count = countJokes() n”, “ countMsg = {‘count’: count} n”, “ return jsonify(countMsg) n”, “ n”, “ # put method: addJokeHaHa n”, “ class _UpdateLike(Resource): n”, “ def put(self, id): n”, “ addJokeHaHa(id) n”, “ return jsonify(getJoke(id)) n”, “ n”, “ # put method: addJokeBooHoo n”, “ class _UpdateJeer(Resource): n”, “ def put(self, id): n”, “ addJokeBooHoo(id) n”, “ return jsonify(getJoke(id)) n”, “ n”, “ # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes n”, “ api.add_resource(_Create, ‘/create/&#39;) n&quot;, &quot; api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes n&quot;, &quot; api.add_resource(_ReadID, &#39;/&#39;) n&quot;, &quot; api.add_resource(_ReadRandom, &#39;/random&#39;) n&quot;, &quot; api.add_resource(_ReadCount, &#39;/count&#39;) n&quot;, &quot; api.add_resource(_UpdateLike, &#39;/like//&#39;) n&quot;, &quot; api.add_resource(_UpdateJeer, &#39;/jeer//&#39;) n&quot;, &quot; n&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Frontend (View Simulation) and Hacks n&quot;, &quot;&gt; This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. n&quot;, &quot; n&quot;, &quot;To work with this code and make observation for learning... n&quot;, &quot;- Run a local server from flask_portfolio project and the change server variable to be local n&quot;, &quot;- Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests n&quot;, &quot;- The &quot;requests &quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. n&quot;, &quot;- Try running this with Debugging and observe what data is being created at each step (Required) n&quot;, &quot;- Try to format this data in Python print statements to be more readable (Required) n&quot;, &quot;- Start and stop local server and observe errors&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 2, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 112, &#39;haha&#39;: 120, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} n&quot;, &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 112, &#39;haha&#39;: 121, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} n&quot;, &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 113, &#39;haha&#39;: 121, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} n&quot;, &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 650, &#39;haha&#39;: 427, &#39;id&#39;: 2, &#39;joke&#39;: &#39;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&#39;} n&quot; ] } ], &quot;source&quot;: [ &quot;# Pick the server you want to test comment in/comment out n&quot;, &quot;# server = &quot;http://127.0.0.1:5000/ &quot; # run local n&quot;, &quot;server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server n&quot;, &quot;url = server + &quot;api/jokes/ &quot; n&quot;, &quot;responses = [] # responses list n&quot;, &quot; n&quot;, &quot;# Get the count of jokes on server n&quot;, &quot;count_response = requests.get(url+ &quot;count &quot;) n&quot;, &quot;count_json = count_response.json() n&quot;, &quot;count = count_json[&#39;count&#39;] n&quot;, &quot; n&quot;, &quot;# Update likes/dislikes test sequence using random joke n&quot;, &quot;num = str(random.randint(0, count-1)) # test a random record n&quot;, &quot;responses.append( n&quot;, &quot; requests.get(url+num) # Get/read joke by id n&quot;, &quot; ) n&quot;, &quot;responses.append( n&quot;, &quot; requests.put(url+ &quot;like/ &quot;+num) # Put/add to like count n&quot;, &quot; ) n&quot;, &quot;responses.append( n&quot;, &quot; requests.put(url+ &quot;jeer/ &quot;+num) # Put/add to jeer count n&quot;, &quot; ) n&quot;, &quot; n&quot;, &quot;# Get a random joke n&quot;, &quot;responses.append( n&quot;, &quot; requests.get(url+ &quot;random &quot;) # Get/read a random joke n&quot;, &quot; ) n&quot;, &quot; n&quot;, &quot;# Cycle through and print responses n&quot;, &quot;for response in responses: n&quot;, &quot; print(response) n&quot;, &quot; try: n&quot;, &quot; print(response.json()) n&quot;, &quot; except: n&quot;, &quot; print( &quot;data error &quot;)&quot; ] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3.9.12 (&#39;base&#39;)&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.9.12&quot; }, &quot;orig_nbformat&quot;: 4, &quot;vscode&quot;: { &quot;interpreter&quot;: { &quot;hash&quot;: &quot;126971108c560ce75295ac26010652a3ef02492d6f02a0c6c09b249494330c5a&quot; } } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 2 } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/10/17/PBL-webapi_tutorial.ipynb",
            "relUrl": "/2022/10/17/PBL-webapi_tutorial.ipynb",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "Intro to Engineering",
            "content": "Suma Latha . Mother inspired her to be an engineer, started science and math early, math and science was a strong help when she started engineering | Engineering is based off of science and math : if you are good at math and science you should | Engineering can make a lot of monkey, requires teamwork, can be very useful in society | Starting salary is very good when compared to other industries | Engineers solve the most challenging problems of the world | Latha was inspired to become an engineer because of her skills in math and science and because of the potential money | Biomedical, robotics, structural, software, industrial, civil, nuclear, electrical, and hardware are all types of engineering | wanted to implement electronic problems into software | Focused on electronics in her college experience | In the corporate world, they offer training in order to support the new graduates. Latha was assigned a mentor and the mentor was able to really help her with her workload | She was able to work on latest technology in her first job | At Qualcom they work to make chips, smartphone chips, wireless communication, semiconductor, GPUS, artificial intelligence projects, machine learning, automobile technology | Plays tennis, and other games, Nisha Sethia . | Has two young kids, very busy taking care of her kids | As a kid she was fascinated by how kids used engineering | She was extremely thrilled to work on computers however she had limited access to computers | Very confused and had troubles so she worked on networking | mainly drived by her fascination for enegineering | She asked a lot of questions and this helped her find her passion | Her first job was at a 2G job as an assistant test engineer: She would verify and approve of designs and projects Worked there for two years | . | in 2011 she moved the US more specific, san diego the headquarters of qualcom | How do you know what side of engineering you want to pursue? Keep growth mindset You need get exposure and try different fields | . | Hardest challenge was having troubles priortizing her work and her personal life | She had lack of representation during parts of her education, finding a mentor or a leader to help her | | . Suma Latha . Use google to find out the jobs of each specific job | Hardware designs the chips | Software write the software for the electronics and any other machines | California has great colleges with good engineering programs | Biggest challenge she faced was when she had her first kid she took a leave from her job, this made it very hard to come back to work because she was dealing with motherhood as well as work | Mentors and managers helped her manage her work when she had her first child Hardest challenge was managing her personal life along with her work life | . | . Shirley Yager . Software and hardware works together in order for the product to fully work | Software degrees are very good to have, jobs like google and apple require software. | Google has a headset that uses software to create a virtual reality environment | Fitbit is a watch that requires hardware as well as software | It is important to take hard classes in school, take engineering classes. Robotics programs Since the West coast schools do not take SAT it is important to have extracurriculars involved with the preffered major | . | She advocated for taking classes for STEM | Use school clubs to apply your learnings For example robotics clubs work and can help you apply your stem learning. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BigIdea4notescollegboard/",
            "relUrl": "/BigIdea4notescollegboard/",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "Big Idea 4 Notes",
            "content": "Internet Quiz . . In the collegeboard videos I was able to go over the main concepts of the internet | One main concept that I got was that a computing system is essentially multiple computing devices working together to a achieve a certain goal. A computing device is like a computer tablet phone or ipad. | Next step to this learning was that a computer network is a bunch of comptuing devices and systems working together | Two computing devices can communicate and send packets to each other | In order for this communication to take place, a routing has to take place and this will connect the sender to the reciever | When they talk about bandwith, the are explaining that the max amount of data that can be send or recieved in a given time interval | A packet is a small amount of data send from a sender to a reciever | Packet switching is when the message gets split in order to get sent, and the reciever pieces the pieces back together to get the final message | A path between two computing devices begins from sender and ends at the reciever | In order for data to get passed from device to device, it has to be sent through data streams, which contain data whithin packets | Packets have a chunk of data along with metadata or instructions on where it is supposed to go | The internet has a set of linked pages are interconnected | TCP (Transmission Control Protocol) common standard on how to send messages | OSI Open systems interconnet layers that you have to go through to communicate | The most common network access protocol is Ethernet | Routers are a special purpose computer with a MAC adress | The internet is scalable | LAN (Local Area Network) physical connections conected physically. | DNS Domain Name Service Application that changed a URL into an ip address The internet was designed in such a way to be scalable | . | Metadata contains information for routing and connecting sender to reciever | The world wide web is a system of linked pages that can be accessed through the internet | | . Future plan for taking notes . I will continue to take notes in the form of a markdown blog. | This way it is easily accesible and I can change them and update my notes. | . Dev Ops . Deployment through AWS using deocker through docker compose | All running on one AWS instance with a conatiner for each group. | Our group is named striver and we use docker to run it through AWS. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BigIdea4notescollegboard/",
            "relUrl": "/BigIdea4notescollegboard/",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post88": {
            "title": "Jupyter Notebook quiz",
            "content": "This is a quiz that will go over the basic vocabulary that was covered in the the jupyter document. . correct = 0 #function that takes in the question and the answer, then it determines whether the input is correct or incorrect then changes the variable correct depending on the answer def question(prompt, answer): #prints the question print(&quot;Question: &quot; + prompt) #takes in the input msg = input() #checks if the answer is correct or not if (msg).lower() == answer: #prints if the message is correct print(msg + &quot; is correct!&quot;) #changes the correct variable global correct correct += 1 #checks to see if its false else: #prints out that the answer is false print(msg + &quot; is incorrect!&quot;) #Questions questions = [(&quot;What function woud you use to output text?&quot;,&quot;print&quot;), (&quot;What function would you use to take input from the user?&quot;,&quot;input&quot;), (&quot;What keyword do you use to define a function?&quot;, &quot;def&quot;),(&quot;what function checks whether or not a certain condition is true or false?&quot;, &quot;if&quot;)] for i in questions: question(i[0] ,i[1]) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Question: What function woud you use to output text? print is correct! Question: What function would you use to take input from the user? input is correct! Question: What keyword do you use to define a function? if is incorrect! Question: what function checks whether or not a certain condition is true or false? if is correct! You got 75% .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/JupyterNotebookquiz/",
            "relUrl": "/csp/JupyterNotebookquiz/",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post89": {
            "title": "Project Planing",
            "content": "Project Goals . Our initial project plan was to provide inspiration to the users of the app. We were going to do this by using inspirational quotes and using inspiration collabaration between the users. For example users could comment on others goals in order to inspire them to work toward them. After a lot of planning, and the lesson on APIs, our group also decided to implement an API that would import random inspiration quotes and this could be used to inspire the users! | . Design Work . After planning the design out on Safins iPad, we decided to put out a web app that was similiar to social media, with likes comments profile pictures and stuff similiar to that. This plan includes quotes from people not on the app, as well as inspirational quotes directly from users. This way we will be guaranteed to have enough content. | . . In this picture you can see how we have celebritie’s quotes on this page. And we will be able to use data collection and databases to store likes, comments, and quotes. | . Program Purpose &amp; Function . Provide inspiration to the users | Allow users to share there goals and find new quotes! | . Data Abstraction . We will store user data Number of likes | Number of comments | What the comments are | Quotes | . | . Managing Complexity . We will use flask folder structure This will allow us to store out data in a organized way without getting confusing | . | . Procedural Abstraction . The way we will be able to execute this webstie will be running off of the API system | By using the inspirational quote API we would have access to the Rapid API database and we can extract quotes. | . Algorithm Implementation . We will create functions to get the API quotes, this will make it less complex and allows us to pull quotes easily | We will automate the user input so we can streamline the process of getting the user quotesi nto the database | . Testing . We will use print functions and the console to test out the output before we put it into our actual Website | . Roles . Safin: Scrum Leader | Alex: Back- end | Kalani- Front End | Navan Dev ops | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/ProjectPlanningBlog/",
            "relUrl": "/ProjectPlanningBlog/",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post90": {
            "title": "College Board MC pt 2",
            "content": "Here is the proof of the college BoardMC . Here I was able to learn a lot about the internet, and I did some troubleshooting and figure out how to fix programming errors. These quizzes were straightforward and helped me develop my critical thinking. The internest portion was a little diffucult because I did not have much first hand experience with the internet but however after critical thinking and looking over the college videos I was able to learn about the aspects of the internet. . The programming issues were also very good for my learning because it takes a lot of effort to first understand the purpose of the code and see why it is not working. To find the lines and the more specific error trains my mind to make less errors | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CollegeBoardMCQPRactice2/",
            "relUrl": "/CollegeBoardMCQPRactice2/",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post91": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) # Outputs the quote using print() . Your random inspirational quote is, &#34;The bad news is time flies. The good news is you’re the pilot.&#34; -- –Michael Altshuler . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random #importing packages import math from flask import Flask, request app = Flask(__name__) # Creating the flask application # Creating the array of quotes for the API to parse through quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] # Creates a function that uses random to generate a random number whithin the range of the quotes array def randomgen(): number = int(random.random()*len(quotes)) return number # Creating the GET endpoint, so when we call it using /get, it will call to the randomgen function and return the quote from the array @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;Your quote is&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post92": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.json()) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1497,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29499,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983600351889&#34;,&#34;total24hVolume&#34;:&#34;62271932590&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384252414254&#34;,&#34;price&#34;:&#34;20043.048298420286&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20050.210772224906&#34;,&#34;20104.086969351873&#34;,&#34;20157.612080991814&#34;,&#34;20244.902254214187&#34;,&#34;20296.13179911493&#34;,&#34;20355.40420179014&#34;,&#34;20339.584455003165&#34;,&#34;20380.9608314705&#34;,&#34;20334.43838223393&#34;,&#34;20256.397755502137&#34;,&#34;20214.818396073206&#34;,&#34;20187.14537643429&#34;,&#34;20159.744112050765&#34;,&#34;20135.103620334423&#34;,&#34;20152.838726388378&#34;,&#34;20223.999055486038&#34;,&#34;20188.386841136497&#34;,&#34;20099.650776087008&#34;,&#34;20022.525302913724&#34;,&#34;20060.360700925474&#34;,&#34;20058.49372151537&#34;,&#34;20101.79019444109&#34;,&#34;20068.60680042962&#34;,&#34;20037.990245449524&#34;,&#34;20040.006424632564&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;34643309443&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166771865158&#34;,&#34;price&#34;:&#34;1363.4411267728026&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.12&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.0952855712028&#34;,&#34;1351.020589256574&#34;,&#34;1352.8575645347053&#34;,&#34;1363.1472565613235&#34;,&#34;1374.6067561390107&#34;,&#34;1375.494244817268&#34;,&#34;1372.953523219661&#34;,&#34;1375.925446184292&#34;,&#34;1374.4292408387619&#34;,&#34;1368.4552635284397&#34;,&#34;1366.1167355485723&#34;,&#34;1363.0950291906606&#34;,&#34;1360.3636987191837&#34;,&#34;1358.3640048395087&#34;,&#34;1360.4342504890021&#34;,&#34;1369.213281754299&#34;,&#34;1368.3676032576047&#34;,&#34;1364.1360571475047&#34;,&#34;1363.3432991494524&#34;,&#34;1364.0707758574745&#34;,&#34;1363.3606085887561&#34;,&#34;1364.148825121332&#34;,&#34;1361.3954792114398&#34;,&#34;1359.0031784082305&#34;,&#34;1360.6275497370877&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;11632395543&#34;,&#34;btcPrice&#34;:&#34;0.06802563694267322&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68226757608&#34;,&#34;price&#34;:&#34;1.0002079259242496&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.13&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0005865365358848&#34;,&#34;0.9997222677525898&#34;,&#34;1.000302739310476&#34;,&#34;0.9991136110008606&#34;,&#34;0.9999088281238293&#34;,&#34;1.0001228624687193&#34;,&#34;1.0002330626742733&#34;,&#34;0.9999085006515177&#34;,&#34;1.000637166558432&#34;,&#34;1.0010864048424142&#34;,&#34;1.000382906070256&#34;,&#34;1.0008861750426428&#34;,&#34;1.0002453605323327&#34;,&#34;1.0005499753502725&#34;,&#34;0.9999702733020642&#34;,&#34;0.9994598707479958&#34;,&#34;1.0012863570809547&#34;,&#34;1.0016448157620703&#34;,&#34;0.9996482331493484&#34;,&#34;1.0004215336032052&#34;,&#34;0.9999570213425627&#34;,&#34;0.9999224272643209&#34;,&#34;1.0007392056569566&#34;,&#34;1.000325844124763&#34;,&#34;1.0001333206640304&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40185169770&#34;,&#34;btcPrice&#34;:&#34;0.000049902984368056&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46265013950&#34;,&#34;price&#34;:&#34;1.0001455267516093&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0004792903280844&#34;,&#34;0.9997900335112507&#34;,&#34;1.0002409949691449&#34;,&#34;0.9991618677934375&#34;,&#34;0.9998534185910576&#34;,&#34;0.9999410847854596&#34;,&#34;1.0002265014975766&#34;,&#34;0.9999486744759792&#34;,&#34;1.0006735177764154&#34;,&#34;1.0009635471641476&#34;,&#34;1.0003204451973837&#34;,&#34;1.0007368556469354&#34;,&#34;1.0001965553835719&#34;,&#34;1.0005780931027144&#34;,&#34;1.0000088554796078&#34;,&#34;0.9994586243665149&#34;,&#34;1.0011869248897938&#34;,&#34;1.0015496148117664&#34;,&#34;0.9997673802296243&#34;,&#34;1.0003598578573154&#34;,&#34;1.0000778482427792&#34;,&#34;0.9998861638814902&#34;,&#34;1.0006873238669673&#34;,&#34;1.0002882569057026&#34;,&#34;1.0001093290939425&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3358522477&#34;,&#34;btcPrice&#34;:&#34;0.000049899871110446&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41769765064&#34;,&#34;price&#34;:&#34;288.31435478535195&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.55&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0659068658593&#34;,&#34;293.14125809992265&#34;,&#34;293.927072308215&#34;,&#34;294.83908930457306&#34;,&#34;297.17141223267646&#34;,&#34;296.54802038189746&#34;,&#34;296.5585630450058&#34;,&#34;296.294553936533&#34;,&#34;295.9679395053358&#34;,&#34;295.35520526954036&#34;,&#34;294.7847791953549&#34;,&#34;295.0951173850531&#34;,&#34;294.5306048069131&#34;,&#34;294.30050189031186&#34;,&#34;294.22403335151813&#34;,&#34;294.80827509690437&#34;,&#34;294.33033971155965&#34;,&#34;293.96591310440675&#34;,&#34;293.66576108995565&#34;,&#34;293.99310192770326&#34;,&#34;293.69072498915045&#34;,&#34;293.4540279331547&#34;,&#34;293.23188737664185&#34;,&#34;293.09086576852025&#34;,&#34;290.12424881390194&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;1154452180&#34;,&#34;btcPrice&#34;:&#34;0.014384755776299543&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24935527184&#34;,&#34;price&#34;:&#34;0.5001251405968443&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.02&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4937540033530011&#34;,&#34;0.4935243660903145&#34;,&#34;0.49094545203960516&#34;,&#34;0.4918624009473887&#34;,&#34;0.4957389899343572&#34;,&#34;0.49519738378148237&#34;,&#34;0.4958525362412369&#34;,&#34;0.5001275119658124&#34;,&#34;0.5026720193539957&#34;,&#34;0.4991920707876871&#34;,&#34;0.49523182938198607&#34;,&#34;0.4939376274503768&#34;,&#34;0.4938461715574201&#34;,&#34;0.4949672333116952&#34;,&#34;0.49671660295169745&#34;,&#34;0.4983157134968618&#34;,&#34;0.4984385599250301&#34;,&#34;0.4958643382230643&#34;,&#34;0.4954888154508337&#34;,&#34;0.4956388106133542&#34;,&#34;0.49687913330335365&#34;,&#34;0.49710524663432437&#34;,&#34;0.4967817423491458&#34;,&#34;0.4960523063301114&#34;,&#34;0.5002588730645078&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;1951851389&#34;,&#34;btcPrice&#34;:&#34;0.000024952548791506&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21383646644&#34;,&#34;price&#34;:&#34;1.0000938123108745&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0005254447624727&#34;,&#34;0.9997390821935204&#34;,&#34;1.0002531268638544&#34;,&#34;0.99900371650551&#34;,&#34;0.9998191100048063&#34;,&#34;0.9999887701995116&#34;,&#34;1.0001269869516713&#34;,&#34;0.9997967773830551&#34;,&#34;1.0005975052435443&#34;,&#34;1.0010354550388738&#34;,&#34;1.000273734165667&#34;,&#34;1.0007993618135278&#34;,&#34;1.0001675248577555&#34;,&#34;1.0004436296308015&#34;,&#34;0.9998831620327592&#34;,&#34;0.9993790802417244&#34;,&#34;1.0011655146499898&#34;,&#34;1.0015608327721508&#34;,&#34;0.9996737479147666&#34;,&#34;1.0003874163381075&#34;,&#34;0.999855178764249&#34;,&#34;0.9997695857566036&#34;,&#34;1.0006363550917916&#34;,&#34;1.0003015517514349&#34;,&#34;1.0001110800082091&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6147025365&#34;,&#34;btcPrice&#34;:&#34;0.000049897290942002&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13373195008&#34;,&#34;price&#34;:&#34;0.4298337184562682&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.4294077817341544&#34;,&#34;0.43010743439413285&#34;,&#34;0.4311330265281362&#34;,&#34;0.43172655110842456&#34;,&#34;0.43548735625164897&#34;,&#34;0.4357388064320796&#34;,&#34;0.4347251184847503&#34;,&#34;0.43502688530763967&#34;,&#34;0.4347130159622236&#34;,&#34;0.433471895077104&#34;,&#34;0.43259694190748693&#34;,&#34;0.4319744086787819&#34;,&#34;0.4312921949359245&#34;,&#34;0.4311011590020075&#34;,&#34;0.4302280684331196&#34;,&#34;0.4319813231178509&#34;,&#34;0.43173383257478504&#34;,&#34;0.4303997167352433&#34;,&#34;0.429398559339474&#34;,&#34;0.4299648257425132&#34;,&#34;0.4297343398397519&#34;,&#34;0.42997828353732326&#34;,&#34;0.42937033740290426&#34;,&#34;0.42883620108710657&#34;,&#34;0.42920069115240905&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;688064082&#34;,&#34;btcPrice&#34;:&#34;0.000021445526252119&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11984369729&#34;,&#34;price&#34;:&#34;33.73772094047453&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.76424676052897&#34;,&#34;33.851653978639725&#34;,&#34;34.0161400563986&#34;,&#34;34.24080407969258&#34;,&#34;34.31681894129343&#34;,&#34;34.35588900553808&#34;,&#34;34.33042777400873&#34;,&#34;34.38277635446187&#34;,&#34;34.379681489180044&#34;,&#34;34.23752810964467&#34;,&#34;34.00887003667719&#34;,&#34;34.03341197552819&#34;,&#34;34.0205375439139&#34;,&#34;33.986450347226565&#34;,&#34;33.97284356925897&#34;,&#34;34.12322348136839&#34;,&#34;34.04818308388973&#34;,&#34;33.90841528770745&#34;,&#34;33.922236226998955&#34;,&#34;33.895084271212774&#34;,&#34;33.877508596833344&#34;,&#34;33.769632367031555&#34;,&#34;33.71898828195219&#34;,&#34;33.69001212339477&#34;,&#34;33.72267866886839&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;777816550&#34;,&#34;btcPrice&#34;:&#34;0.001683262966698214&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8488807961&#34;,&#34;price&#34;:&#34;0.06398401339869234&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.80&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06431595805843943&#34;,&#34;0.06435400841112346&#34;,&#34;0.0645379870268131&#34;,&#34;0.0650123288913721&#34;,&#34;0.06501563524570002&#34;,&#34;0.06505378638919912&#34;,&#34;0.0657960580235114&#34;,&#34;0.06603851629936867&#34;,&#34;0.0658184759881278&#34;,&#34;0.06555988714644552&#34;,&#34;0.06534311647764794&#34;,&#34;0.06512217936701878&#34;,&#34;0.06525813392333525&#34;,&#34;0.06507123735868817&#34;,&#34;0.06508747877233641&#34;,&#34;0.06537694106515178&#34;,&#34;0.06521416310707462&#34;,&#34;0.06486795280882116&#34;,&#34;0.06440018609785521&#34;,&#34;0.06431000551190193&#34;,&#34;0.06399099516985579&#34;,&#34;0.0639611688502269&#34;,&#34;0.06388198077385676&#34;,&#34;0.06396888900414123&#34;,&#34;0.06390412971383753&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;479258397&#34;,&#34;btcPrice&#34;:&#34;0.000003192329452389&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7357221715&#34;,&#34;price&#34;:&#34;0.8402806991486048&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8434958048685458&#34;,&#34;0.850001213528094&#34;,&#34;0.853335038035505&#34;,&#34;0.8542282047138157&#34;,&#34;0.8515372370926926&#34;,&#34;0.8500057857531073&#34;,&#34;0.8471550687491181&#34;,&#34;0.8479199485431772&#34;,&#34;0.8469126231548905&#34;,&#34;0.8444467185672693&#34;,&#34;0.8452742352058495&#34;,&#34;0.8476150079540906&#34;,&#34;0.8463925672110996&#34;,&#34;0.8432430183950218&#34;,&#34;0.8407816804410218&#34;,&#34;0.8419007497492077&#34;,&#34;0.8398864867524278&#34;,&#34;0.8393073071328305&#34;,&#34;0.8429567390022452&#34;,&#34;0.8430941255831178&#34;,&#34;0.8444119779861358&#34;,&#34;0.8446502533596543&#34;,&#34;0.8422100742264239&#34;,&#34;0.8398203812650741&#34;,&#34;0.8392859340943655&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;448903663&#34;,&#34;btcPrice&#34;:&#34;0.000041923797550038&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7333124913&#34;,&#34;price&#34;:&#34;6.374344819711631&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.33&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.399722350341929&#34;,&#34;6.407431469281856&#34;,&#34;6.427796901211662&#34;,&#34;6.453758384149317&#34;,&#34;6.486494555997307&#34;,&#34;6.502517900580541&#34;,&#34;6.4967988980633296&#34;,&#34;6.498221992937296&#34;,&#34;6.477292881924281&#34;,&#34;6.477685872716661&#34;,&#34;6.447216988451034&#34;,&#34;6.445307223733043&#34;,&#34;6.445036089260377&#34;,&#34;6.436040246095806&#34;,&#34;6.435080457086081&#34;,&#34;6.463836456516857&#34;,&#34;6.450387542070514&#34;,&#34;6.421359237807177&#34;,&#34;6.391124134834344&#34;,&#34;6.389976567958392&#34;,&#34;6.385572049998837&#34;,&#34;6.392125200223458&#34;,&#34;6.382091060151221&#34;,&#34;6.386981587242469&#34;,&#34;6.371255606973179&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;203228586&#34;,&#34;btcPrice&#34;:&#34;0.000318032702651025&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6650702423&#34;,&#34;price&#34;:&#34;0.000011280863460425&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.64&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011387877948418&#34;,&#34;0.000011396704562993&#34;,&#34;0.000011430609861&#34;,&#34;0.000011487055432932&#34;,&#34;0.00001152036610693&#34;,&#34;0.000011526380751596&#34;,&#34;0.000011558700842959&#34;,&#34;0.000011588746012207&#34;,&#34;0.000011501542165893&#34;,&#34;0.000011474456994294&#34;,&#34;0.000011432798956209&#34;,&#34;0.000011440729374507&#34;,&#34;0.000011461144205322&#34;,&#34;0.000011476554808705&#34;,&#34;0.000011469743005642&#34;,&#34;0.00001147197624755&#34;,&#34;0.000011424815330699&#34;,&#34;0.000011366708333454&#34;,&#34;0.0000113570498162&#34;,&#34;0.000011330129168691&#34;,&#34;0.000011283648128574&#34;,&#34;0.000011278387257469&#34;,&#34;0.000011289529854914&#34;,&#34;0.000011276233126799&#34;,&#34;0.000011273560500492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;280794784&#34;,&#34;btcPrice&#34;:&#34;5.62831726e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330165313&#34;,&#34;price&#34;:&#34;0.9999235811511265&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0002501483819342&#34;,&#34;0.9996079953426593&#34;,&#34;0.9998324870129061&#34;,&#34;0.9990101105933146&#34;,&#34;0.9994857500759958&#34;,&#34;0.999624908391188&#34;,&#34;0.9998816954065115&#34;,&#34;0.9994957093637207&#34;,&#34;1.0001208517367788&#34;,&#34;1.0005216349460553&#34;,&#34;1.0000957970716848&#34;,&#34;1.000296333339733&#34;,&#34;1.0000223644977213&#34;,&#34;1.0001689023102156&#34;,&#34;0.9997500246036027&#34;,&#34;0.999188166117977&#34;,&#34;1.0005244452746045&#34;,&#34;1.0009465956605519&#34;,&#34;0.999923212227354&#34;,&#34;0.999943746062425&#34;,&#34;0.9998895246210896&#34;,&#34;0.9996584146724661&#34;,&#34;1.00032070114622&#34;,&#34;1.0001058587674057&#34;,&#34;0.9999037241650416&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;129125861&#34;,&#34;btcPrice&#34;:&#34;0.000049888797665071&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5775077437&#34;,&#34;price&#34;:&#34;0.06254395432208257&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.35&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236315630333049&#34;,&#34;0.06246392912773974&#34;,&#34;0.06240652113985693&#34;,&#34;0.06227589703736964&#34;,&#34;0.06221053328122907&#34;,&#34;0.06260319363131635&#34;,&#34;0.06283033390340566&#34;,&#34;0.06275581270672362&#34;,&#34;0.0626978662815527&#34;,&#34;0.06256692378726383&#34;,&#34;0.062454674750590175&#34;,&#34;0.06247130825939604&#34;,&#34;0.06256137344897823&#34;,&#34;0.06269756605100256&#34;,&#34;0.06269254530093321&#34;,&#34;0.06269809717602999&#34;,&#34;0.06270258509423554&#34;,&#34;0.06262935941097252&#34;,&#34;0.0625525372842027&#34;,&#34;0.0626080433578714&#34;,&#34;0.06263852382635865&#34;,&#34;0.06265458985596026&#34;,&#34;0.06258971581342093&#34;,&#34;0.06255323825419136&#34;,&#34;0.06256018276012307&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;312325495&#34;,&#34;btcPrice&#34;:&#34;0.000003120481145925&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5506331908&#34;,&#34;price&#34;:&#34;1363.1831262096398&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.91&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.149143129576&#34;,&#34;1351.1432170463336&#34;,&#34;1354.6776632978115&#34;,&#34;1359.8352913708866&#34;,&#34;1372.7157537367023&#34;,&#34;1375.4201893881768&#34;,&#34;1373.656092011277&#34;,&#34;1374.4831471744365&#34;,&#34;1374.1769793087985&#34;,&#34;1370.915906218165&#34;,&#34;1366.8736380227815&#34;,&#34;1364.5777400837617&#34;,&#34;1361.7692633130323&#34;,&#34;1360.874730475116&#34;,&#34;1360.5880536977058&#34;,&#34;1367.7933188873656&#34;,&#34;1371.0864182649937&#34;,&#34;1366.2849418001506&#34;,&#34;1363.6612621508384&#34;,&#34;1366.3897957603679&#34;,&#34;1362.6017418911797&#34;,&#34;1363.558194381478&#34;,&#34;1361.1032201925939&#34;,&#34;1358.1013179936974&#34;,&#34;1359.5832745179157&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;190296605&#34;,&#34;btcPrice&#34;:&#34;0.06801276462109211&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412997860&#34;,&#34;price&#34;:&#34;6.970594962776281&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.24&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.773487842115684&#34;,&#34;6.754212108157756&#34;,&#34;6.7904912939092545&#34;,&#34;6.859091490236875&#34;,&#34;6.930938536697723&#34;,&#34;6.979888406385319&#34;,&#34;6.95205928455466&#34;,&#34;6.9286481982692205&#34;,&#34;6.908425318713336&#34;,&#34;6.880030568657563&#34;,&#34;6.8885892255227095&#34;,&#34;6.905746957106719&#34;,&#34;6.863039316865727&#34;,&#34;6.8298809342946445&#34;,&#34;6.841694456601706&#34;,&#34;6.90374298301861&#34;,&#34;6.8980780970926565&#34;,&#34;6.846666245892528&#34;,&#34;6.840143513460894&#34;,&#34;6.886346571294433&#34;,&#34;6.894919048207694&#34;,&#34;6.8980327967208135&#34;,&#34;6.897799219282073&#34;,&#34;6.917336871562214&#34;,&#34;6.9384106402636725&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;217649348&#34;,&#34;btcPrice&#34;:&#34;0.000347781178740445&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5074795440&#34;,&#34;price&#34;:&#34;17.139061861537474&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.58&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.253975766732072&#34;,&#34;17.305445105419164&#34;,&#34;17.35179898605964&#34;,&#34;17.43602090243061&#34;,&#34;17.5320617464102&#34;,&#34;17.556198635951862&#34;,&#34;17.522328032378404&#34;,&#34;17.567506807180212&#34;,&#34;17.518999622426595&#34;,&#34;17.438188969460462&#34;,&#34;17.396108974246218&#34;,&#34;17.373243917453404&#34;,&#34;17.336368659218273&#34;,&#34;17.319601875912156&#34;,&#34;17.320429202377582&#34;,&#34;17.375834229410586&#34;,&#34;17.37115155021162&#34;,&#34;17.337499378166246&#34;,&#34;17.29492516682681&#34;,&#34;17.27482970087828&#34;,&#34;17.236186499512122&#34;,&#34;17.23084707590994&#34;,&#34;17.187481717207028&#34;,&#34;17.155821443785648&#34;,&#34;17.14078782290297&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;232336499&#34;,&#34;btcPrice&#34;:&#34;0.000855112536095036&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906490614&#34;,&#34;price&#34;:&#34;20046.410227137&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20049.450436563653&#34;,&#34;20101.625670107587&#34;,&#34;20156.496626937733&#34;,&#34;20240.909995938804&#34;,&#34;20292.728315757773&#34;,&#34;20352.616852214596&#34;,&#34;20337.507383965705&#34;,&#34;20378.75288185548&#34;,&#34;20330.405569268383&#34;,&#34;20254.404761507907&#34;,&#34;20210.442606111905&#34;,&#34;20184.9491174058&#34;,&#34;20155.621076440202&#34;,&#34;20130.24398537466&#34;,&#34;20151.81371000324&#34;,&#34;20220.458796392188&#34;,&#34;20191.06461094672&#34;,&#34;20102.3711890372&#34;,&#34;20023.818445349818&#34;,&#34;20063.904548084807&#34;,&#34;20060.09333245677&#34;,&#34;20106.126030789226&#34;,&#34;20068.970588505534&#34;,&#34;20037.981397876472&#34;,&#34;20038.946703723883&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;65699991&#34;,&#34;btcPrice&#34;:&#34;1.0001677353996585&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4082107070&#34;,&#34;price&#34;:&#34;13.113113000226868&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.06&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.86904144147151&#34;,&#34;12.971292431991326&#34;,&#34;12.997809503523687&#34;,&#34;13.053288754075908&#34;,&#34;13.126935514160385&#34;,&#34;13.162946510226798&#34;,&#34;13.176459006280066&#34;,&#34;13.160096288039203&#34;,&#34;13.137389824650167&#34;,&#34;13.06998182322184&#34;,&#34;13.020726821088282&#34;,&#34;13.014732730953519&#34;,&#34;12.998975121153673&#34;,&#34;12.998577583467394&#34;,&#34;12.961451954944232&#34;,&#34;13.060564440903033&#34;,&#34;13.110658052250319&#34;,&#34;13.099438593619361&#34;,&#34;13.13330326447949&#34;,&#34;13.33452783192435&#34;,&#34;13.373831271270106&#34;,&#34;13.343650016008963&#34;,&#34;13.181674409038528&#34;,&#34;13.131683725387289&#34;,&#34;13.11536231838439&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;310021593&#34;,&#34;btcPrice&#34;:&#34;0.00065424743806362&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3938034123&#34;,&#34;price&#34;:&#34;15.650246402664713&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.564802534652488&#34;,&#34;15.557466143075752&#34;,&#34;15.524158368263686&#34;,&#34;15.564589461143923&#34;,&#34;15.626264641755956&#34;,&#34;15.739580440410696&#34;,&#34;15.723161103836562&#34;,&#34;15.756631052262051&#34;,&#34;15.719769516902309&#34;,&#34;15.679332809859426&#34;,&#34;15.65865704432778&#34;,&#34;15.65207565226499&#34;,&#34;15.638815307350377&#34;,&#34;15.638325526594082&#34;,&#34;15.630250194419004&#34;,&#34;15.770101867167902&#34;,&#34;15.772787444807776&#34;,&#34;15.726419071810144&#34;,&#34;15.730397527991796&#34;,&#34;15.706278363014619&#34;,&#34;15.644427965881071&#34;,&#34;15.661521309252834&#34;,&#34;15.65810007258811&#34;,&#34;15.657230878915703&#34;,&#34;15.653006930210385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;15757847&#34;,&#34;btcPrice&#34;:&#34;0.000780831646446624&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3815864606&#34;,&#34;price&#34;:&#34;53.846722765780676&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.92&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.29583735175494&#34;,&#34;54.33319375556465&#34;,&#34;54.50446073551073&#34;,&#34;54.689512299086346&#34;,&#34;54.83579215246787&#34;,&#34;54.86128649682968&#34;,&#34;54.85557746061394&#34;,&#34;54.79815311448016&#34;,&#34;54.77378739059752&#34;,&#34;54.513674702652395&#34;,&#34;54.35029802146673&#34;,&#34;54.358307825475265&#34;,&#34;54.422181211169935&#34;,&#34;54.4489516734391&#34;,&#34;54.48573164038176&#34;,&#34;54.566006895097175&#34;,&#34;54.60169376918578&#34;,&#34;54.434757779526166&#34;,&#34;54.23335179752326&#34;,&#34;54.413459080815954&#34;,&#34;54.21240080510803&#34;,&#34;54.29942643192169&#34;,&#34;54.14247458562991&#34;,&#34;54.048141904913244&#34;,&#34;53.830450120278314&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;386436989&#34;,&#34;btcPrice&#34;:&#34;0.002686553560319697&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3291845373&#34;,&#34;price&#34;:&#34;24.66016972332323&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.683542378165935&#34;,&#34;24.719459773866813&#34;,&#34;24.76219388151077&#34;,&#34;24.89617949229818&#34;,&#34;24.99584490014685&#34;,&#34;25.024271811661002&#34;,&#34;25.03560312685286&#34;,&#34;25.100681844582844&#34;,&#34;25.06002637860313&#34;,&#34;24.964601458157446&#34;,&#34;24.906805998876433&#34;,&#34;24.881179208531478&#34;,&#34;24.84671933295274&#34;,&#34;24.828862066050032&#34;,&#34;24.846952016930494&#34;,&#34;24.962693812346263&#34;,&#34;24.917387870404692&#34;,&#34;24.806139246634455&#34;,&#34;24.74429478499735&#34;,&#34;24.780282567891753&#34;,&#34;24.77215711531799&#34;,&#34;24.782999234672975&#34;,&#34;24.733584769696286&#34;,&#34;24.691015340268255&#34;,&#34;24.666234967252606&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;40334123&#34;,&#34;btcPrice&#34;:&#34;0.001230360240426445&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3270026019&#34;,&#34;price&#34;:&#34;28.113947823836092&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.95&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.57375287086344&#34;,&#34;27.583701817024274&#34;,&#34;27.628337152556885&#34;,&#34;27.71293784101918&#34;,&#34;28.233029378330688&#34;,&#34;28.720730972372852&#34;,&#34;28.46641731982247&#34;,&#34;28.461748558520167&#34;,&#34;28.43371813306647&#34;,&#34;28.28911168246897&#34;,&#34;28.14473632072935&#34;,&#34;28.15563557551264&#34;,&#34;28.240843430286514&#34;,&#34;28.318006504862765&#34;,&#34;28.299833108837987&#34;,&#34;28.329928166122407&#34;,&#34;28.27078454554885&#34;,&#34;28.13957915693539&#34;,&#34;28.037422192263545&#34;,&#34;28.02538763544355&#34;,&#34;27.990684342238957&#34;,&#34;27.99587068353575&#34;,&#34;27.980180249457508&#34;,&#34;27.96831699810348&#34;,&#34;28.017446779311992&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;583436183&#34;,&#34;btcPrice&#34;:&#34;0.001402678245606579&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2708742548&#34;,&#34;price&#34;:&#34;148.96689473750794&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.98&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.06343032587645&#34;,&#34;146.2075982055981&#34;,&#34;146.16344802044546&#34;,&#34;146.888041879794&#34;,&#34;147.51024728525&#34;,&#34;147.80256016994798&#34;,&#34;148.2027654532922&#34;,&#34;149.11840657324646&#34;,&#34;148.0031628172107&#34;,&#34;146.08426002755598&#34;,&#34;145.4683320265626&#34;,&#34;145.45336396325644&#34;,&#34;145.13011985927878&#34;,&#34;145.01926185302602&#34;,&#34;145.05380463743765&#34;,&#34;145.5189388138254&#34;,&#34;144.94121932498405&#34;,&#34;144.55169371872742&#34;,&#34;144.03637609256356&#34;,&#34;144.0602822952893&#34;,&#34;143.9422537624223&#34;,&#34;144.01800973377962&#34;,&#34;144.85743594518297&#34;,&#34;145.90656965474264&#34;,&#34;146.43871992411874&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;115093840&#34;,&#34;btcPrice&#34;:&#34;0.007432347241774043&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467427793&#34;,&#34;price&#34;:&#34;0.35172981355990574&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.16&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515600123998059&#34;,&#34;0.35203683586559326&#34;,&#34;0.3530001942757888&#34;,&#34;0.35412309079161114&#34;,&#34;0.35642368756646714&#34;,&#34;0.35691371592641125&#34;,&#34;0.35632693256778514&#34;,&#34;0.35761063132157045&#34;,&#34;0.35770076129143336&#34;,&#34;0.35735739919120424&#34;,&#34;0.35578661849459614&#34;,&#34;0.35494000660403097&#34;,&#34;0.3544949322189096&#34;,&#34;0.35419673898063&#34;,&#34;0.3545814398327581&#34;,&#34;0.3560563698021784&#34;,&#34;0.35476940248868055&#34;,&#34;0.35303138884975377&#34;,&#34;0.3526138360299577&#34;,&#34;0.353297325772352&#34;,&#34;0.3530050986834627&#34;,&#34;0.3519348960977679&#34;,&#34;0.3512839084444219&#34;,&#34;0.35035540536790366&#34;,&#34;0.35085105792254034&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;115391491&#34;,&#34;btcPrice&#34;:&#34;0.000017548718554334&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2437361911&#34;,&#34;price&#34;:&#34;0.12062849560760455&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.34&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11887874398521932&#34;,&#34;0.11899682832112154&#34;,&#34;0.11900784650582279&#34;,&#34;0.11903091787613028&#34;,&#34;0.11932756061340988&#34;,&#34;0.1193124601461036&#34;,&#34;0.11935198330687927&#34;,&#34;0.11968956008888623&#34;,&#34;0.11982768782602261&#34;,&#34;0.11926800493330945&#34;,&#34;0.11894584887939669&#34;,&#34;0.11912211829876701&#34;,&#34;0.11882743355055038&#34;,&#34;0.11868474386838856&#34;,&#34;0.11878227754760867&#34;,&#34;0.11974550069912294&#34;,&#34;0.11958643330478903&#34;,&#34;0.11927337184798883&#34;,&#34;0.11957351041625688&#34;,&#34;0.11944049884817015&#34;,&#34;0.12009378998253879&#34;,&#34;0.12024109052539109&#34;,&#34;0.12017728479638659&#34;,&#34;0.12012660542021919&#34;,&#34;0.12022267745313032&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;183603999&#34;,&#34;btcPrice&#34;:&#34;0.0000060184705346&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2276265173&#34;,&#34;price&#34;:&#34;118.98058610983257&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.66&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.32262573171138&#34;,&#34;122.21216671462395&#34;,&#34;122.2424076189862&#34;,&#34;122.65231412716444&#34;,&#34;123.18814722852751&#34;,&#34;123.0389419465099&#34;,&#34;122.7525437321455&#34;,&#34;122.63297695763477&#34;,&#34;122.25888231512374&#34;,&#34;121.6083740301883&#34;,&#34;121.0704992507114&#34;,&#34;121.08119723327034&#34;,&#34;121.3486844528348&#34;,&#34;121.35241663771652&#34;,&#34;121.4308975310673&#34;,&#34;121.83807088869149&#34;,&#34;121.79108869683151&#34;,&#34;121.38727041457742&#34;,&#34;120.77014246462569&#34;,&#34;120.9730955171752&#34;,&#34;120.81712651964756&#34;,&#34;120.67586343768751&#34;,&#34;120.35934093743896&#34;,&#34;119.33573062080143&#34;,&#34;118.92020484427697&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;207705732&#34;,&#34;btcPrice&#34;:&#34;0.005936252028051548&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2254967512&#34;,&#34;price&#34;:&#34;20043.97749206499&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.40&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20057.082143515574&#34;,&#34;20073.73634471567&#34;,&#34;20155.35074272695&#34;,&#34;20201.665838224184&#34;,&#34;20307.87652463223&#34;,&#34;20347.737496425136&#34;,&#34;20336.451830858347&#34;,&#34;20370.359230166003&#34;,&#34;20347.242691661544&#34;,&#34;20289.47946418053&#34;,&#34;20236.389261394786&#34;,&#34;20216.767454565917&#34;,&#34;20157.58477689183&#34;,&#34;20148.427911440165&#34;,&#34;20139.404745478332&#34;,&#34;20195.51476083255&#34;,&#34;20218.207717425983&#34;,&#34;20128.86850120113&#34;,&#34;20006.9744546404&#34;,&#34;20060.410623139804&#34;,&#34;20033.996371801375&#34;,&#34;20098.47310976815&#34;,&#34;20097.464012404307&#34;,&#34;20046.809041658624&#34;,&#34;20049.799901903058&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24085498&#34;,&#34;btcPrice&#34;:&#34;1.0000463598965021&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2207091566&#34;,&#34;price&#34;:&#34;0.10974041351835884&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10962651467178453&#34;,&#34;0.10994008962491644&#34;,&#34;0.1102558436062367&#34;,&#34;0.11066651769044844&#34;,&#34;0.11099761359490694&#34;,&#34;0.11112033875517015&#34;,&#34;0.11109668798682694&#34;,&#34;0.11125486280094371&#34;,&#34;0.11097328447826356&#34;,&#34;0.11061839872555923&#34;,&#34;0.11051157703154837&#34;,&#34;0.11040516533585498&#34;,&#34;0.11018324144957391&#34;,&#34;0.11015957429341776&#34;,&#34;0.11025941309951554&#34;,&#34;0.1107306596648452&#34;,&#34;0.11056541424952443&#34;,&#34;0.11033981054182589&#34;,&#34;0.11014982408569168&#34;,&#34;0.11018846762437533&#34;,&#34;0.11026378704001755&#34;,&#34;0.11036637137706824&#34;,&#34;0.11006396812568181&#34;,&#34;0.10976547166697294&#34;,&#34;0.10969235793422591&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;32894151&#34;,&#34;btcPrice&#34;:&#34;0.000005475235696908&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2206952701&#34;,&#34;price&#34;:&#34;3.630786016166329&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.37&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6764432411708334&#34;,&#34;3.6877377535157785&#34;,&#34;3.695275020835127&#34;,&#34;3.703712737949751&#34;,&#34;3.7340726187087037&#34;,&#34;3.7301224517518223&#34;,&#34;3.726830183476546&#34;,&#34;3.732039649903934&#34;,&#34;3.717434927228703&#34;,&#34;3.6877396306355372&#34;,&#34;3.672153124641749&#34;,&#34;3.6712014753545934&#34;,&#34;3.682858101631704&#34;,&#34;3.6816966205355786&#34;,&#34;3.6732422481738896&#34;,&#34;3.68742500998647&#34;,&#34;3.67949841043138&#34;,&#34;3.658086252545483&#34;,&#34;3.6466882303359083&#34;,&#34;3.653534815527586&#34;,&#34;3.6524651001872352&#34;,&#34;3.6566637162352977&#34;,&#34;3.6505578611908183&#34;,&#34;3.641624197517031&#34;,&#34;3.6360026668443743&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;214660455&#34;,&#34;btcPrice&#34;:&#34;0.000181149392153712&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1912308135&#34;,&#34;price&#34;:&#34;0.000290147954073881&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.81&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297534732475355&#34;,&#34;0.00029924350285628&#34;,&#34;0.000301788299795161&#34;,&#34;0.000299920153570012&#34;,&#34;0.000298931795978761&#34;,&#34;0.00030181081782183&#34;,&#34;0.000303176990591589&#34;,&#34;0.000301682155659599&#34;,&#34;0.000300427127360826&#34;,&#34;0.000299399340560452&#34;,&#34;0.000295889751885886&#34;,&#34;0.000294483950425306&#34;,&#34;0.000296163406502654&#34;,&#34;0.000295896753590268&#34;,&#34;0.000296293813138895&#34;,&#34;0.00029712340206075&#34;,&#34;0.000296241802461865&#34;,&#34;0.000294833413425782&#34;,&#34;0.000295805632133273&#34;,&#34;0.000295448279840089&#34;,&#34;0.000294342506473691&#34;,&#34;0.000292052607134611&#34;,&#34;0.000290629002509443&#34;,&#34;0.000292037309457244&#34;,&#34;0.000292007407136324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;87308849&#34;,&#34;btcPrice&#34;:&#34;1.4476238831e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1809009261&#34;,&#34;price&#34;:&#34;1.8090092609827892&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.08&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8200632272957997&#34;,&#34;1.8247805232483643&#34;,&#34;1.828712312707551&#34;,&#34;1.833483750666553&#34;,&#34;1.8388113856711226&#34;,&#34;1.8340065059765118&#34;,&#34;1.833810679916731&#34;,&#34;1.8379730157830576&#34;,&#34;1.839871909045534&#34;,&#34;1.8316951407594886&#34;,&#34;1.8218905615149048&#34;,&#34;1.8133420432182386&#34;,&#34;1.8119386729956268&#34;,&#34;1.8082288357010967&#34;,&#34;1.8068009632735749&#34;,&#34;1.8188388540688198&#34;,&#34;1.8203819894312625&#34;,&#34;1.814524337055796&#34;,&#34;1.808721193963964&#34;,&#34;1.8196357521223283&#34;,&#34;1.815149328780377&#34;,&#34;1.8112776438372116&#34;,&#34;1.8108458436676627&#34;,&#34;1.8027262559586126&#34;,&#34;1.805119314397385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12137167&#34;,&#34;btcPrice&#34;:&#34;0.000090256194269879&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767866343&#34;,&#34;price&#34;:&#34;1.7061053298863806&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.32&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6885003563699261&#34;,&#34;1.6911129238364746&#34;,&#34;1.6949035542249486&#34;,&#34;1.7027954737084738&#34;,&#34;1.7125610716564361&#34;,&#34;1.7140651860196017&#34;,&#34;1.714695946307908&#34;,&#34;1.7186349196969963&#34;,&#34;1.7112095222795702&#34;,&#34;1.7059432521776707&#34;,&#34;1.6993434662570355&#34;,&#34;1.7005773278388585&#34;,&#34;1.6968447607894448&#34;,&#34;1.6929234664355564&#34;,&#34;1.692450465901943&#34;,&#34;1.7010313056523052&#34;,&#34;1.6985550988885165&#34;,&#34;1.6893705490937398&#34;,&#34;1.6866645696902811&#34;,&#34;1.7019443099317626&#34;,&#34;1.7014230772153076&#34;,&#34;1.7069133070811424&#34;,&#34;1.7033611748224882&#34;,&#34;1.6994360137640887&#34;,&#34;1.704400633762173&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;71187916&#34;,&#34;btcPrice&#34;:&#34;0.000085122048526962&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725996262&#34;,&#34;price&#34;:&#34;17.259962623670035&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.03&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.0775388533003&#34;,&#34;17.067912741278125&#34;,&#34;17.19371992172132&#34;,&#34;17.4049080612785&#34;,&#34;17.349122197170388&#34;,&#34;17.383691525495145&#34;,&#34;17.38955154672953&#34;,&#34;17.62408133673586&#34;,&#34;17.593322076060364&#34;,&#34;17.4386892965598&#34;,&#34;17.328889316544824&#34;,&#34;17.447514865666506&#34;,&#34;17.32297480082281&#34;,&#34;17.37509972478323&#34;,&#34;17.34525419003646&#34;,&#34;17.409372532584655&#34;,&#34;17.389133405821546&#34;,&#34;17.35036829752898&#34;,&#34;17.427069919455597&#34;,&#34;17.552044170794996&#34;,&#34;17.412493725255267&#34;,&#34;17.349458429441366&#34;,&#34;17.146992959728287&#34;,&#34;17.252120262541386&#34;,&#34;17.264212303383914&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19832838&#34;,&#34;btcPrice&#34;:&#34;0.000860915853391649&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1632172859&#34;,&#34;price&#34;:&#34;5.553360617882926&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.39&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.563583111239947&#34;,&#34;5.566550453652093&#34;,&#34;5.574658649368248&#34;,&#34;5.59947207926758&#34;,&#34;5.623738949982796&#34;,&#34;5.620874463842186&#34;,&#34;5.636449717522663&#34;,&#34;5.636012075827377&#34;,&#34;5.621787024814909&#34;,&#34;5.604863066684564&#34;,&#34;5.59106302185655&#34;,&#34;5.592521259925081&#34;,&#34;5.578504466675582&#34;,&#34;5.569698214994045&#34;,&#34;5.57106966286358&#34;,&#34;5.5871830930712845&#34;,&#34;5.58594625512426&#34;,&#34;5.567567471367906&#34;,&#34;5.557070809165411&#34;,&#34;5.564056973722409&#34;,&#34;5.560812558868851&#34;,&#34;5.555371588027569&#34;,&#34;5.5431943077677825&#34;,&#34;5.540294464973471&#34;,&#34;5.542380071855275&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;155725594&#34;,&#34;btcPrice&#34;:&#34;0.000277071657723871&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579991723&#34;,&#34;price&#34;:&#34;6.0165579380799885&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.016755740637141&#34;,&#34;6.025549949045874&#34;,&#34;6.025640938683228&#34;,&#34;6.0377448148370085&#34;,&#34;6.064372958080765&#34;,&#34;6.083168222934446&#34;,&#34;6.121138125111502&#34;,&#34;6.122110772502033&#34;,&#34;6.115151992864029&#34;,&#34;6.094617924935418&#34;,&#34;6.060091344132251&#34;,&#34;6.055252608620663&#34;,&#34;6.044824998176658&#34;,&#34;6.039684832886364&#34;,&#34;6.031722431559297&#34;,&#34;6.051848135596568&#34;,&#34;6.052505386943968&#34;,&#34;6.039004021283348&#34;,&#34;6.03094716124407&#34;,&#34;6.0282463753416&#34;,&#34;6.032921444329065&#34;,&#34;6.04632010848593&#34;,&#34;6.041115706175561&#34;,&#34;6.045998924171826&#34;,&#34;6.0229305076806545&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;35516114&#34;,&#34;btcPrice&#34;:&#34;0.000300181781159216&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1572684480&#34;,&#34;price&#34;:&#34;0.023557025426635677&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.72&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.02375170887710745&#34;,&#34;0.023790767210407363&#34;,&#34;0.02385906108038382&#34;,&#34;0.023963654949121647&#34;,&#34;0.024032391322482857&#34;,&#34;0.02406040482720113&#34;,&#34;0.0240241062637749&#34;,&#34;0.024037336226182978&#34;,&#34;0.02400171948264513&#34;,&#34;0.02387998962803967&#34;,&#34;0.02378930361410667&#34;,&#34;0.02383913575157462&#34;,&#34;0.02381560283772684&#34;,&#34;0.02375080527252874&#34;,&#34;0.023755408145521056&#34;,&#34;0.02387716977416547&#34;,&#34;0.02387351543491939&#34;,&#34;0.023763817483126306&#34;,&#34;0.023691552163897643&#34;,&#34;0.023726104965078293&#34;,&#34;0.02368589760998112&#34;,&#34;0.023671062742535463&#34;,&#34;0.023601726034422614&#34;,&#34;0.0235570377718252&#34;,&#34;0.0235469112210421&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;88620897&#34;,&#34;btcPrice&#34;:&#34;0.000001175321491816&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1553748228&#34;,&#34;price&#34;:&#34;4.671730797095194&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.661125064396867&#34;,&#34;4.663869351538766&#34;,&#34;4.66954849891612&#34;,&#34;4.700257578283811&#34;,&#34;4.730018157572612&#34;,&#34;4.714143976512721&#34;,&#34;4.723478551910749&#34;,&#34;4.726841497246268&#34;,&#34;4.71589081766422&#34;,&#34;4.704019970362516&#34;,&#34;4.6988239161796725&#34;,&#34;4.701002359282831&#34;,&#34;4.691700450917038&#34;,&#34;4.677135351952703&#34;,&#34;4.694429858732558&#34;,&#34;4.721898404666295&#34;,&#34;4.72192706714792&#34;,&#34;4.711492514608389&#34;,&#34;4.722961417487937&#34;,&#34;4.727350513894986&#34;,&#34;4.726777756847048&#34;,&#34;4.730691546772397&#34;,&#34;4.723894121828546&#34;,&#34;4.720900237522959&#34;,&#34;4.694323412913096&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;62601195&#34;,&#34;btcPrice&#34;:&#34;0.000233084844557472&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535345175&#34;,&#34;price&#34;:&#34;0.6999520749208403&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.37&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7018437336148443&#34;,&#34;0.7012296643669335&#34;,&#34;0.7022993535952263&#34;,&#34;0.7043824624342494&#34;,&#34;0.7061012732016445&#34;,&#34;0.7092722059821073&#34;,&#34;0.7107294942869858&#34;,&#34;0.7108990080244315&#34;,&#34;0.7099791984418414&#34;,&#34;0.7078420220186218&#34;,&#34;0.7051095437828625&#34;,&#34;0.707248929548027&#34;,&#34;0.7050915198697436&#34;,&#34;0.7044747588216688&#34;,&#34;0.7041160697442599&#34;,&#34;0.7066206655413716&#34;,&#34;0.7058549946852882&#34;,&#34;0.7032486369948753&#34;,&#34;0.7012876549332069&#34;,&#34;0.7009747852786251&#34;,&#34;0.700473849406315&#34;,&#34;0.7005982029037023&#34;,&#34;0.7002369574369308&#34;,&#34;0.7006334207984222&#34;,&#34;0.7000127772948245&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;113068798&#34;,&#34;btcPrice&#34;:&#34;0.000034922436173344&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1529157571&#34;,&#34;price&#34;:&#34;0.7645787855498196&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.80&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7862352418397442&#34;,&#34;0.7857962385011888&#34;,&#34;0.7860823591712383&#34;,&#34;0.7913864227222935&#34;,&#34;0.7931731378366671&#34;,&#34;0.7918535836709918&#34;,&#34;0.7934385490032205&#34;,&#34;0.7935992087657073&#34;,&#34;0.7897855169136626&#34;,&#34;0.7868869873929384&#34;,&#34;0.7827511307418661&#34;,&#34;0.7829200782135203&#34;,&#34;0.7815399732777862&#34;,&#34;0.7772118263855671&#34;,&#34;0.7746419330272937&#34;,&#34;0.7799681155884691&#34;,&#34;0.777981466209664&#34;,&#34;0.7739045575146072&#34;,&#34;0.7718550460057184&#34;,&#34;0.7715939215456447&#34;,&#34;0.7695383673672498&#34;,&#34;0.7673191324882311&#34;,&#34;0.7657534786224457&#34;,&#34;0.764881660541454&#34;,&#34;0.7646092366582135&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;145242009&#34;,&#34;btcPrice&#34;:&#34;0.000038146831468249&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1413337607&#34;,&#34;price&#34;:&#34;0.058052265495351495&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770820809062958&#34;,&#34;0.05773161591193554&#34;,&#34;0.057901448026430706&#34;,&#34;0.058104711439575775&#34;,&#34;0.05821494457445837&#34;,&#34;0.05837605385144989&#34;,&#34;0.0583912493104286&#34;,&#34;0.058424171286181624&#34;,&#34;0.05828953359467471&#34;,&#34;0.058191254382563104&#34;,&#34;0.058069476804724386&#34;,&#34;0.05816012171446981&#34;,&#34;0.05809696154952601&#34;,&#34;0.05804430834562561&#34;,&#34;0.058079013279903904&#34;,&#34;0.058270287529447726&#34;,&#34;0.05828744692577993&#34;,&#34;0.05819030965298005&#34;,&#34;0.05799510351002881&#34;,&#34;0.05801850162696806&#34;,&#34;0.05804288093820356&#34;,&#34;0.05809254408384736&#34;,&#34;0.05803413483043568&#34;,&#34;0.057982852173679544&#34;,&#34;0.05799862984287226&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;38825707&#34;,&#34;btcPrice&#34;:&#34;0.000002896379065251&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359878097&#34;,&#34;price&#34;:&#34;1.001334577613883&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.99995237657306&#34;,&#34;0.9992610930077082&#34;,&#34;0.9995048898577841&#34;,&#34;0.9984857957300194&#34;,&#34;0.9991338275862605&#34;,&#34;0.9991463646832447&#34;,&#34;0.9995515068035792&#34;,&#34;0.9992688671456238&#34;,&#34;0.9999129851645419&#34;,&#34;1.0002242997546233&#34;,&#34;0.999712820332821&#34;,&#34;1.0000332602428952&#34;,&#34;0.9995079927133396&#34;,&#34;0.999782374902935&#34;,&#34;0.999308877507305&#34;,&#34;0.9988846870195152&#34;,&#34;1.0005152287641716&#34;,&#34;1.0008340522704022&#34;,&#34;0.9994436410988572&#34;,&#34;0.9996849217788387&#34;,&#34;0.9995211220531371&#34;,&#34;0.999211197536607&#34;,&#34;0.9999983085146361&#34;,&#34;0.999769500498533&#34;,&#34;1.0011860473290413&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6768277&#34;,&#34;btcPrice&#34;:&#34;0.000049959195961864&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1353847155&#34;,&#34;price&#34;:&#34;138.46931334806206&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.70&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.82868883894076&#34;,&#34;137.71306856606782&#34;,&#34;138.03647928074753&#34;,&#34;138.80197795554938&#34;,&#34;139.12071269372848&#34;,&#34;139.05878455835125&#34;,&#34;139.14677841096062&#34;,&#34;138.87253490735398&#34;,&#34;138.02179236057498&#34;,&#34;137.42442294208283&#34;,&#34;137.6271009908909&#34;,&#34;139.44419273993879&#34;,&#34;138.9594762558207&#34;,&#34;139.35956951767986&#34;,&#34;139.76224675334996&#34;,&#34;140.73346306408735&#34;,&#34;139.70014562219615&#34;,&#34;139.58102151134608&#34;,&#34;139.19177605867037&#34;,&#34;139.65458123164169&#34;,&#34;139.17824474960636&#34;,&#34;139.1901615972891&#34;,&#34;138.83319330338816&#34;,&#34;138.1218448902609&#34;,&#34;138.15277303739376&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;71501255&#34;,&#34;btcPrice&#34;:&#34;0.006908595503358421&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1316030339&#34;,&#34;price&#34;:&#34;55.7002018134128&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.89&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.49977253219301&#34;,&#34;54.11874620026287&#34;,&#34;54.2183062824539&#34;,&#34;54.68045352030543&#34;,&#34;55.29261101979573&#34;,&#34;55.12466500529631&#34;,&#34;55.4096265101037&#34;,&#34;55.17360006105945&#34;,&#34;55.03825697066999&#34;,&#34;54.83782041498208&#34;,&#34;54.61174346698164&#34;,&#34;54.72261326487687&#34;,&#34;55.07467359664748&#34;,&#34;55.12258904806393&#34;,&#34;55.12232719822051&#34;,&#34;55.10748540691841&#34;,&#34;55.01733359597467&#34;,&#34;54.876885804473424&#34;,&#34;54.85576050348866&#34;,&#34;55.096674446643746&#34;,&#34;55.35611005385607&#34;,&#34;54.96784781952569&#34;,&#34;54.84449264613283&#34;,&#34;54.95034295425699&#34;,&#34;55.112649002423744&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;72484623&#34;,&#34;btcPrice&#34;:&#34;0.002779028468329484&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298954067&#34;,&#34;price&#34;:&#34;1.4302723371340804&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.37&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.421883939884071&#34;,&#34;1.42509607402001&#34;,&#34;1.4278239665456545&#34;,&#34;1.4336636277697252&#34;,&#34;1.4443645638453815&#34;,&#34;1.4463747088081587&#34;,&#34;1.4428608091094144&#34;,&#34;1.4490881454348474&#34;,&#34;1.4450878337651158&#34;,&#34;1.4401715843904537&#34;,&#34;1.4355148328665224&#34;,&#34;1.4365319902236815&#34;,&#34;1.4339651090330499&#34;,&#34;1.4334495267586773&#34;,&#34;1.4333504141935083&#34;,&#34;1.4389840361204465&#34;,&#34;1.4379456439736016&#34;,&#34;1.4315401694215406&#34;,&#34;1.4240153029007887&#34;,&#34;1.4240927210678032&#34;,&#34;1.4220389629012662&#34;,&#34;1.4290008245398644&#34;,&#34;1.4312652127406216&#34;,&#34;1.4310909189590104&#34;,&#34;1.4306725904273427&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;35958124&#34;,&#34;btcPrice&#34;:&#34;0.000071360020483851&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281371060&#34;,&#34;price&#34;:&#34;0.21568734363318337&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.48&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.21553593139708543&#34;,&#34;0.21544366417321525&#34;,&#34;0.21646610949174847&#34;,&#34;0.21730782782429547&#34;,&#34;0.21865681130587172&#34;,&#34;0.21939390999187283&#34;,&#34;0.21985592005582816&#34;,&#34;0.21915437745243896&#34;,&#34;0.2184171446254368&#34;,&#34;0.21798236632181323&#34;,&#34;0.21690087683062034&#34;,&#34;0.21604240077342493&#34;,&#34;0.21587704160172458&#34;,&#34;0.2158448062065273&#34;,&#34;0.21568131629647883&#34;,&#34;0.21628666481515962&#34;,&#34;0.21575577092565493&#34;,&#34;0.21492437995400548&#34;,&#34;0.21514404501911413&#34;,&#34;0.2171108493305216&#34;,&#34;0.21771656940310347&#34;,&#34;0.21679986568652215&#34;,&#34;0.21607273994568685&#34;,&#34;0.21599406892348155&#34;,&#34;0.216016823604864&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;205319395&#34;,&#34;btcPrice&#34;:&#34;0.000010761204604301&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273244296&#34;,&#34;price&#34;:&#34;0.8491294389371948&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.58&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8590405964683089&#34;,&#34;0.859478250004335&#34;,&#34;0.8609939510022012&#34;,&#34;0.8652881133772078&#34;,&#34;0.8665208089867517&#34;,&#34;0.8666644958759461&#34;,&#34;0.8662362089943302&#34;,&#34;0.8669849089516505&#34;,&#34;0.8647803548984957&#34;,&#34;0.8606548254227334&#34;,&#34;0.858647121421129&#34;,&#34;0.8662635524287782&#34;,&#34;0.8588847882234059&#34;,&#34;0.8544149170251873&#34;,&#34;0.8528484459196816&#34;,&#34;0.8567742977148085&#34;,&#34;0.8559971556239261&#34;,&#34;0.8526369746427614&#34;,&#34;0.8503963749700182&#34;,&#34;0.8514893353210455&#34;,&#34;0.8513642787546029&#34;,&#34;0.8508505323793061&#34;,&#34;0.8483933250963328&#34;,&#34;0.8475209589259349&#34;,&#34;0.8482538011775931&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;116012726&#34;,&#34;btcPrice&#34;:&#34;0.000042365284276849&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1216349067&#34;,&#34;price&#34;:&#34;1.5122657530928172&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5150991540359635&#34;,&#34;1.5176061095960762&#34;,&#34;1.5245756510192037&#34;,&#34;1.5369489213784007&#34;,&#34;1.5521086753177897&#34;,&#34;1.5577273434480916&#34;,&#34;1.5620222188046804&#34;,&#34;1.5618008806408366&#34;,&#34;1.5635266954065115&#34;,&#34;1.5512539189835166&#34;,&#34;1.5391754904487456&#34;,&#34;1.5415483542201813&#34;,&#34;1.5406687905041778&#34;,&#34;1.5536997118197664&#34;,&#34;1.5585509390347834&#34;,&#34;1.5605461378658754&#34;,&#34;1.556322526404288&#34;,&#34;1.5432139594119398&#34;,&#34;1.527711427666444&#34;,&#34;1.5295360489082588&#34;,&#34;1.5251991365229256&#34;,&#34;1.523882390305484&#34;,&#34;1.5152199119209957&#34;,&#34;1.5079084095454254&#34;,&#34;1.5059207760888258&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;14537858&#34;,&#34;btcPrice&#34;:&#34;0.000075450886041721&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1157143428&#34;,&#34;price&#34;:&#34;1.170587468937924&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1694694824289555&#34;,&#34;1.1709120673050462&#34;,&#34;1.1739859596809479&#34;,&#34;1.17900555328724&#34;,&#34;1.184230473597679&#34;,&#34;1.185710435108849&#34;,&#34;1.1864344657129484&#34;,&#34;1.1885516582635711&#34;,&#34;1.1870888275685685&#34;,&#34;1.1829654851494844&#34;,&#34;1.17709582794196&#34;,&#34;1.1762202099671832&#34;,&#34;1.1773458464363997&#34;,&#34;1.1770861707666584&#34;,&#34;1.1811474861902838&#34;,&#34;1.1833592012519114&#34;,&#34;1.1818251357201783&#34;,&#34;1.1782503602022067&#34;,&#34;1.176960097898779&#34;,&#34;1.1767921922729265&#34;,&#34;1.1759604894059537&#34;,&#34;1.1750064515228658&#34;,&#34;1.1729163746108195&#34;,&#34;1.170358956437112&#34;,&#34;1.1692075076471242&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;178450428&#34;,&#34;btcPrice&#34;:&#34;0.000058403664527924&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post93": {
            "title": "AWS Deployment",
            "content": "Docker! . Me and my group was able to create four different containers that are each bound to 8080 inside the container with a unique port outside the container for each site. Each website also has a unique image! . . Next we tested to see if we were able to display the websites inside of the container that we made! . . This is the process of pulling from my flask and then updating the website on AWS! . . Here is me using curl command to show the website inside of the AWS terminal! . Here is my docker-compose.yml file Here I changed the image to become unique for my flask and I changed the port to have 8089 to differentiate from my container vs my teamates conatainers . version: &#39;3&#39; services: web: image: flask_alex_v1 build: . ports: - &quot;8089:8080&quot; volumes: - persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/alex-flask/volumes . Here is my dockerfile! It is basically original except for the COPY .. . FROM docker.io/python:3.9 WORKDIR /app # [Install python and pip] RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git COPY . . RUN pip install --no-cache-dir -r requirements.txt RUN pip3 install gunicorn ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8080&quot; EXPOSE 8080 CMD [ &quot;gunicorn&quot;, &quot;main:app&quot; ] . Here is my nginx file for my flask! Here you can see my personal ports and the public ip that we put. . server { listen 8083; listen [::]:8083; server_name 18.216.138.52; location / { proxy_pass http://localhost:8089; add_header &quot;Access-Control-Allow-Origin&quot; *; } } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/AWSDeploymentpublic/",
            "relUrl": "/AWSDeploymentpublic/",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post94": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i +1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter z is the 26 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times running = True while running: #while loop that keeps running unless running is false item = input(&quot;Please select an item from the menu&quot;) #Takes in input item2 = item.lower() #lowercases te input so the user can put in their input with capitlization if item2 in menu: #if statemment that checks to see if the input matches the menu total += menu[item2] #Adds the prices the items to the menu print(&quot;Your cost: &quot; &quot;{:.2f}&quot;.format(total)) # prints out the total elif item2 == &quot;stop&quot;: # Checks to see if the user wants to stop the code print(&quot;Thank you for shopping!&quot;) #prints out the goodbye message running = False #stops the while loop else: # Checks to see if there is invalid input print(&quot;Invalid Item Try again&quot;) # Finaly prints out message showing the user that the message is invalid #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Your cost: 3.99 Invalid Item Try again Your cost: 4.98 Your cost: 8.97 Your cost: 10.96 Thank you for shopping! 10.96 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post95": {
            "title": "College Board MC",
            "content": "Collaboration Quiz! . . One thing that I really liked about this quiz was how it emphasized the importance of having multiple perspectives In my own scrum team, we highly value collaboration and using multiple perspectives to solve problems and this is why I was able to relate to this quiz and it was a good review on the main ideas of working as groups! | . | . Program Function and Purpose Quiz! . . One Question that I have for this specific quiz is why the equal signs appear as arrows in the college board mcqs | I also really liked the nested loop question because it took a lot of time to understand it, however in the end I was able to see what the code was doing! | . Program Design and Development Quiz! . . I found the loop that outputs the odd numbers to be very good because it uses many loops to print out the numbers with the least amount of code blocks | I have the same question again with the arrows and why they don’t use equal signs | . Overall I think that these MCQS were good practice and helped me review over these main concepts! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CollegeBoardMCQPRactice/",
            "relUrl": "/CollegeBoardMCQPRactice/",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post96": {
            "title": "Basketball Data Generator",
            "content": "NBA generator . This is a button that will randomly generate a name from a great player in the NBA | . Click Me! . . This is how it works: . var players = [&quot;Stephen Curry&quot; , &quot;LeBron James&quot;, &quot;Michael Jordan&quot;, &quot;Kareem Abdul-Jabbar&quot;, &quot;Kobe Bryant&quot;, &quot;Shaquille ONeal&quot;, &quot;Larry Bird&quot;, &quot;Wilt Chamberlain&quot;, &quot;Magic Johnson&quot;] var button = document.getElementById(&quot;1&quot;) var random2 = document.getElementById(&quot;random&quot;) button.onclick=function() { let random = players[Math.floor(Math.random()*players.length)]; random2.innerHTML = random } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Basketballdatagen/",
            "relUrl": "/Basketballdatagen/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post97": {
            "title": "Scrum Project",
            "content": "Main Goal . make a platform where people are able to share their goals and track their own progress as well as support their peers in keeping on track with their goals | . My role . I am apart of the backend whithing my scrum team, I will manage the code that takes care of tracking likes and comments. Storing the data and allowing everything to work together perfectly so the fromt end would have an easier job of simply making the page look nicer and easier to use. My job as the backend is to make sure all the text boxes would load correctly and store the data and to also make sure that all the links work in sync. | . End Result . We will hopefully end with a public website that will allow friends and family to communicate and post goals about their daily lives. This website will be nicely decorated and easy to use in order to ensure that the people can find success in their own goals. | . Here is a brainstorming picture . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/ScrumProjectbrainstorm",
            "relUrl": "/csp/ScrumProjectbrainstorm",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post98": {
            "title": "HTML Fragments and Javascript kernel",
            "content": "// defines a function that outputs to the console the message function logt(output) { console.log(output); } // calls to the function logt(&quot;hi&quot;); . HTML fragments along with Javascript table . outputs the lakers roster along with the coach using javascript and html that uses json to convert the objects into strings to output into the table! | . // define a function to hold data for a Person function Person(name, height, age) { this.name = name; this.height = height; this.age = age; this.role = &quot;&quot;; } // Sets the role of the person Person.prototype.setRole = function(role) { this.role = role; } //Defines Coach var coach = new Person(&quot;Darwin Ham&quot;, &quot;6&#39;7&quot;, 48); coach.setRole(&quot;Coach&quot;); // JSON conversion that changes an object into a string Person.prototype.toJSON = function() { const obj = {name: this.name, height: this.height, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // data about players var players = [ new Person(&quot;Carmelo Anthony&quot;, &quot;6&#39;7&quot;, 38), new Person(&quot;Lebron James&quot;, &quot;6&#39;9&quot;, 37), new Person(&quot;Russel Westbrook&quot;, &quot;6&#39;3&quot;, 33), new Person(&quot;Dennis Shroder&quot;, &quot;6&#39;1&quot;, 29), new Person(&quot;Anthony Davis&quot;, &quot;6&#39;10&quot;, 29), new Person(&quot;Dwight Howard&quot;, &quot;6&#39;10&quot;, 36) ]; function Team(coach, players){ // 1 coach with a group of players to make a team // starts the list with the coach this.coach = coach; this.team = [coach]; // adding players to the array that we just made this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.team.push(player); }); // creates the json list of string by calling back to the function earlier this.json = []; this.team.forEach(player =&gt; this.json.push(player.toJSON())); } //defining the team var lakers = new Team(coach, players); // define an HTML conversion &quot;method&quot; associated with Classroom Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Height&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of lakers.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.height + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(lakers._toHtml()); . NameHeightAgeRole . Darwin Ham | 6&#39;7 | 48 | Coach | Carmelo Anthony | 6&#39;7 | 38 | Player | Lebron James | 6&#39;9 | 37 | Player | Russel Westbrook | 6&#39;3 | 33 | Player | Dennis Shroder | 6&#39;1 | 29 | Player | Anthony Davis | 6&#39;10 | 29 | Player | Dwight Howard | 6&#39;10 | 36 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/htmltablejavascript",
            "relUrl": "/csp/htmltablejavascript",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post99": {
            "title": "HTML Fragments and Javascript kernel",
            "content": "// defines a function that outputs to the console the message function logt(output) { console.log(output); } // calls to the function logt(&quot;hi&quot;); . HTML fragments along with Javascript table . outputs the lakers roster along with the coach using javascript and html that uses json to convert the objects into strings to output into the table! | . // define a function to hold data for a Person function Person(name, height, age) { this.name = name; this.height = height; this.age = age; this.role = &quot;&quot;; } // Sets the role of the person Person.prototype.setRole = function(role) { this.role = role; } //Defines Coach var coach = new Person(&quot;Darwin Ham&quot;, &quot;6&#39;7&quot;, 48); coach.setRole(&quot;Coach&quot;); // JSON conversion that changes an object into a string Person.prototype.toJSON = function() { const obj = {name: this.name, height: this.height, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // data about players var players = [ new Person(&quot;Carmelo Anthony&quot;, &quot;6&#39;7&quot;, 38), new Person(&quot;Lebron James&quot;, &quot;6&#39;9&quot;, 37), new Person(&quot;Russel Westbrook&quot;, &quot;6&#39;3&quot;, 33), new Person(&quot;Dennis Shroder&quot;, &quot;6&#39;1&quot;, 29), new Person(&quot;Anthony Davis&quot;, &quot;6&#39;10&quot;, 29), new Person(&quot;Dwight Howard&quot;, &quot;6&#39;10&quot;, 36) ]; function Team(coach, players){ // 1 coach with a group of players to make a team // starts the list with the coach this.coach = coach; this.team = [coach]; // adding players to the array that we just made this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.team.push(player); }); // creates the json list of string by calling back to the function earlier this.json = []; this.team.forEach(player =&gt; this.json.push(player.toJSON())); } //defining the team var lakers = new Team(coach, players); // define an HTML conversion &quot;method&quot; associated with Classroom Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Height&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of lakers.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.height + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(lakers._toHtml()); .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/HtmlFragmentJavascriptKernel/",
            "relUrl": "/HtmlFragmentJavascriptKernel/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post100": {
            "title": "Good Life",
            "content": "Main Takeaway From Video: . Students have been dealing with stress, so extensive to the point where they aren’t able to enjoy and be productive. . As a group, my scrum team was able to put together this google form that assessed the mental health of students at Del Norte, to see how this problem is affecting students in our high school. . Example of one of our questions: . | This question goes over the stress levels in our school | The results are very bad in the sense that most students are dealing with extreme amounts of stress | . . This next question goes over anxiety which is hand in hand with stress | Our scrum team chose this question so it can emphasize the amount of pressure that the students are put under | . . This next question goes over homework and how much stress it puts onto the students | This shows the effect that school has on the students | . . This is another question that talks about the mental health of the students, most of the people that answered our survey responded by saying that they were feeling lonely. This is not good because being lonely is bad. | . Results . From this survey I was able to guage the mental health of the students in del norte and I was able to get a better understanding of how school affects the students. This was also a survey that allowed me to reflect off of the video of the Better life. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/TheGoodLife",
            "relUrl": "/csp/TheGoodLife",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post101": {
            "title": "Preformance Task Planning",
            "content": "Ideas for preformance Task . Basketball NBA statistics calculator and achievement record database that you can pull from. Purpose of this will to inform people on the most recent stats so they can easily have an uderstanding of what is going on in the league so far | . | NBA player ranking based off of data This will be very good for fantasy basketball, the purpose would be to give instant ratings based off of the player statics | . | What to wear based off of the weather app To inform people what to wear so they do not have to manually check the weather and think about what would be the best to wear | . | Informational page on track, teaching about certain events, embedded quizes and statistics Help new track and field athelets choose their evens and see what is good about each event. | . | . Things that I need to learn . I need to master using functions and creating them to manage the complexity of my project. Because if I were to do these complex apps such as data analytics, I would need to use many functions in order to make it run properly so I will not have to manually code everything over and over again . // example of a function that I could possibly use : something I learned making my quiz function nextQuestion() { if (quiz[question - 1].answers[selected - 1].correct) { correct++; } . In this code block there is a next question function that allows the user to go to the next question. This function parses through the list with all the data checking for the right answer, and if it is correct it will update the correct variable by 1. This saves a lot of time becaue it is an algorithm that is used very often in my code. This is something that I can possibly implement into my Preformance Task . Resources . Some resources that I can use is all the lecture notes and I can refer back the functions that I was able to make in my quiz. These functions that were created from the code blocks can provide the structure to making the algorithms that I will use in my preformance task. To start, I already have a good understanding of how to use javascript and use if statements and Onevent blocks. I can also ue my knowledge of variable to create the preformance task. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/PreformanceTaskPlanning",
            "relUrl": "/csp/PreformanceTaskPlanning",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post102": {
            "title": "Codeorg Blog",
            "content": "Link . Design Work . Me and Safin met up after school at Safin’s house, we were able to draw images and sketches using his ipad. We decided to do one screen and replace images with a 2x2 grid with images and text boxes to display the labels. We also finallized our page by putting a text box at the top that gives the question. We also planned out a score page that displays the percent accuracy which represents how many questions they were able to get right. We also planned out to do basketbal and tennis because basketball is my favorite sport and tennis is safins favorite sport . Purpose . The purpose of the app that we were able to create tests the user on the important knowledge about basketball and tennis. It also allows the user to understand how to play because there is a tutorial page. I sometimes have troubles remembering these important achievements that these players have made, and this quiz allows us to recall that information very easily. . Design . The design that me and Safin chose was to design our own quiz and eventually come together to make one app that accesses both of our quizzes. The way that We planned this was storing all of our quiz data into one list of dictionary respectively called Basketball and Tennis and we uploaded the lists into the same app. . Data abstraction . We created a huge list that contains dictionarys and whithin the dictionaries there were key and value pairs. Within the answer pair we put all of our answer choices which included pictures, names, and whether they were right or not. This list was easy to parse through and allowed us to use functions that went through these lists and created tests . Managing Complexity . In order to manage the complexity of this quiz, we were able to input many comments and use many functions to ensure that the code is very easy to follow. The comments allow us to communicate what we are doing with each function and what the purpose of the variables are. And the repeated use of the functions allow us to easily call back to a known function that we make and it communicated the purpose of the funciton without having the reader have to understand the code. . Procedural Abstraction . In order to apply the lists into the quiz, we used many functions. The overarching function was the function that called for the quiz and whithin the quiz function we were able to create many different functions. Some functions included changing the selected answer. Changing the pictures and labels as we the the quiz changes question. And another function we used was the finish function that changes the screen to the end and outputs score. . Algorithm implementations . We used many algorithms or functions to make the code more straight forward and less repetitive. Some of them are next question or finish quiz. This was important to our code because it allowed us to call back to that algorithm very easily without having to recode the whole thing over and over again. These algorithms made our code easier to understand and made it more efficent. . Testing . In order to test out our code, we used the console.log to test out what the code would output before implementing it into our code. This way we were able to see what input was given and how we can use that input to advance our quiz. The consol.log function was a very useful tool that went very well with the onEvent block because it allows us to easily detect for when input is given and it allows us to test new strategies and ideas without hurting out code . Challenges . Some challenges was formatting the quiz into the right list and dictionary so we could call to it. This was very tedious and very hard because and syntax errors in the large array stopped the whole code all togther. Another problem that came up and that the variables were not resetting after each function use. In order to solve this we had to make a new function that resets all the variables. . function finish() { setScreen(&quot;finishscreen&quot;); setProperty(&quot;score&quot;, &quot;text&quot;, correct + &quot;/3, which is &quot; + Math.floor((correct*1.0/3)*100) + &quot;%&quot;) onEvent(&quot;backbutton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;BegginingScreen&quot;); question = 1; correct = 0; selected = null; }); } . This javascript codeblock function allows us to manage our complexity and use an algorithm at the same time. This code block is the finish screen function that changes the screen, and it also outputs the score, to do this it it takes in the variable correct that was made earlier in the code and divides it by 3 and multiplies it by 100 to get a percent. Then it also has the back button inside of the function, so that if you click the button it sends you back to the beggining screen and it resets all the variables. This is a very usefull function because instead of having to say the entire code block over and over again, we can just call the function finish() . Successes . Some of our success came form the onEvent block because it was very easy to use and allowed us to save a lot of time without our code. This Onevent block led to us ultimately creating a working quiz that enabled me and safin to combine the quizes that we made. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Codeorgblog",
            "relUrl": "/csp/Codeorgblog",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post103": {
            "title": "Time Box Fragments",
            "content": "Week link link   . 0 | Alex’s First Blog Post | Fastpages Notebook Blog Post | Extra info about myself! | . 1 | Bash Notes | Bash toolset validation | Jupyter Notebook quiz | . 2 | Lists, Dictionaries, Iteration | Time Box Fragments |   | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/WeeklyLog",
            "relUrl": "/csp/WeeklyLog",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post104": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDb with extra entries . Purpose of this cell is to define InfoDb and add entries about certain people and traits that they have . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . For loop to print out InfoDb . Purpose of this independent cell is to use a normal loop that goes through Infodb printint out all the entries. The for loop automates the process so we do not have to manually print out all the enries by hand. . for item in InfoDb: #print function that goes through and formats print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,item[&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . While loop to print out InfoDb . The purpose of this independent cell block is use a while loop to go print out InfoDb while a certain variable is less than the length of InfoDb. This allows us to print out the data without manually inputting the values to the console . #Sets number to the length of InfoDb number = len(InfoDb) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) i+=1 . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . for loop with index to print out InfoDb . The purpose of this independent code cell is to use a for loop with an index that will go over all the data in infoDB without having to manually print out every single statement. The for loop will repeat the print function for every single entry in InfoDb . for i in range(len(InfoDb)): #prints out the items for every i in the InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Recursion to print out all of InfoDb . This recursion which utilizes a function to print out all the data in InfoDb is used to automate the printint process so we will not have to manually print out every single line. It uses a function that also uses embedded if statements that also calls itself at the end. This allows us to go over every single entry inside of InfoDb. . #sets variable n equal to the length of Info Db n = len(InfoDb) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Phone: {} &quot;&quot;&quot;.format(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], InfoDb[i][&quot;DOB&quot;], InfoDb[i][&quot;Residence&quot;], InfoDb[i][&quot;Email&quot;], InfoDb[i][&quot;Phone&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Outputting data in Reverse Order . Names_of_basketball_players = [&quot;Lebron James&quot;, &quot;Kobe Bryant&quot;, &quot;Chris Paul&quot;, &quot;Kevin Durant&quot;, &quot;Jason Tatum&quot;, &quot;Paul George&quot;, &quot;Kyrie Irving&quot;] #prints the list out in reverse order print(Names_of_basketball_players[::-1]) . [&#39;Kyrie Irving&#39;, &#39;Paul George&#39;, &#39;Jason Tatum&#39;, &#39;Kevin Durant&#39;, &#39;Chris Paul&#39;, &#39;Kobe Bryant&#39;, &#39;Lebron James&#39;] . Quiz That stores into a dictionary . The purpose of this code block is to test for basic animal trivia and it does this through multiple functions that stores the answers and questions in a dictionary. It calls back to the dictionary using for loops and then embedded whithin the for loops, it calls back to the function to print out the question and take input. . def question_and_answers(input): #function that prints out the question and takes in input print(&quot;Question: &quot; + input) correct = 0 #percent correct variable #dictionary with answers questions_answers = [{&quot;Whats the largest mammal&quot; : &quot;blue whale&quot;, &quot;whats the fastest animal&quot; : &quot;cheetah&quot;, &quot;what color is a flamingo&quot; : &quot;pink&quot;, &quot;Whats is the tallest animal&quot; : &quot;giraffe&quot;}] for i in questions_answers: for question, answer in i.items(): question_and_answers(question) # calls back to the questionanswer function response = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if response.lower() == answer: # if the answer provided is correct print(response, &quot;is correct&quot;) correct += 1 else: # if the answer provided is wrong print(response, &quot;is wrong&quot;) print(correct/4*100, &quot;%&quot;) #outputs the correct variable as a percentage . Question: Whats the largest mammal blue whale is correct Question: whats the fastest animal cheetah is correct Question: what color is a flamingo pink is correct Question: Whats is the tallest animal giraffe is correct 100.0 % .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/python_lists_dictionaries",
            "relUrl": "/csp/python_lists_dictionaries",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post105": {
            "title": "Basetball Data",
            "content": "Stats . This is a table that contains stats about my favorite players . Player Name Age Height wieght . Kevin Durant | 33 | 6’10 | 240 lb | . Stephen Curry | 34 | 6’2 | 185 lb | . Kyrie Irving | 30 | 6’2 | 195 lb | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BasketballData",
            "relUrl": "/csp/BasketballData",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post106": {
            "title": "Resume",
            "content": "Alex Kumar . 15489 Tanner Ridge Road, San Diego, CA 92127 . (858)-757-6371 . alex.k.kumar@gmail.com . Education . Del Norte High School (Junior) . 4.14 GPA . | Completed AP Calculus AB, AP Chemistry . Currently enrolled in AP Computer Science Principles, AP Physics, AP Calculus BC . | . | . Work Experience . Code Ninjas: Code Sensei (2022 - Present) . Led robotics camps, and guided students through the process of coding and engineering robots . | Used JavaScript, C#, Python, and Java to teach core computer science concepts . | . Extracurriculars . Soles In need: Treasurer (2022 - present) . Organize and plan meetings and keep track of funding and donations . Worked with team to collect hundreds of shoes to donate to those in need . | . | Engage audiences during school activities using public speaking skills . | . Del Norte Cultural Diversity Club: President (2021 - present) . Teaching and spreading knowledge about various cultures . | Public speaking to audiences to teach and create a better environment . | . STEM Enablers: Vice-President (2021 - Present) . Teach students topics like Chemistry and math . | Collect donations to distribute to other non-profits . | . Sports . Varsity Basketball (2021 - Present) . Volunteered to coach younger athletes . | Helped organize and coordinate team bonding events . | . Varsity Track and Field (2021 - Present) . Led the jumps team and got ranked regionally for triple jump and high jump . | . Skills . Excellent worker with Office 360 (Excel, PowerPoint, docs) . | Experience using various packages in python, including Pandas, NumPy, Matplotlib, TensorFlow, Scikit-Learn . | Knowledge in machine learning models, including artificial neural networks, K-Nearest-Neighbors, Linear regression, and logistic regression . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/09/02/Resume.html",
            "relUrl": "/2022/09/02/Resume.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post107": {
            "title": "Physic Notes",
            "content": "Purpose Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through a graphical method. In using graphical methods, we will learn about linearization and the use of it to create a mathematical model. . Procedure: . Find the radius of the discs with a ruler . | Find the mass of the discs using scale . | Graph the data on a non linear graph . | Record equation . | Change the axis and linearize graph . | Record graph and equations . | Height(mm) Mass(g) Radius   Radius Squared . 0.003125 cm | 0.69 g | 6.75 cm |   | 45.256 cm2 | . 0.003125 cm | 0.36 g | 5.25 cm |   | 27.5625 cm2 | . 0.003125 cm | 0.21g | 4.25 cm |   | 18.0625 cm2 | . 0.003125 cm | 0.13 g | 3.25 cm |   | 10.6525 cm2 | . 0.003125 cm | 0.06 g | 2.25 cm |   | 5.0625 cm2 | . Volume and mass increase proportionally (because the density is the same) so the only thing that is changing in this lab is the area which is piR2 so it is changing proportionally to r2. Since everything else is constant, we are able to ignore them and we are given a linear relationship between r2 and mass. . Graph #1 : Mass vs. Radius . Equation: 0.02547x^2- 0.091328x + 0.143184 . Graph #2: Linearization of Graph #1 (Mass vs radius2) . . Equation: 0.015585x -0.042943 . Work: . . Analysis Questions . 1. Considering the mathematical relationship between disk radius r and disk mass m . (equation 4), what does the independent variable from your line of best fit represent? . The independent variable from the line of best fit represents the radius of the aluminum disk because the mass is dependent on the radius therefore the radius is considered the independent variable . | . 2. Use the mathematical relationship between mass of the disk m and the disk’s . radius r to equate the coefficient values from your line of best fit to physical . quantities. What are the units for each? . . The slope represents the constants (density, pi, and height). In the equation that we made, the slope shows that mass and radius^2 are proportional. . 3. Should you adjust the best-fit line to be sure it passes through the origin, (0,0)? . Justify your answer. . No, you shouldn’t, because the y-intercept can help show that the data has an error, and moving it to fit (0,0) would hide the error and display false results. . 4. Using the slope of your best fit line and your measured value for disk thickness, . determine the experimental value for the disk material density. How does this value . compared to the theoretical value provided by your teacher? What is your percent . Error? . Theoretical density = 2.7 g/cm^3 . Percent difference = 42.8% . . 5. What are some of the factors that may have caused error and how might these . Factors have been prevented? . Some of the factors that may cause the error are manual and non digital measurement. For example the radius measurements and the thickness measurements. To prevent these human errors, we could use digital measurements to get the exact values. . Synthesis Questions: . In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . | The slope of the line of best fit would change because if the thickness increases, the mass would increase and in order for the equation to stay accurate, the slope will have to increase because mass is the dependent variable. The density would be the same because mass and the volume would still increase proportionally. . How would your graph of m versus r2 be different if you had used disks of the same thickness, but made out of steel? Draw a second line on your m versus r2 plot that represents disks made of steel. . | The line would be different because the slope would be different. The density of steel is 7.85 g/cm^3 however the density of aluminum is 2.7 g/cm^3. In this lab, the slope is pi*height*density and since the density is different by a factor of 2.5, the slope of the steel graph will be 2.5 times greater. . Aluminum equation/graph: 0.015585x -0.042943 . Steel equation/graph: 0.035067x-0.096621 . . 3. Another group of students has acquired data for the exact same experiment; . however, their disks are made of an unknown material that they are trying to . determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . . Multiple Choice questions: . 1. You perform the same experiment, but this time you plot a linear relationship . between mass and the circumference of the disks rather than the radius. What is the . slope of the linear plot? . E . 3. Consider an experiment in which a student measures the mass and diameter of 10 . different-sized spheres, all made of the same material of uniform density ρ. For this . student to create a linear graph relating the mass of the sphere to its radius r, the . student would need to plot mass m versus which quantity: . C . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/09/02/Physic-Notes.html",
            "relUrl": "/2022/09/02/Physic-Notes.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post108": {
            "title": "HTML and markdown Fragments",
            "content": "Changing Theme from Minima to DarkMode . Some things that I noticed when changing the theme to darkmode was that I could not do it through the index.htmlm and I was forced to do it through the _sass file. . The entire background including the header and footer was changed to black ad the text was changed | the fonts where changed and the color changed to white | One thing that I had to come accross was the the fonts did not contrast well because it was just black and white and I did not really like that. | Another thing was that the font was different, although it was still legible I liked the old one better | the installation process of getting the themes in was creating a new folder in the _sass folder and putting the darkmode code it, and the process was very smooth | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/HTMLMarkdownFragments",
            "relUrl": "/csp/HTMLMarkdownFragments",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post109": {
            "title": "Bash toolset validation",
            "content": "Automating gitfile cloning . export project_dir=$HOME/vscode export project=$project_dir/fastpages-APCSP export project_repo=&quot;https://github.com/AlexKumar19/fastpages-APCSP.git&quot; #checks for vscode directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists...creating directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Checks for the project repository clone, otherwise it clones if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Directory /home/alexkumar/vscode exists. Directory /home/alexkumar/vscode/fastpages-APCSP exists. . Python Version . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . TestForPackage(){ echo &quot;Test if $1 was downloaded via conda&quot; if conda list | grep -q $1; then echo &quot;There is $1&quot; else echo &quot;There is no $1&quot; fi } #Calls the function to test for packages TestForPackage &quot;jupyter&quot; TestForPackage &quot;nodejs&quot; . Test if jupyter was downloaded via conda There is jupyter Test if nodejs was downloaded via conda There is nodejs . Jupyter Checks . TestForKernellInstallation(){ #outputs test echo &quot;Test if $1 was installed&quot; #checks jupyter kernelspec list to find the called package if jupyter kernelspec list | grep -q $1; then echo &quot;There is $1&quot; else echo &quot;There is no $1&quot; fi } #calls the function for certain packages TestForKernellInstallation &quot;bash&quot; TestForKernellInstallation &quot;javascript&quot; TestForKernellInstallation &quot;python3&quot; . Test if bash was installed There is bash Test if javascript was installed There is javascript Test if python3 was installed There is python3 . conda list jupyter kernelspec list . # packages in environment at /home/alexkumar/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 Available kernels: bash /home/alexkumar/.local/share/jupyter/kernels/bash javascript /home/alexkumar/.local/share/jupyter/kernels/javascript python3 /home/alexkumar/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BashToolsetCheck",
            "relUrl": "/csp/BashToolsetCheck",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post110": {
            "title": "APCSP Bash Notes 08/25/22",
            "content": "Bash . cd #cd stands for &quot;change directory&quot; cd vscode #goes to vscode directory Ls #tells the user the directory . Bash allows us to create scripts that can automatically download packages and navigate the terminal . Cloud . The cloud is up in the skies near the moon and it allows us to clone repositories down to our solid state drive. This allows us to edit the repositories on out own devices remotely. When you pull, you update your clone and when you push, it adds your changesinto the repository .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BashNotes",
            "relUrl": "/csp/BashNotes",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post111": {
            "title": "Blog Post Notes 08/24/22",
            "content": "Front Matter . Each markdown or jupyter post contains a set configurations at the head of the file known as Front-Matter. Front-matter settings can change many things including TOC, author, and you can also hide documents . &gt; Basics of Python quiz - toc:true - badges: true - author: Alex Kumar - comments: true - categories: [jupyter, csp] . This is an example of front matter and this will set the author, tags, and allow comments . _config.yml . lots of defautl settings can be changed whithin the repositories config file. This allows for pictures and description extensions. This allows for more customization. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BlogPostNotes",
            "relUrl": "/csp/BlogPostNotes",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post112": {
            "title": "Extra info about myself!",
            "content": "Extra info about myself: Hi my name is alex, and some things that I enjoy about school is going to my basketball practice, I enjoy doing ceramics, and I really love to go to physics class .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/aboutme/2022/08/22/Aboutme.html",
            "relUrl": "/markdown/aboutme/2022/08/22/Aboutme.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post113": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Python . Using python to pring &quot;Hello&quot; . print(&#39;Hello world, this is Alex Kumar&#39;) . Hello world, this is Alex Kumar . info =&#39;I like to play basketball and I also enjoy going to the gym&#39; print(&quot;Here are some things about me: &quot; + info) . Here are some things about me:I like to play basketball and I also enjoy going to the gym . import requests url = &quot;https://open-weather13.p.rapidapi.com/city/landon&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;open-weather13.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;coord&#34;:{&#34;lon&#34;:-89.1028,&#34;lat&#34;:30.438},&#34;weather&#34;:[{&#34;id&#34;:800,&#34;main&#34;:&#34;Clear&#34;,&#34;description&#34;:&#34;clear sky&#34;,&#34;icon&#34;:&#34;01d&#34;}],&#34;base&#34;:&#34;stations&#34;,&#34;main&#34;:{&#34;temp&#34;:72.68,&#34;feels_like&#34;:72.46,&#34;temp_min&#34;:71.58,&#34;temp_max&#34;:75.04,&#34;pressure&#34;:1020,&#34;humidity&#34;:60},&#34;visibility&#34;:10000,&#34;wind&#34;:{&#34;speed&#34;:17.27,&#34;deg&#34;:130},&#34;clouds&#34;:{&#34;all&#34;:0},&#34;dt&#34;:1680207755,&#34;sys&#34;:{&#34;type&#34;:1,&#34;id&#34;:4248,&#34;country&#34;:&#34;US&#34;,&#34;sunrise&#34;:1680176886,&#34;sunset&#34;:1680221608},&#34;timezone&#34;:-18000,&#34;id&#34;:4429197,&#34;name&#34;:&#34;Landon&#34;,&#34;cod&#34;:200} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/jupyter/aboutme/2022/08/21/firstjuypternotebook.html",
            "relUrl": "/jupyter/aboutme/2022/08/21/firstjuypternotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post114": {
            "title": "Alex's first blog post!",
            "content": "Hello, my name is alex and this is a sample markdown post. I have many hobbies that I do in my free time: Playing basketball, track and field, going to the beach, and playing with my dog! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/aboutme/2022/08/20/Post.html",
            "relUrl": "/markdown/aboutme/2022/08/20/Post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post115": {
            "title": "HTML and markdown Fragments",
            "content": "Changing Theme from Minima to DarkMode . Some things that I noticed when changing the theme to darkmode was that I could not do it through the index.htmlm and I was forced to do it through the _sass file. . The entire background including the header and footer was changed to black ad the text was changed | the fonts where changed and the color changed to white | One thing that I had to come accross was the the fonts did not contrast well because it was just black and white and I did not really like that. | Another thing was that the font was different, although it was still legible I liked the old one better | the installation process of getting the themes in was creating a new folder in the _sass folder and putting the darkmode code it, and the process was very smooth | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/HTMLMarkdownFragments",
            "relUrl": "/csp/HTMLMarkdownFragments",
            "date": " • Sep 2, 2020"
        }
        
    
  

  
  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}