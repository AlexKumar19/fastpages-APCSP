{
  
    
        "post0": {
            "title": "Jupyter Notebook quiz",
            "content": "This is a quiz that will go over the basic vocabulary that was covered in the the jupyter document. . correct = 0 #function that takes in the question and the answer, then it determines whether the input is correct or incorrect then changes the variable correct depending on the answer def question(prompt, answer): #prints the question print(&quot;Question: &quot; + prompt) #takes in the input msg = input() #checks if the answer is correct or not if (msg).lower() == answer: #prints if the message is correct print(msg + &quot; is correct!&quot;) #changes the correct variable global correct correct += 1 #checks to see if its false else: #prints out that the answer is false print(msg + &quot; is incorrect!&quot;) #Questions questions = [(&quot;What function woud you use to output text?&quot;,&quot;print&quot;), (&quot;What function would you use to take input from the user?&quot;,&quot;input&quot;), (&quot;What keyword do you use to define a function?&quot;, &quot;def&quot;),(&quot;what function checks whether or not a certain condition is true or false?&quot;, &quot;if&quot;)] for i in questions: question(i[0] ,i[1]) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Question: What function woud you use to output text? print is correct! Question: What function would you use to take input from the user? input is correct! Question: What keyword do you use to define a function? if is incorrect! Question: what function checks whether or not a certain condition is true or false? if is correct! You got 75% .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/JupyterNotebookquiz/",
            "relUrl": "/csp/JupyterNotebookquiz/",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDb with extra entries . Purpose of this cell is to define InfoDb and add entries about certain people and traits that they have . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . For loop to print out InfoDb . Purpose of this independent cell is to use a normal loop that goes through Infodb printint out all the entries. The for loop automates the process so we do not have to manually print out all the enries by hand. . for item in InfoDb: #print function that goes through and formats print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,item[&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . While loop to print out InfoDb . The purpose of this independent cell block is use a while loop to go print out InfoDb while a certain variable is less than the length of InfoDb. This allows us to print out the data without manually inputting the values to the console . #Sets number to the length of InfoDb number = len(InfoDb) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) i+=1 . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . for loop with index to print out InfoDb . The purpose of this independent code cell is to use a for loop with an index that will go over all the data in infoDB without having to manually print out every single statement. The for loop will repeat the print function for every single entry in InfoDb . for i in range(len(InfoDb)): #prints out the items for every i in the InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Recursion to print out all of InfoDb . This recursion which utilizes a function to print out all the data in InfoDb is used to automate the printint process so we will not have to manually print out every single line. It uses a function that also uses embedded if statements that also calls itself at the end. This allows us to go over every single entry inside of InfoDb. . #sets variable n equal to the length of Info Db n = len(InfoDb) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Phone: {} &quot;&quot;&quot;.format(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], InfoDb[i][&quot;DOB&quot;], InfoDb[i][&quot;Residence&quot;], InfoDb[i][&quot;Email&quot;], InfoDb[i][&quot;Phone&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Outputting data in Reverse Order . Names_of_basketball_players = [&quot;Lebron James&quot;, &quot;Kobe Bryant&quot;, &quot;Chris Paul&quot;, &quot;Kevin Durant&quot;, &quot;Jason Tatum&quot;, &quot;Paul George&quot;, &quot;Kyrie Irving&quot;] #prints the list out in reverse order print(Names_of_basketball_players[::-1]) . [&#39;Kyrie Irving&#39;, &#39;Paul George&#39;, &#39;Jason Tatum&#39;, &#39;Kevin Durant&#39;, &#39;Chris Paul&#39;, &#39;Kobe Bryant&#39;, &#39;Lebron James&#39;] . Quiz That stores into a dictionary . The purpose of this code block is to test for basic animal trivia and it does this through multiple functions that stores the answers and questions in a dictionary. It calls back to the dictionary using for loops and then embedded whithin the for loops, it calls back to the function to print out the question and take input. . def question_and_answers(input): #function that prints out the question and takes in input print(&quot;Question: &quot; + input) correct = 0 #percent correct variable #dictionary with answers questions_answers = [{&quot;Whats the largest mammal&quot; : &quot;blue whale&quot;, &quot;whats the fastest animal&quot; : &quot;cheetah&quot;, &quot;what color is a flamingo&quot; : &quot;pink&quot;, &quot;Whats is the tallest animal&quot; : &quot;giraffe&quot;}] for i in questions_answers: for question, answer in i.items(): question_and_answers(question) # calls back to the questionanswer function response = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if response.lower() == answer: # if the answer provided is correct print(response, &quot;is correct&quot;) correct += 1 else: # if the answer provided is wrong print(response, &quot;is wrong&quot;) print(correct/4*100, &quot;%&quot;) #outputs the correct variable as a percentage . Question: Whats the largest mammal blue whale is correct Question: whats the fastest animal cheetah is correct Question: what color is a flamingo pink is correct Question: Whats is the tallest animal giraffe is correct 100.0 % .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/python_lists_dictionaries",
            "relUrl": "/csp/python_lists_dictionaries",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Algorithms and logic",
            "content": "This uses python to make a fibonacci sequence . def fibonacci(n): numbers = [] for i in range(n): if i == 0 : print(&quot;0&quot;) numbers.append(0) elif i ==1 : print(&quot;1&quot;) numbers.append(1) else: print(numbers[i-2] +numbers[i-1]) numbers.append(numbers[i-1] + numbers[i-2]) fibonacci(10) # calls the function fibonacci and gives in 10 . 0 1 1 2 3 5 8 13 21 34 . This also runs the fibonacci however in javascript . function fibonacci(n) { var numbers = [] for (let i = 0; i &lt; n; i++) { if (i===0) { numbers.push(0) console.log(&quot;0&quot;) } else if (i===1) { numbers.push(1) console.log(&quot;1&quot;) } else { numbers.push(numbers[i-2] + numbers[i-1]) console.log(numbers[i-2] + numbers[i-1]) } } } fibonacci(7) . 0 1 1 2 3 5 8 . This uses javascript and html to test for a palindrome . // &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;give palindrome&quot; class=&quot;form-control&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;text&quot; placeholder=&quot;palindrome?&quot; class=&quot;form-control&quot;&gt; &lt;script&gt; var input = document.getElementById(&quot;input&quot;) document.getElementById(&quot;input&quot;).addEventListener(&quot;change&quot;, Palindrome); function Palindrome() { console.log(document.getElementById(&quot;input&quot;).value) const word = document.getElementById(&quot;input&quot;).value var reverse = &quot;&quot; for (var i = word.length - 1; i &gt;= 0; i--) { reverse += word[i]; } console.log(reverse) if (reverse== word) { document.getElementById(&quot;text&quot;).value = &quot;this is a palindrome&quot; } else { document.getElementById(&quot;text&quot;).value = &quot;this is not a palindrome&quot; } } &lt;/script&gt; . . TRUTH TABLE . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {/* &lt;p id=&quot;text1&quot; style=&quot;padding: 15px; line-height: 1.6; border: 1px solid white; width: 150px&quot;&gt; &lt;script&gt; */} function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() &lt;/script&gt; . Come up with a Procedure/Function that show... . The function that I created is the truth function that generates a truth table using binary data . Data Abstraction . uses an array of arrays with binary data that will represent the rows in the truth table Procedural Abstraction | I made a truth function that runs an algorithm that populates the truth table, this can be called to multiple times because it is a function Algorithm using iteration and selection | I used multiple loops to parse through the binary data and evaluate the binary logic to determine whether the statements where true | if statements can be used to check if the binary logic was true or not Frontend / Backend, using an API and persistent storage | made html text box that was populated by the javascript | . &lt;/div&gt; .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Algorithmsandlogic",
            "relUrl": "/csp/Algorithmsandlogic",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) # Outputs the quote using print() . Your random inspirational quote is, &#34;The bad news is time flies. The good news is you’re the pilot.&#34; -- –Michael Altshuler . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random #importing packages import math from flask import Flask, request app = Flask(__name__) # Creating the flask application # Creating the array of quotes for the API to parse through quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] # Creates a function that uses random to generate a random number whithin the range of the quotes array def randomgen(): number = int(random.random()*len(quotes)) return number # Creating the GET endpoint, so when we call it using /get, it will call to the randomgen function and return the quote from the array @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;Your quote is&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Hacks for Unit 3.9 to 3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) . It is important to know that algorithms that look different can do the same thing so that when working with others and people have various codes it is important to open your mind to understand the code rather than rejecting it because it looks differet. It is also important to know that even code that looks similar can have different purposes so we dont jump to conclusions when evaluating code for the converted conditional to boolean conversion(0.10) total: 0.25 | . sun = False raincloud = True if sun == True: print(&quot;it is sunny&quot;) else: if raincloud == True: print(&quot;it is cold and rainy&quot;) else: print(&quot;not rainy or hot&quot;) . it is cold and rainy . sun = False raincloud = True sunny = not(raincloud) and sun if sunny == True: print(&quot;it is sunny&quot;) if sunny ==False: print(&quot;it is not sunny&quot;) . it is not sunny . 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . If the party has a size 1 the cost is 10 If the party has size 2 the cost is 15 If the party has size 3 then the cost is 20 if the party has size 4 then the cost is 25 print the cost of the party . . partysize = 4 if partysize ==1: print(&quot;cost is 10&quot;) elif partysize ==2: print(&quot;cost is 15&quot;) elif partysize ==3: print(&quot;cost is 20&quot;) elif partysize ==4: print(&quot;cost is 25&quot;) . cost is 25 . 3.9.3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game Make a function that gets the user guess Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): out = input(&quot;What number?&quot;) return out #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;below the actual&quot;) #change this lower_bound = guess elif int(guess) &gt; int(number): print(&quot;above the actual&quot;) #change this upper_bound = guess elif int(guess) == int(number): upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 50. above the actual Guess a number between 0 and 50. You guessed 30. above the actual Guess a number between 0 and 30. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 5. below the actual Guess a number between 5 and 10. You guessed 7. below the actual Guess a number between 7 and 10. You guessed 8. below the actual Guess a number between 8 and 10. You guessed 9. You guessed the number in 8 guesses! . Hacks: calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . . One = [12,14,44,57,79,80,99] Two = [92,43,74,66,30,12,1] Three = [7,13,96,111,33,84,60] Lists = [One, Two, Three] # loops through the range of the length of lists for x in range(len(Lists)): #sorts the list in order Lists[x].sort() #takes the middle index middleindex = int(len(Lists[x])/2) #outputs print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,Lists[x][middleindex]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . c is out of orderso therefore it is c .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/3111hacks",
            "relUrl": "/csp/3111hacks",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Hacks for Unit 3.17 and 3.18",
            "content": "Hacks/Assignment Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . num = [] count = 0 def collatz(i): global count global num while i &gt; 1: if (i % 2): # i is odd i = 3*i + 1 count +=1 num.append(i) else: # i is even i = i//2 count +=1 num.append(i) else: print(count) print(num) i = int(input(&#39;Enter i: &#39;)) collatz(i) . 5 [16, 8, 4, 2, 1] . Hacks/assignment Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] sum = num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] +num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] sum2 = sum + sum +sum + sum + sum + sum + sum + sum + sum + sum + sum +sum + sum + sum + sum + sum + sum + sum print(sum2) . 3600 . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] print(36*sum(num)) . 3600 . The bottom one is more efficient because it uses built in functions to add the numbers instead of having to add each one individually which takes a long time. Then adding the sum everytime is even more inneficient . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] if True: sum = 0 for i in num: sum += num[i-1] print(sum*36) . 3600 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/317hacks",
            "relUrl": "/csp/317hacks",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date, datetime from dateutil.relativedelta import relativedelta def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) def jsonSerial(obj): &quot;&quot;&quot;JSON serializer for objects not serializable by default json code&quot;&quot;&quot; if isinstance(obj, (datetime, date)): return obj.isoformat() raise TypeError (&quot;Type %s not serializable&quot; % type(obj)) class User: def __init__(self, name, uid, password, ClassOf, dob): self._name = name self._uid = uid self._ClassOf = ClassOf self.dob = dob self.set_password(password) @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict @property def ClassOf(self): return self._ClassOf @ClassOf.setter def ClassOf(self, ClassOf): self._ClassOf = ClassOf @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; def __str__(self): return json.dumps(self.dictionary) def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; def __str__(self): return json.dumps(self.dictionary) def ToJSON(self): ret = { &#39;name&#39;: self.name, &#39;age&#39;: calculate_age(self.dob), &#39;uid&#39;: self.uid, &#39;classOf&#39;: self.ClassOf } return json.dumps(ret, default = jsonSerial) def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; def tester(users, uid, psw): result = None for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(str(user)) return result def __str__(self): return json.dumps(self.dictionary, default = jsonSerial ) if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Safin&#39;, uid=&#39;bobby&#39;, password=&#39;bobby11&#39;,dob = date(2006, 2, 11), ClassOf = 2024) u2 = User(name=&#39;Kaiden&#39;, uid=&#39;billy&#39;, password=&#39;123bill&#39;,dob = date(2005, 7, 10), ClassOf = 2024) u3 = User(name=&#39;Amay&#39;, uid=&#39;may&#39;, password=&#39;123may&#39;,dob = date(2006, 3, 3), ClassOf = 2024) u4 = User(name=&#39;Bron&#39;, uid=&#39;bronny&#39;, password=&#39;123bronnn&#39;,dob = date(1989, 12, 8), ClassOf = 2000) u5 = User(name=&#39;David&#39;, uid=&#39;vid&#39;, password=&#39;123vidd&#39;,dob = date(2006, 11, 9), ClassOf = 2024) users = [u1, u2, u3, u4, u5] . for i in users: print(&quot;Here is info about&quot;, i.name + &quot;, n t&quot; ,i) print(&quot;Here is a representation of the class instance of &quot;, i.name,&quot; n t&quot; + repr(i)) print(&quot;Here is a non-json description&quot;, &quot;name:&quot;, i.name, &quot;age:&quot;, i.age, &quot; n n&quot;) . Here is info about Safin, {&#34;name&#34;: &#34;Safin&#34;, &#34;uid&#34;: &#34;bobby&#34;, &#34;dob&#34;: &#34;2006-02-11&#34;, &#34;age&#34;: 16} Here is a representation of the class instance of Safin User(name=Safin, uid=bobby, password=sha256$2pvob4zLDf1wuhyp$af8363b52f67f598b3aafd0ac75b399cfa0ac70fdbe909f56db1f00ffc0758c6,dob=2006-02-11) Here is a non-json description name: Safin age: 16 Here is info about Kaiden, {&#34;name&#34;: &#34;Kaiden&#34;, &#34;uid&#34;: &#34;billy&#34;, &#34;dob&#34;: &#34;2005-07-10&#34;, &#34;age&#34;: 17} Here is a representation of the class instance of Kaiden User(name=Kaiden, uid=billy, password=sha256$RtxVdTx3P3xIhlPt$b56ad6f232b28c5cb10fd6ca469d0c219c7d08cc7e34119a36f25c765f03da29,dob=2005-07-10) Here is a non-json description name: Kaiden age: 17 Here is info about Amay, {&#34;name&#34;: &#34;Amay&#34;, &#34;uid&#34;: &#34;may&#34;, &#34;dob&#34;: &#34;2006-03-03&#34;, &#34;age&#34;: 16} Here is a representation of the class instance of Amay User(name=Amay, uid=may, password=sha256$y2aI8rskHyuY7qSG$d828972304ae5e2c917fc3b2046cf0903139b5379bce79fe714ac433f194a5bb,dob=2006-03-03) Here is a non-json description name: Amay age: 16 Here is info about Bron, {&#34;name&#34;: &#34;Bron&#34;, &#34;uid&#34;: &#34;bronny&#34;, &#34;dob&#34;: &#34;1989-12-08&#34;, &#34;age&#34;: 33} Here is a representation of the class instance of Bron User(name=Bron, uid=bronny, password=sha256$ma5jJtoeRRKYhFVg$2d97145750ed26c5c4e122d67ea98dfc607eb07c3172beb4e1ca1171a716ecc2,dob=1989-12-08) Here is a non-json description name: Bron age: 33 Here is info about David, {&#34;name&#34;: &#34;David&#34;, &#34;uid&#34;: &#34;vid&#34;, &#34;dob&#34;: &#34;2006-11-09&#34;, &#34;age&#34;: 16} Here is a representation of the class instance of David User(name=David, uid=vid, password=sha256$BfsuMCoaq8hDjPGG$0b19798d8452e6f23dc277b78c787f8bc5623e1763ccfc76c9e29bd8d9f46037,dob=2006-11-09) Here is a non-json description name: David age: 16 . import json class task: def __init__(self, activity, time): self._time = time self._activity = activity @property def activity(self): return self._activity @activity.setter def task(self, activity): self._activity = activity @property def time(self): return self._time @time.setter def time(self, time): self._time = time @property def dict(self): data = { &quot;Activity&quot; : self.activity, &quot;time&quot; :self.time } def __str__(self): return json.dumps(self.dict) def __repr__(self): return f&#39;user(Task={self._activity}, time={self._time})&#39; class1 = task(&quot;Calc&quot;, 20) class2 = task(&quot;CSP&quot;, 50) print(&quot;Person 1 activity :&quot;, class1.activity) print(&quot;person 1 time:&quot;, class1.time, &quot; n&quot;) print(&quot;Person 2 activity :&quot;, class2.activity) print(&quot;person 2 time:&quot;, class2.time) print(repr(class1)) print(repr(class2)) . Person 1 activity : Calc person 1 time: 20 Person 2 activity : CSP person 2 time: 50 user(Task=Calc, time=20) user(Task=CSP, time=50) . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/pbl/2023/01/10/PBL-model.html",
            "relUrl": "/csp/pbl/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Final Blog for teaching",
            "content": "Hacks + Notes . Lesson Hacks Notes Grades . Unit 3 Sections 1-2 | Hacks | Notes | 1 | . Unit 3 Sections 3-4 | Hacks | Notes | 1 | . Unit 3 Sections 5-7 | Hacks | Notes | 0.9 | . Unit 3 Sections 8-10 | Hacks | Notes | 1 | . Unit 3 Sections 9-11 | Hacks | Notes | 0.93 | . Unit 3 Sections 12-13 | N/A | Notes | N/A | . Unit 3 Sections 14-15 | Hacks | Notes | 0.9 | . Unit 3 Sections 16 | Hacks | Notes | 0.9 | . Unit 3 Sections 17-18 | Hacks | Notes | N/A | . Vocab . Bits, Bytes, Hexadecimal / Nibbles: | . A bit is the smallest unit of data, representing either a 0 or a 1. A byte is a unit of digital information that consists of 8 bits. Hexadecimal is a numbering system that represents numbers using the base 16, with the digits 0-9 and A-F. Each hexadecimal digit represents 4 bits, so two hexadecimal digits make up 1 byte. . Binary Numbers: Unsigned Integer, Signed Integer, Floating Point: | . An unsigned integer is a binary number that can only represent positive numbers. A signed integer is a binary number that can represent both positive and negative numbers using a sign bit. A floating point number is a binary number that can represent real numbers with a decimal point. . Binary Data Abstractions: Boolean, ASCII, Unicode, RGB: | . A boolean is a data type that can only have two values: True or False. ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text using numbers. Unicode is a character encoding standard that represents a wide range of characters from various scripts. RGB (Red Green Blue) is a color model that represents colors as a combination of red, green, and blue values. . Data Compression: Lossy, Lossless (note discussed yet): | . Lossy data compression is a method of reducing the size of a file by removing some of the data. This can result in a loss of quality, but the file size is smaller. Lossless data compression is a method of reducing the size of a file without losing any data. The file size is smaller, but the quality is not compromised. . Variables, Data Types, Assignment Operators: | . A variable is a named location in memory that stores a value. Data types define the type of value that a variable can store, such as an integer, a string, or a boolean. Assignment operators are used to assign a value to a variable. In Python, the assignment operator is the equal sign (=). . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: | . A list is an ordered collection of values that can be of any data type. Lists are created using square brackets and the values are separated by commas. For example: my_list = [1, 2, 3] A 2D list is a list of lists, representing a table of values with rows and columns. A dictionary is a collection of key-value pairs, where each key is mapped to a value. Dictionaries are created using curly braces and the key-value pairs are separated by commas. For example: my_dict = {‘key’: ‘value’} A class is a template for creating objects. It defines the properties and methods of the objects. . Algorithms, Sequence, Selection, Iteration: | . An algorithm is a set of steps for solving a problem. Sequence is the order in which statements are executed in a program. Selection is the decision-making process in a program, using control statements such as if-else statements. Iteration is the repetition of a block of code using loops. . Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables: | . An expression is a combination of values, variables, and operators that evaluates to a result. Comparison operators are used . Variables: variables are storage . var = 3 . This is an example of a variabe . Data Types: Some datatypes are string lists . list = [] . This is a list . Assignment Operators: the arrow represents assignment operators . varknow = 6 . we are assigning a value to this . Managing Complexity with Variables: Lists: lists can be used to store many types of data . sports = [&quot;basketball&quot;,&quot;soccer&quot;] . 2D Lists, . list = [] . Dictionaries: very good way to store keys and terms . dict = {&quot;car&quot;:&quot;good&quot;, &quot;cat&quot;:,&quot;bad&quot;} . Class Algorithms, Algorithms help smplify code . def function(): print(&quot;hi&quot;) . def new(): print(&quot;this is a function&quot;): . Sequence: represents the order . print(&quot;this is first&quot;) print(&quot;this is after&quot;) . Selection makes decision based on data . if dog==True: print(&quot;there is a dog&quot;) . Iteration this is aloop . for i in range(5): print(&quot;hi&quot;) . this loops over 5 times . Expressions, Comparison Operators,some comparison terms are like &lt; and &gt; . if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) . Booleans Expressions and Selection, selects if a value is true or not . boolean = True falseboolean = False . Booleans Expressions and Iteration, Truth Tables . function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() . Characters,A word can be split into characters . word = &quot;hi&quot; split = word.split() . Strings, basic values held in a variable . string = &quot;hi&quot; . Length, There is a length function that can get the length of any string . list = [1,2,3,4,5,6] length = len(list) . This gets the length of the list . Concatenation, You can combine databases with this . import pandas pd = pd.concat() . Python If, can check for certain conditions . if boolean=True: print(&quot;any text here&quot;) . Elif, This can be used to check for a second function and this is very useful when choosing between certain conditions . if boolean=True: print(&#39;good&#39;) elif boolean=False: print(&quot;this is bad&quot;) . Else conditionals; . if True: print(&quot;this is true&quot;) else: print(&quot;not possible&quot;) . Nested Selection Statements . if True: if dogs==True: print(&quot;very good&quot;) . This can be used to checkfor many conditions whithin a certain condition, you can nest many conditions . Python For, . for i in range(5): print(i) . While loops with Range, . while i&lt;6: i+= 1 . Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/TableAndTeachingNotes/",
            "relUrl": "/TableAndTeachingNotes/",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Final Blog for teaching",
            "content": "Hacks + Notes . Lesson Hacks Notes Grades . Unit 3 Sections 9-11 | Hacks | Notes | 0.93 | . Unit 3 Sections 12-13 | N/A | Notes | N/A | . Unit 3 Sections 14-15 | Hacks | Notes | 0.9 | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/TableAndTeachingNotes/",
            "relUrl": "/TableAndTeachingNotes/",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Hacks for Unit 3.16",
            "content": "What makes it a simulation? A simulation is a automated process made to replicate a situation to get the output or practice. | . | What are it’s advantages and disadvantages? Some advantages are that it is easier and it takes less resources to actually do vs an experiment where is can be costly and hard. A disadvantage is that it is not as accurate as it does not take into account the outside factors | . | In your opinion, would an experiment be better in this situation? It depends on the situation | . | . Hack #1 (0.3) Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). . You can simulate picking a random card from a deck of cards | Since there are 52 cards you will need to have some type of random number generator and assign each number to a card so when it randomly picks a card it will match it to a number | This is a simulation because it is not real and uses code to replicate | Its easier than actually picking a card however it is not accurate | I think an experiment would be better because sometimes when picking cards it is not alwas exactly random | . Hack #2 (0.1) Simulations Quiz (either screenshot or paste quiz in your notebook) . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 (0.2) Describe the rolling dice simulation (answer guiding questions) . This rolling dice simulation is a simulation because you are not actually rolling the dice instead you are creating code to replicate it. | It is more efficient and you don&#39;t actually need the dice to replicate it. It is less accurate than having an experiment because depending on the way you roll the dice it is not always exactly random | In my opinion I think that in order to have proper results, rolling the dice by hand would be better because there are definitely outside factors | . Hack #4 (0.3) Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) Colors = [] # New Feature for i in roll_results: if i == 1: Colors.append(&quot;red&quot;) if i ==2: Colors.append(&quot;blue&quot;) if i==3: Colors.append(&quot;black&quot;) if i ==4: Colors.append(&quot;green&quot;) if i ==5: Colors.append(&quot;grey&quot;) if i ==6: Colors.append(&quot;purple&quot;) print(&quot;random colors:&quot;, Colors) . random colors: [&#39;blue&#39;, &#39;purple&#39;, &#39;blue&#39;] . Extra Credit (0.1) For the extra 0.1: try coding a simple simulation and describe it (guiding question) . import random num = random.randrange(0,5) weather = [&quot;rainy&quot;, &#39;thunder&#39;, &#39;snowy&#39;, &#39;windy&#39;, &#39;sunny&#39;] print(weather[num]) . rainy . In this simulation that I created, it uses the random library to get a random number in the range (0,5) Once this number is generated it goes through the weather list and goes in with the index of the random numer to generate a random weather This is a good simulation because it generates a random weather and this can show the weather of a day . This is a simulation because it is just generating a random weather based off of code rather than real life factors | Its good because it is easy to use and you do not need access to expensive weather measuring tools however it is definitely innaccurate | I think it would be better to have a real experiment because this way in my simulation, it is innacurate | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/316hacks",
            "relUrl": "/csp/316hacks",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Technical Business Panel",
            "content": "Kathyleen Beveridge . Worked with Mort in Qualcomm | MBA at USC | finance major | first job as an investment banker, on track to sell stocks and be a stockbroker | The major was not for her and changed career to tech | started for high tech career and went to qualcomm | left 5 years ago from qualcomm | Thermo Fisher as high tech major HP- Create tech that makes life better for everyone everywhere | qualcomm - inventing tech the world loves | all these companies are trying to use tech to make the world better | . | Thermo Fisher - Enable our customers to make the world healthier cleaner and safer | 125k employees | Many scientists and engineers that makes extremely high revenues | Senior Director of marketing | Aims to create big impacts on the world Kris Porter . | Livermore high school alum | enrolled at UCLA electrical engineering | enjoyed stem a lot | worked in the cs classes and did bad, got Cs however came back to the computer science field | Center for embedded networked sensors info mechanical systems | . | learned about linux operating software | as he graduated stocks crashed no companies hired, had to look for jobs | 2010 joined a startup with email marketing | devops is what checks that everything works or stopping hackers when pushing your site | worked to secure sites and encrypting the websites | after devops worked for NBC universal streaming software | moved to san diego because if his girlfriend | Mr Mort hired him to work at qualcomm | gained lots of experience at qualcomm | then worked at twitter, still currently working at twitter | Machine learning experience at qualcomm CCNA training learned about python streaming media infrastructure for 2012 olympics Twitter projects Data centers Migrating home timeline to graphQL What is graphQL? does not work for twitter anymore | half the company got laid off, including his team | gitlab using machine learning to figure out when to delete repositories using ML model depending on who is downloading data from it | the ML model helped save money and allowed for them to delete unused repositories | python libraries keras and sql used to make models | . Important skills: continuous learning, always learn more keep learning new languages and infrastructure always keep learning, any opportunity that leads to more learning is good don’t be concerned about money and other things as long as you are still learning Qualcomm is a semiconductor industry and the company had to go around acquiring new companies . coding changes the way you think and changes your problem solving mindset | this mindset can be applied to many different feilds | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BusinessPanel/",
            "relUrl": "/BusinessPanel/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Hacks for Unit 3.17 and 3.18",
            "content": "Hacks/Assignment Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . num = [] count = 0 def collatz(i): global count global num while i &gt; 1: if (i % 2): # i is odd i = 3*i + 1 count +=1 num.append(i) else: # i is even i = i//2 count +=1 num.append(i) else: print(count) print(num) i = int(input(&#39;Enter i: &#39;)) collatz(i) . 5 [16, 8, 4, 2, 1] . Hacks/assignment Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] sum = num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] +num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6] + num[7] + num[8] + num[9] + num[10] + num[11] + num[12] + num[13] + num[14] + num[15] + num[16] + num[17] + num[18] sum2 = sum + sum +sum + sum + sum + sum + sum + sum + sum + sum + sum +sum + sum + sum + sum + sum + sum + sum print(sum2) . 3600 . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] print(36*sum(num)) . 3600 . The bottom one is more efficient because it uses built in functions to add the numbers instead of having to add each one individually which takes a long time. Then adding the sum everytime is even more inneficient . num = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] if True: sum = 0 for i in num: sum += num[i-1] print(sum*36) . 3600 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/317hacks",
            "relUrl": "/csp/317hacks",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Extended blog for notes after Unit 3 section 14",
            "content": "Unit 3 Sections 14 and 15 . Section 3.14.1 - Libraries . Software library contains procedures | segments of code come from sources | libraries simplify complex algorithms | APIs or application program interfaces specify how a librarycan be used | For librarys, you can call to them in order to addfunctions | libraries have a period that tells the program to look for the library | . import math math.sqrt(64) . This is an example of a library . import random random.randrange() . This allows to import random numbers easily using a library . Lesson 3.15.1 . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . This code goes over the libraries mentioned before and can generate random numbers using the library . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . This is a great example on how randomcan be used to get random numbers . Random is a library with many functions that can generate random nums | . 3.15.2 Lesson . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) . This code flips a coin | . Simulations- Unit 3 Section 16 . 3.16 Intro to Simulations . Many simulations are used, for example testing a car safety | ensuring new technology works | simulating a train | Simulations are different than an experiment because it is less accurate as its not real | Simulations are cheaper and more efficent however it is not as accurate as an experiment | It also cannot account for real life factors or outside facters | . Real examples . You can use a simulation to imitate a game, for example the four corners game. | This game can be recreated with this python script | . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . This game basically assigns you a corner randomly and allows you to pick a corner | . Rolling a Dice Example . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . This code allows us to replicate rolling a dice three times because it usesrandom | This is very useful because now we do not have to actually roll the dice three times | This has some flaws because it is assuming that the roll is going to be perfect and that it will truly be equal for all sides however becauseof outside factors this may not be true | . Game of Life . This code is random and uses the library random to pick random boxes creating random patterns | this is another example of how a simulation can be used to represent cellular automaton | . Period 4 Lesson 17-18 . Undecidability: sometetimes we cannot tell if a certain number will follow the program guidlines for example the number example where you divide by 2 or times by 3 and add one. We have to ensure that all the numbers we put in are predictable . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . This code print sout the hialstone numbers . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Collatz- The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. Undecidable problems gives yes or no but there is no code that can solve it on all inputs unsolvable problems, no algorithm can solve the problem Hailstone numbers are the output of the Collatz code. . Unit 3, Section 17: . Algorithm efficieny is how many steps you have to use to solve a certain problem | by being very efficient you would use less points that this is very helpful because now the code will run more efficiently | | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Moreteachcingnotes/",
            "relUrl": "/Moreteachcingnotes/",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Hacks for Unit 3.14 to 3.15",
            "content": "Hacks 3.14.1 Write a program that uses a library/libraries in any sort of manner. Explain your work/code . import random import math num = random.random()*100 print(math.floor(num)) . 99 . This code uses the math library and the random library to get a random whole number between 0 and 100 . Hacks 3.15.1 Write a few lines of code that implements the import function . import math math.cos(3.14159) . -0.9999999999964793 . Define what an import random function do . The import random function finds the random library and allows the user to have access to many different functions | . List a few other things that we can import other than random . We can import math and this gives us access to many different operators and math functionality | . Hacks 3.15.2 For your hacks you need to create a random number generator that will simulate this situation: There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . import random import math def generator(range): return math.floor(random.random()*range) number = generator(8) if number &lt;= 3: print(&quot;green&quot;) elif number &gt; 3 and number &lt;6: print(&quot;blue&quot;) elif number ==6: print(&quot;purple&quot;) elif number==7: print(&quot;orange&quot;) elif number==8: print(&quot;red&quot;) . purple . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . RANDOM(12,20) will include all numbers between 12 and 20 including 12 and 20. According to Savan | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/39311hacks",
            "relUrl": "/csp/39311hacks",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Hacks for Unit 3.9 to 3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) . It is important to know that algorithms that look different can do the same thing so that when working with others and people have various codes it is important to open your mind to understand the code rather than rejecting it because it looks differet. It is also important to know that even code that looks similar can have different purposes so we dont jump to conclusions when evaluating code for the converted conditional to boolean conversion(0.10) total: 0.25 | . sun = False raincloud = True if sun == True: print(&quot;it is sunny&quot;) else: if raincloud == True: print(&quot;it is cold and rainy&quot;) else: print(&quot;not rainy or hot&quot;) . it is cold and rainy . sun = False raincloud = True sunny = not(raincloud) and sun if sunny == True: print(&quot;it is sunny&quot;) if sunny ==False: print(&quot;it is not sunny&quot;) . it is not sunny . 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . If the party has a size 1 the cost is 10 If the party has size 2 the cost is 15 If the party has size 3 then the cost is 20 if the party has size 4 then the cost is 25 print the cost of the party . . partysize = 4 if partysize ==1: print(&quot;cost is 10&quot;) elif partysize ==2: print(&quot;cost is 15&quot;) elif partysize ==3: print(&quot;cost is 20&quot;) elif partysize ==4: print(&quot;cost is 25&quot;) . cost is 25 . 3.9.3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game Make a function that gets the user guess Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): out = input(&quot;What number?&quot;) return out #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;below the actual&quot;) #change this lower_bound = guess elif int(guess) &gt; int(number): print(&quot;above the actual&quot;) #change this upper_bound = guess elif int(guess) == int(number): upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 50. above the actual Guess a number between 0 and 50. You guessed 30. above the actual Guess a number between 0 and 30. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 5. below the actual Guess a number between 5 and 10. You guessed 7. below the actual Guess a number between 7 and 10. You guessed 8. below the actual Guess a number between 8 and 10. You guessed 9. You guessed the number in 8 guesses! . Hacks: calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . . One = [12,14,44,57,79,80,99] Two = [92,43,74,66,30,12,1] Three = [7,13,96,111,33,84,60] Lists = [One, Two, Three] # loops through the range of the length of lists for x in range(len(Lists)): #sorts the list in order Lists[x].sort() #takes the middle index middleindex = int(len(Lists[x])/2) #outputs print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,Lists[x][middleindex]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . c is out of orderso therefore it is c .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/3111hacks",
            "relUrl": "/csp/3111hacks",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot; .&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . 8.0 . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 8 . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . 12 . B. . import random sum = random.randint(1,18) print(sum) . 17 . C. . import random sum = 3*random.randint(1,6) print(sum) . 12 . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . 6 9 8 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? | . random(1,100) &lt;= 50 random(1,100) == 50 random(1,10) &lt;= 5 random(1,10) &gt;= 5 . The answer is A,C, and D! | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "relUrl": "/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Hacks for Unit 3.9 to 3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) . It is important to know that algorithms that look different can do the same thing so that when working with others and people have various codes it is important to open your mind to understand the code rather than rejecting it because it looks differet. It is also important to know that even code that looks similar can have different purposes so we dont jump to conclusions when evaluating code for the converted conditional to boolean conversion(0.10) total: 0.25 | . sun = False raincloud = True if sun == True: print(&quot;it is sunny&quot;) else: if raincloud == True: print(&quot;it is cold and rainy&quot;) else: print(&quot;not rainy or hot&quot;) . it is cold and rainy . sun = False raincloud = True sunny = not(raincloud) and sun if sunny == True: print(&quot;it is sunny&quot;) if sunny ==False: print(&quot;it is not sunny&quot;) . it is not sunny . 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . If the party has a size 1 the cost is 10 If the party has size 2 the cost is 15 If the party has size 3 then the cost is 20 if the party has size 4 then the cost is 25 print the cost of the party . . partysize = 4 if partysize ==1: print(&quot;cost is 10&quot;) elif partysize ==2: print(&quot;cost is 15&quot;) elif partysize ==3: print(&quot;cost is 20&quot;) elif partysize ==4: print(&quot;cost is 25&quot;) . cost is 25 . 3.9.3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game Make a function that gets the user guess Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): out = input(&quot;What number?&quot;) return out #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;below the actual&quot;) #change this lower_bound = guess elif int(guess) &gt; int(number): print(&quot;above the actual&quot;) #change this upper_bound = guess elif int(guess) == int(number): upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 50. above the actual Guess a number between 0 and 50. You guessed 30. above the actual Guess a number between 0 and 30. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 10. above the actual Guess a number between 0 and 10. You guessed 5. below the actual Guess a number between 5 and 10. You guessed 7. below the actual Guess a number between 7 and 10. You guessed 8. below the actual Guess a number between 8 and 10. You guessed 9. You guessed the number in 8 guesses! . Hacks: calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . . One = [12,14,44,57,79,80,99] Two = [92,43,74,66,30,12,1] Three = [7,13,96,111,33,84,60] Lists = [One, Two, Three] # loops through the range of the length of lists for x in range(len(Lists)): #sorts the list in order Lists[x].sort() #takes the middle index middleindex = int(len(Lists[x])/2) #outputs print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,Lists[x][middleindex]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . c is out of orderso therefore it is c .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/3111hacks",
            "relUrl": "/csp/3111hacks",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 3.5 & 3.8 Hacks",
            "content": "3.5 . Explain in your own words what each logical operator does . AND determines if both of the statements are true | OR determines if either one are true, and even if both are true it will still work | NOT checks if a certain condition is not met, for example no sunny checks to see if its cloudy Code your own scenario that makes sense for each logical operator | . # NOT sun = False if not sun: print(&quot;it is cloudy!&quot;) # AND weight = 240 age = 19 if weight &gt;= 150 and age &gt;= 15: print(&quot;You meet the requirements for this ride!&quot;) # OR emotion = &quot;sad&quot; if emotion==&quot;sad&quot; or emotion==&quot;lonely&quot;: print(&quot;you are depressed&quot;) . 3.6 hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. . Selection: If something is true a specific code will run. EX: If answer is yes then a code block will run | Algorithm: a procedure of code that does something or a task. EX: algorithm that takes in your grades and gives out a GPA number | Conditional statement: runs a function depending or executs if TRUE. EX: if the sun is out, then it is sunny. 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . import random numbers = [0,1] def AND(): num1 = random.choice(numbers) num2 = random.choice(numbers) print(num1, &quot;&amp;&quot;, num2, &quot;=&quot;, num1 &amp; num2) print(&quot;AND&quot;) for i in range(5): AND() def OR(): num1 = random.choice(numbers) num2 = random.choice(numbers) print(num1, &quot;|&quot;, num2, &quot;=&quot;, num1 | num2) print(&quot;OR&quot;) for i in range(5): OR() def XOR(): num1 = random.choice(numbers) num2 = random.choice(numbers) print(num1, &quot;^&quot;, num2, &quot;=&quot;, num1 ^ num2) print(&quot;XOR&quot;) for i in range(5): XOR() . 3.7 . Create 3 different flow charts representing nested statements and transfer them into code. | . . BallColor = &quot;red&quot; size = &quot;7&quot; if BallColor==&quot;red&quot;: if size !=&quot;8&quot;: print(&quot;right color wrong size&quot;) elif size == &quot;8&quot;: print(&quot;right color and right size&quot;) else: if size !=&quot;8&quot;: print(&quot;wrong color wrong size&quot;) elif size == &quot;8&quot;: print(&quot;wrong color and right size&quot;) . . Temp = 79 Humid = True if Temp &gt; 80: if Humid == True: print(&quot;it is hot and humid&quot;) elif Humid == False: print(&quot;it is hot and not humid&quot;) elif Temp&lt;80: if Humid == True: print(&quot;it is not hot and humid&quot;) elif Humid == False: print(&quot;it is not hot and not humid&quot;) . . if money&gt;30: if store == &quot;open&quot;: print(&quot;you can buy it&quot;) elif store == &quot;closed&quot;: print(&quot;You can buy it another day&quot;) else: print(&quot;you do not have enough money&quot;) . Create a piece of code that displays four statements instead of three. Try to do more if you can. . if coins&gt;30: if shop == &quot;open&quot;: print(&quot;you can buy it&quot;) elif store == &quot;closed&quot;: print(&quot;You can buy it another day&quot;) elif time == &quot;night&quot;: print(&quot;come during the day&quot;) else: print(&quot;you cannot buy it&quot;) . Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. STEM = True HISTORY = True if STEM: print(&quot;Calculus, Physics, Biology&quot;) elif HISTORY: print(&quot;European History, Gov, american history&quot;) else: print(&quot;PE, art, english&quot;) . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/3.53.8hacks/",
            "relUrl": "/3.53.8hacks/",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Hacks for Unit 3.8 to 10",
            "content": "Hacks Unit 3 Section 3.8.1 . Define an Iteration . An iteration repeats over an algorithm until a certain condition is met | . Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) Homework loop Check physics homework: if there is homework: sit down and do physics if there is calc homework sit down and do calc homework if there is csp hw sit down and do cs if there is apel hw sit down and do cs if there are upcoming tests study for the subject . numbers = [1,4,5,7,8,9,10] newnum =[] for i in numbers: num = i*7 newnum.append(num+6) if num ==49: break print(newnum) . [13] [13, 34] [13, 34, 41] . Program a simple iteration. . names = [&quot;alex&quot;, &quot;bob&quot;, &quot;billy&quot;, &quot;Joe&quot;] for i in names: print(i) . alex bob billy Joe . Find the lowest value in a list (Luna Iwazaki) Use the list made bellow Make a variable to hold the minimum and set it to potential minimum value Loop Check each element to see if it is less than the minimum variable If the element is less than the minimum variable, update the minimum After all the elements of the list have been checked, display the minimum value . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] minimum = min(nums) print(minimum, &quot;This is the lowest number&quot;) low = int(nums[0]) for i in range(len(nums)): if int(nums[i]) &lt; low: low = nums[i] print(&quot;the lowest number in nums is:&quot;, low) #good . 10 This is the lowest number the lowest number in nums is: 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/310hacks",
            "relUrl": "/csp/310hacks",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . go to school! . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/trimester%202%20student%20teaching/studentlessons/2022/12/02/unit3-9-11.html",
            "relUrl": "/trimester%202%20student%20teaching/studentlessons/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 3.3 & 3.4 Hacks",
            "content": "HACKS for 3.3 and 3.4 . sequencing | sequencing | selection, sequencing | iteration, sequencing | sequencing | num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 . this results in 3 . hacks for 3.3 . iteration | selection | sequence |",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/33hacks/",
            "relUrl": "/33hacks/",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 3.1 & 3.2 Hacks",
            "content": "Unit 3.1-3.3 Hacks . name = &quot;alex&quot; age = 16 print(&quot;name is&quot;, name) print(&quot;age is&quot;, age) . In your own words, briefly explain by writing down what an assignment operator is . an equal sign is an assignment operator as it assigns a variable to a value In Collegeboard pseudocode, what symbol is used to assign values to variables? | the arrow is used to assign values A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | it would output 22 | . What is a list? . a bundle of multiple elements What is an element | an element could be a number or integer, string, or a boolean expression What is an easy way to reference the elements in a list or string? | use index to find the elements in a list What is an example of a string? | “amay” this is an example of a string foods = [&quot;pizza&quot;, &quot;chicken&quot;, &quot;steak&quot;, &quot;pasta&quot;, &quot;lasagna&quot;, &quot;salad&quot;, &quot;burger&quot;] print(foods[3]) print(foods[-4]) . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [num1,num2,num3] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in [int(a) for a in numlist]: numlist[i -1] += int(add) print(numlist) . . foods = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwhich&quot;] #simplified foods list # it is better to use lists because it is more simple sports1 = &quot;basketball&quot; sports2= &quot;tennis&quot; sports3 = &quot;soccer&quot; sports= [&quot;basketball&quot;,&quot;tennis&quot;,&quot;soccer&quot;] . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/3.1hacks/",
            "relUrl": "/3.1hacks/",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Lesson Notes",
            "content": "Unit 3, Section 1.1: Data Types and Variables . variable is an abstraction that holds a value | variables have meaningful names to help organize | each different language has a specific way to store variables | variables hold variable | makes code more organized, variables can be compared to containers | it is important to choose a name that correlates to the function | integers for numbers | strings stores text | boolean true or false | input function recieves input | document.querySelector is a javascript code that you can use the query the code to find a certain class in order to find the button 3.2.2 Data Absraction with lists . | lists bundle together multiple elements under one name | you can have different types of variables whithin one list | the function list in python splits a string into a list of characters | .join can join the characters together Unit 3.1-3.3 Hacks . name = &quot;alex&quot; age = 16 print(&quot;name is&quot;, name) print(&quot;age is&quot;, age) . In your own words, briefly explain by writing down what an assignment operator is . | an equal sign is an assignment operator as it assigns a variable to a value In Collegeboard pseudocode, what symbol is used to assign values to variables? | the arrow is used to assign values A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | it would output 22 | . What is a list? . a bundle of multiple elements What is an element | an element could be a number or integer, string, or a boolean expression What is an easy way to reference the elements in a list or string? | use index to find the elements in a list What is an example of a string? | “amay” this is an example of a string foods = [&quot;pizza&quot;, &quot;chicken&quot;, &quot;steak&quot;, &quot;pasta&quot;, &quot;lasagna&quot;, &quot;salad&quot;, &quot;burger&quot;] print(foods[3]) print(foods[-4]) . python num1=input(“Input a number. “) num2=input(“Input a number. “) num3=input(“Input a number. “) add=input(“How much would you like to add? “) . | . Add code in the space below . numlist = [num1,num2,num3] . The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. . for i in [int(a) for a in numlist]: numlist[i -1] += int(add) . print(numlist) . ![](/fastpages-APCSP/images/123.png) python foods = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwhich&quot;] #simplified foods list # it is better to use lists because it is more simple sports1 = &quot;basketball&quot; sports2= &quot;tennis&quot; sports3 = &quot;soccer&quot; sports= [&quot;basketball&quot;,&quot;tennis&quot;,&quot;soccer&quot;] . lesson 3.3 and 3.4 . Algorithms are a finite set of instructions that can help you accomplish a task | an algorithm is made up of sequencing selection and iteration | A sequence is the orders or the instructions | selection is what allows algorithms to make decisions | finally iteration is what repeats . | sequential statements specify how signals can be assigned | sequencing is the order that the code explains these steps | arithmetic operators, you can add and do basic operators by using + - / and * | this operator % gives out the remainder | len() gives the number of characters inside of a string | concat(“”, “”) combines two different strings | subtstring() can return specific characters of a string | . HACKS for 3.3 and 3.4 . sequencing | sequencing | selection, sequencing | iteration, sequencing | sequencing | num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 . this results in 3 . hacks for 3.3 . iteration | selection | sequence | lesson plan for 3.5-3.7 . Conditionals allow us to check whether a function is true or false | we can determine whether something is true or false based off of booleans | True or False | we can use binary to also check whether a condtional is true or false | you can use elif statements to check for multiple different | elif statements allow you to check for ideas such as whether an age is a certain level or a height is a certain height | after these conditionals we can then output various things depending on the input | to use binary for true or false, 1 represents true and 0 represents false | 1 and 0 is 0 | 1 Xor 0 is 1 | 1 or 1 is 1 examples of if statements to check for basic conditionals age = 0 cart = 0 # Put the code for ex:1 if age &gt;= 16: print(&quot;works&quot;) # Put the code for ex:2 if cart &lt; 4: (&quot;works&quot;) . | algorithms are a set of instructions that take in input and run a certain job and give an output | selection uses conditionals to make a decision, for example like a boolean expression | . Unit 3 Sections 8 and 10 Notes! . 8.1 | Section Vocabulary: | . Iteration: repeats a certain code blocks over and over as specified . Iteration Statements: repeats until a stopping condition is met . Repeat Until: repeats until blocks iterate over a certain code block until a certain condition is met, will not start unless the condition is false . Break points can be used to check for conditions to stop looping | It is very important to put break points so you don’t have to keep looping forever | iteration is a repeating portion of a code | stopping conditions can be utilized in loops . | 3.8.2 | iteration statement: causes statements to be repeated | when using range function, for example for i in range(10) print(i) #or i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . | These are both loops thata will iterate through the algorithm | . 3.8.3 . sports = [&quot;basketball&quot;,&quot;tennis&quot;] for i in sports: if i == &quot;basletball&quot;: print(i) . Another example of a for loop with embedded if statments number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . | this is a while loop that will checks if there is no remainer, if there is no remainder it will print otherwise it will just add 1 | This can be used to find even numbers and if you want to add them up you can also loop through an algorithm that will add the numbers together | use int() to get numbers | . Unit 3 Sections 9 and 11 . Algorithms can be written in different ways print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . | This code allows us to take an input of the grade and gives the output of a check of how they are doing | small differences in code allows them to have different functions even if it is just the simple change in an operator print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . | This is another function that does the same thing assigning a good job to an A grade | You can nest if statements to test for multiple conditions whithin a single if statement . | Creating outlines of a function before creating it allows you to develop it easier. | Flowcharts are an easy way to visualize the algorithm | Iteration can be used to cycle through an algorithm to check for a condition over and over again | If the certain condition is not met it will keep repeating | Binary search :repeatedly dividing a search interval in half | . Unit 2… Binary/Data Terms . Bits: Bits are the individual numbers that describe binary Bytes, Hexadecimal / Nibbles Binary Numbers: Unsigned Integer, Signed Integer, Floating Point Binary Data Abstractions: Boolean, ASCII, Unicode, RGB Data Compression: Lossy, Lossless (note discussed yet) Unit 3… Algorithm/Programming Terms ——————- Variables: variables are storage . var = 3 . This is an example of a variabe . Data Types: Some datatypes are string lists . list = [] . This is a list . Assignment Operators: the arrow represents assignment operators . varknow = 6 . we are assigning a value to this . Managing Complexity with Variables: Lists: lists can be used to store many types of data . sports = [&quot;basketball&quot;,&quot;soccer&quot;] . 2D Lists, . list = [] . Dictionaries: very good way to store keys and terms . dict = {&quot;car&quot;:&quot;good&quot;, &quot;cat&quot;:,&quot;bad&quot;} . Class Algorithms, Algorithms help smplify code . def function(): print(&quot;hi&quot;) . def new(): print(&quot;this is a function&quot;): . Sequence: represents the order . print(&quot;this is first&quot;) print(&quot;this is after&quot;) . Selection makes decision based on data . if dog==True: print(&quot;there is a dog&quot;) . Iteration this is aloop . for i in range(5): print(&quot;hi&quot;) . this loops over 5 times . Expressions, Comparison Operators,some comparison terms are like &lt; and &gt; . if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) . Booleans Expressions and Selection, selects if a value is true or not . boolean = True falseboolean = False . Booleans Expressions and Iteration, Truth Tables . function truth(){ var data = [[1,1], [1,0], [0,1], [0,0]]; var text = &quot;&quot; for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;&amp;&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] &amp; data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;|&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] | data[i][1]).toString() + &quot;&lt;br&gt;&quot; } for(let i =0; i &lt; data.length; i++) { text += data[i][0] + &quot;^&quot; + data[i][1] + &quot;--&gt;&quot; + (data[i][0] ^ data[i][1]).toString() + &quot;&lt;br&gt;&quot; } let newdata = [1,0] for(let i =0; i &lt; newdata.length; i++) { text += &quot;~&quot; + newdata[i] + &quot;=&quot; + ~newdata[i] + &quot;&lt;br&gt;&quot; } document.getElementById(&quot;text1&quot;).innerHTML = text } truth() . Characters,A word can be split into characters . word = &quot;hi&quot; split = word.split() . Strings, basic values held in a variable . string = &quot;hi&quot; . Length, There is a length function that can get the length of any string . list = [1,2,3,4,5,6] length = len(list) . This gets the length of the list . Concatenation, You can combine databases with this . import pandas pd = pd.concat() . Python If, can check for certain conditions . if boolean=True: print(&quot;any text here&quot;) . Elif, This can be used to check for a second function and this is very useful when choosing between certain conditions . if boolean=True: print(&#39;good&#39;) elif boolean=False: print(&quot;this is bad&quot;) . Else conditionals; . if True: print(&quot;this is true&quot;) else: print(&quot;not possible&quot;) . Nested Selection Statements . if True: if dogs==True: print(&quot;very good&quot;) . This can be used to checkfor many conditions whithin a certain condition, you can nest many conditions . Python For, . for i in range(5): print(i) . While loops with Range, . while i&lt;6: i+= 1 . Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Lessonnotes/",
            "relUrl": "/Lessonnotes/",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 3): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section 10 - Lists . Lists Recap . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names. append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . pop() - takes the item off the top of the &quot;stack&quot; (by default it returns the last element of the list but you can also pop from any position) . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # pop last item of list most_recent_name = names.pop() print(most_recent_name) # pop first item of list first_name = names.pop(0) print(first_name) . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are&quot; + str(num_names) + &quot;names.&quot;) . sort() - changes order of list permanently . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . Practice Question . Using the information above fill in the missing code . nums = [] nums.#missing code &#39;15&#39; nums.#missing code &#39;43&#39; nums.#missing code &#39;81&#39; nums.#missing code &#39;25&#39; least = #missing code print(#missing code) . AP Exam Reference Sheet . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . Practice Question . If the list words contain [&#39;song&#39;, &#39;book&#39;, &#39;video&#39;, &#39;book&#39;] what will be the following code output . Finding Values in Lists (Luna Iwazaki) . Part 1 . use the list below | make a variable to hold the minimum and set it to potential minimum value | loop | check each element to see if it is less than the minimum variable | if the element is less than the minimum variable, update the minimum | after all the elements of the list have been checked, display the minimum value | . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] # add code here . Part 2 . use the list from part 1 | find the sum of even numbers in a list | . Unit 3.10.2 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . &lt;/html&gt; &lt;/div&gt; &lt;/div&gt; . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums[&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . . . College Board Reference Sheets . List Operations . . &lt;/div&gt; .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/lesson%20plans/studentteaching/2022/11/28/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/studentteaching/2022/11/28/Unit_3.8_3.10.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Planning lesson",
            "content": "Show off code, binary, using functions in javascript to convert the normal numbers to binary | make functions, express how to call and how to set them up | Show the meaning of procedures and how they are used | Show them how procedures can be useful for code and how they manage the complexity | test | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Planningdocument/",
            "relUrl": "/Planningdocument/",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Plus Binary Octal Bits Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 8 0 | 0 | -1 | . Since there is only 8 bits in this binary, the highest we can go is 255, if we go to 266 it will not be able to print . &lt;/div&gt; Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . &lt;/div&gt; &lt;/div&gt;",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Binary Calculator",
            "content": "| . | | | | . | | | | . | | | | . | | | | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BinaryCalculator/",
            "relUrl": "/BinaryCalculator/",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Tools Check",
            "content": "local server . . Here is a photo of my local server running, as you can see by the URL it is running my fastpages on my own computer, this is a useful tool because it allows me to make edits in realtime and the edits will show up instantly! | . Running the local server in terminal . . In this screenshot you can see my creating the server using the make server command, and after succesfully running this command you can see the server working and giving out the address to my local server | . Python Jupyter Notebook shows python intepreter working . . In this screenshot I display that in my fastpages there is a working interpreter for python that can read my python code | . Showing Conda and NodeJS . . In this screenshot it is showing that I can access the base or conda and use the NodeJS, I can also access the different versions of python | . Markdown and javascript tools working in binary blog . . In this screenshot I display the working binary code that we were able to make work in class, this code succesfully uses javascript and markdown to put out this page in which the lightbulbs light up and represent binary digits. This shows that my javascript and markdown tools work. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/ToolscheckTrimester2/",
            "relUrl": "/ToolscheckTrimester2/",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Binary Logic and Abstraction",
            "content": "Binary, Data, Data Structures, Data Abstraction (ASCII, Unicode, Color Codes), . Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. . Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) | Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. | Teach with examples… Segment from CS50 and go to minute 13:15. | Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug | This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research. | . Math in Binary . Learn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools . Logic of Shift . Explore right and left shifts with binary numbers. . In an arithmetic shift, the bits that are shifted out of either end are discarded. | In a left arithmetic shift, zeros are shifted in on the right. | . Understand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2) . How does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. . This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. | Most Significant Bit (MSB), least (LSB) | This example shows negative and positive numbers, using technique called Twos Complement. | In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. | In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. | . UI Concept/Design . Conceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. . n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) | Add buttons for “«” and “ »” | . ASCII and Unicode . Computers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂 . Character Data Abstraction . How are characters stored? How many bits do they take? . ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. | Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. | ASCII - 7 bits, extended to 8 bits with Unicode | UTF-8 | UTF-16 | UTF-32 Sample of Unicode characters. | . UI Concept/Design . The ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: Original ASCII . Color Codes . Pixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. . Monitors 1280 x 1024 Super-eXtended Graphics Array (SXGA) | 1366 x 768 High Definition (HD) | 1600 x 900 High Definition Plus (HD+) | 1920 x 1080 Full High Definition (FHD) | 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) | . | TVs 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … | 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … | 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. | . | Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704| |5.0|2592 x 1944| |7.1|3072 x 2304| |8.0|3264 x 2448| |10.0|3648 x 2736| |12.1|4000 x 3000| |14.7|4416 x 3312| |21.0|5616 x 3744| | . A Color code is a 24 bit abstraction. . There are 8 bits for Red, 8 bits for Blue, and 8 bits for Green. . Name | Hex Code | RGB Code | . Black | #000000 | rgb(0, 0, 0) | . Red | #FF0000 | rgb(255, 0, 0) | . Maroon | #800000 | rgb(128, 0, 0) | . Yellow | #FFFF00 | rgb(255, 255, 0) | . 255 * 255 * 255 combinations of R, G, B . UI Design . Here is a sample program a student used to visualize color by turning buttons on and off. by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block . Logic Gates . The fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables. . Logic Gates can be simulated with 2 bits . Look for bitwise operators on w3schools . UI Concept . Visual concept of logic gates . Establish check boxes for A / B on and off | Show result of Boolean Expression using Gate visual Logic Gates | . UI Design . Logic gate lab in JavaScript by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result . Logic of Logic Gates . A logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). . There are four possible inputs: 0 0 | 0 1 | 1 0 | 1 1 | . | Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 | OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 | XOR is true for 0 1, 1 0 | . | . Practical Application . Logic gates are used everywhere . Unsigned Addition . Here we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits. . Initial UI Implementation . Action buttons for +1 and -1 Additional actions for Turn On and Turn Off . Unsigned Addition . . Signed Addition . Integers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign. . Common concept for Integer Math . Positive number . Basic concept, but not typically used . Negative number . Inverting numbers, twos complement . Two’s complement allows adding for signed and unsigned numbers . Basic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. » and »&gt; have been adapted to handle signed and zero filled shifting. . Technical helpers . Harvard CS50 minute 0 to minute 50 to provide background on some of the information below. . Algorithm in Jinja2 to limit Bits per row . 8 images per row by Kylie Scharf Modulo 8 algorithm add &lt;tr&gt; for every eight bits (code). . Research Helpers . CHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson . Hacks . Data, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. . Use data abstraction (ie data structures) in your lesson | Make sure you teach/learn elements from this blog as you learn algorithms | Add “Science” into your process (research, jupyter notebook, and ultimately running application) | Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "relUrl": "/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "MC blog for final",
            "content": ". This final mc was pretty hard compared to the shorter mc practices that we did before. | Some common errors that I made in the quiz was in 2B. The develop and integrate algorithms. This topic is somewhere that i can work with. In my own code this main idea of 2B would look like creating functions to manage the complexity. I need to work on understanding the purpose more. | Another main idea that i missed is 4B, evaluating and testing algorithms. This means that I need to have a better understanding of what these algorithms do because in the quiz I was making a lot of mistakes with finding errors in the code and figuring out what the problems are in the code. This is very important because if I am able to get better at evaluating algorithms I can make my code more organized and find errors faster. | Along with this, I made a lot of errors with 4C, this is more of the testing and finding errors in my code with algorithms, the questions often showed me code with errors and I would have to find out the error. | . Here are the questions that I got wrong in this practice . The issue that I made in this problem was that instead of looking for numbers less than the desired value I instead put numbers more, this was a simple error because i thought it was a &gt; sign instead of a &lt; sign and this ended with me making that simple error | . . the error inside of this proble was that I overlooked the fact that it did not replace the values, instead it creates a new list that simply reverses the positions of the values and creates a new list. This is different than what I thought because earlier I thought that it was just reverses the values | . . The error in this code was that I though the value was getting compared to all the other values inside of the list, however instead it only starts iterating through the list starting at value K. This way it only compares it to values after. | . . this problem was witha conceptually understanding of the internet and the purpose of using protocols. instead they work to standardized instead of protect. this is why i got this problem wrong | . . This problem is wrong because I did not have a good understanding of how binary worked before taking this test. after further research an lerning about what binary is used for and how it is used. The way this works is with 2 and 2^x depending on which column it is in. | . . This was a minor conceptually error because this was at a first glance right however in the algorithm, the list was then swtiched. | . . In this problem, I made a simple mistake of not noticing that in the end of the algorithm, it sets the value to 50 so no matter of what the input it, in the end it would always give the same output and this is why this problem was wrong because I did not notice the little code block in the end | . . This problem is simply wrong because I used the wrong system to solve. The thing does not interchange the values and instead it sets both to the first value. this is wrong because the purpose of the code is to instead swap the values instead of setting them both to the first value and this is why it is wrong. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/FinalMCPracticereview/",
            "relUrl": "/FinalMCPracticereview/",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Intro to Engineering",
            "content": "What standards have we hit so far? Which assignment do they relate to? . we covered #7 and #9, which are: . Develop Web and online projects. For #7, I worked with my group to form a frontend for our project. This HTML is then converted and displayed in the client’s browser, showing them the webpage. Fastpages does all the work for us transferring the code and outputting it. Fastpages takes care of the frontend . As for #9, I created a flask based server that runs an api to that the front end can access it. We also worked with fastpages to connect with the backend this way the multiple platforms can communicate and send data to each other. . What standards are you looking forward to learning more about? . I want to work with the 8th standard which is creating databases. I really want to work with databases becauses it will allow our scru project to go to the next level and store more data allowing for more innovation. . What other careers can you benefit from being in this pathway? . I will be able to develop my skills as a software engineer because managing data is extremely important as a software engineer. This will help me be more organize and I can apply it to future projects or internships .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CTEexperience/",
            "relUrl": "/CTEexperience/",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) # Outputs the quote using print() . Your random inspirational quote is, &#34;The bad news is time flies. The good news is you’re the pilot.&#34; -- –Michael Altshuler . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random #importing packages import math from flask import Flask, request app = Flask(__name__) # Creating the flask application # Creating the array of quotes for the API to parse through quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] # Creates a function that uses random to generate a random number whithin the range of the quotes array def randomgen(): number = int(random.random()*len(quotes)) return number # Creating the GET endpoint, so when we call it using /get, it will call to the randomgen function and return the quote from the array @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;Your quote is&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Pbl Webapi_tutorial",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Python Web API Endpoints using Jokes n”, “&gt; A discussion on Web APIs. This is about creating a Web API (Jokes), and creating API that retains data as long as the Web Server is running. This is done using List and Dictionaries as the backend. Ultimately, this example could be extended by adding a database to the backend. However, for now, we are focussing on interaction of Frontend to Backend, this is called an Endpoint. n”, “- toc: true n”, “- comments: false n”, “- permalink: /techtalk/webapi n”, “- image: /images/python_restapi.png n”, “- categories: [3.B, 5.A, 5.B, C5.0, C7.0, C7.6] n”, “- type: pbl n”, “- week: 9 n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Model for API n”, “&gt; We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. n”, “ n”, “- This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. n”, “ - jokes_data contains a list of dictionary records containing joke and reactions: haha or boohoo n”, “ - joke_list contains collection of jokes we will put into jokes_data n”, “ n”, “- Next comes some functions to interact with our jokes n”, “ - def initJokes(): initializes jokes_data n”, “ - def getJokes(): returns the complete list of jokes n”, “ - def getJoke(): returns a single joke from our list n”, “ - … many more function can be examined by reading comments below …” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Most liked 16 n”, “0 If you give someone a program… you will frustrate them for a day; if you teach them how to program… you will frustrate them for a lifetime. n”, “ haha: 16 n”, “ boohoo: 1 n”, “ n”, “Most jeered 6 n”, “11 If it wasn’t for C, we’d all be programming in BASI and OBOL. n”, “ haha: 9 n”, “ boohoo: 6 n”, “ n”, “Random joke n”, “14 Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem. n”, “ haha: 9 n”, “ boohoo: 4 n”, “ n”, “Jokes Count: 18 n” ] } ], “source”: [ “import random n”, “ n”, “jokes_data = [] n”, “joke_list = [ n”, “ &quot;If you give someone a program… you will frustrate them for a day; if you teach them how to program… you will &quot; n”, “ &quot;frustrate them for a lifetime.&quot;, n”, “ &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, n”, “ &quot;UNIX is basically a simple operating system… but you have to be a genius to understand the simplicity.&quot;, n”, “ &quot;Enter any 11-digit prime number to continue.&quot;, n”, “ &quot;If at first you don’t succeed; call it version 1.0.&quot;, n”, “ &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, n”, “ &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; n”, “ &quot;1 byte. And then everything crashed.&quot;, n”, “ &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, n”, “ &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, n”, “ &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, n”, “ &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, n”, “ &quot;If it wasn’t for C, we’d all be programming in BASI and OBOL.&quot;, n”, “ &quot;Computers make very fast, very accurate mistakes.&quot;, n”, “ &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, n”, “ &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, n”, “ &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, n”, “ &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, n”, “ ‘An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?’ n”, “] n”, “ n”, “# Initialize jokes n”, “def initJokes(): n”, “ # setup jokes into a dictionary with id, joke, haha, boohoo n”, “ item_id = 0 n”, “ for item in joke_list: n”, “ jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) n”, “ item_id += 1 n”, “ # prime some haha responses n”, “ for i in range(200): n”, “ id = getRandomJoke()[‘id’] n”, “ addJokeHaHa(id) n”, “ # prime some haha responses n”, “ for i in range(50): n”, “ id = getRandomJoke()[‘id’] n”, “ addJokeBooHoo(id) n”, “ n”, “# Return all jokes from jokes_data n”, “def getJokes(): n”, “ return(jokes_data) n”, “ n”, “# Joke getter n”, “def getJoke(id): n”, “ return(jokes_data[id]) n”, “ n”, “# Return random joke from jokes_data n”, “def getRandomJoke(): n”, “ return(random.choice(jokes_data)) n”, “ n”, “# Liked joke n”, “def favoriteJoke(): n”, “ best = 0 n”, “ bestID = -1 n”, “ for joke in getJokes(): n”, “ if joke[‘haha’] &gt; best: n”, “ best = joke[‘haha’] n”, “ bestID = joke[‘id’] n”, “ return jokes_data[bestID] n”, “ n”, “# Jeered joke n”, “def jeeredJoke(): n”, “ worst = 0 n”, “ worstID = -1 n”, “ for joke in getJokes(): n”, “ if joke[‘boohoo’] &gt; worst: n”, “ worst = joke[‘boohoo’] n”, “ worstID = joke[‘id’] n”, “ return jokes_data[worstID] n”, “ n”, “# Add to haha for requested id n”, “def addJokeHaHa(id): n”, “ jokes_data[id][‘haha’] = jokes_data[id][‘haha’] + 1 n”, “ return jokes_data[id][‘haha’] n”, “ n”, “# Add to boohoo for requested id n”, “def addJokeBooHoo(id): n”, “ jokes_data[id][‘boohoo’] = jokes_data[id][‘boohoo’] + 1 n”, “ return jokes_data[id][‘boohoo’] n”, “ n”, “# Pretty Print joke n”, “def printJoke(joke): n”, “ print(joke[‘id’], joke[‘joke’], &quot; n&quot;, &quot;haha:&quot;, joke[‘haha’], &quot; n&quot;, &quot;boohoo:&quot;, joke[‘boohoo’], &quot; n&quot;) n”, “ n”, “# Number of jokes n”, “def countJokes(): n”, “ return len(jokes_data) n”, “ n”, “# Test Joke Model n”, “if name == &quot;main&quot;: n”, “ initJokes() # initialize jokes n”, “ n”, “ # Most likes and most jeered n”, “ best = favoriteJoke() n”, “ print(&quot;Most liked&quot;, best[‘haha’]) n”, “ printJoke(best) n”, “ worst = jeeredJoke() n”, “ print(&quot;Most jeered&quot;, worst[‘boohoo’]) n”, “ printJoke(worst) n”, “ n”, “ # Random joke n”, “ print(&quot;Random joke&quot;) n”, “ printJoke(getRandomJoke()) n”, “ n”, “ # Count of Jokes n”, “ print(&quot;Jokes Count: &quot; + str(countJokes()))” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Backend Interface for Web API (Control) n”, “&gt; An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems: n”, “1. Python Backend that stores data beyond a single Web page n”, “2. GH Pages/Fastpages Frontend that is responsible for presenting data n”, “ n”, “To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: n”, “- https://flask.nighthawkcodingsociety.com/api/jokes n”, “- https://flask.nighthawkcodingsociety.com/api/jokes/2 n”, “- https://flask.nighthawkcodingsociety.com/api/jokes/random n”, “ n”, “As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. n”, “ n”, “The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. n”, “ n”, “FYI, there is NO output from this section . “ ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [], “source”: [ “from flask import Blueprint, jsonify # jsonify creates an endpoint response object n”, “from flask_restful import Api, Resource # used for REST API building n”, “import requests # used for testing n”, “import random n”, “ n”, “# Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place n”, “app_api = Blueprint(‘api’, name, n”, “ url_prefix=’/api/jokes’) # endpoint prefix avoid redundantly typing /api/jokes over and over n”, “ n”, “# API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 n”, “api = Api(app_api) n”, “ n”, “class JokesAPI: n”, “ # not implemented, this would be where we would allow creation of a new Joke n”, “ class _Create(Resource): n”, “ def post(self, joke): n”, “ pass n”, “ n”, “ # getJokes() n”, “ class _Read(Resource): n”, “ def get(self): n”, “ return jsonify(getJokes()) n”, “ n”, “ # getJoke(id) n”, “ class _ReadID(Resource): n”, “ def get(self, id): n”, “ return jsonify(getJoke(id)) n”, “ n”, “ # getRandomJoke() n”, “ class _ReadRandom(Resource): n”, “ def get(self): n”, “ return jsonify(getRandomJoke()) n”, “ n”, “ # getRandomJoke() n”, “ class _ReadCount(Resource): n”, “ def get(self): n”, “ count = countJokes() n”, “ countMsg = {‘count’: count} n”, “ return jsonify(countMsg) n”, “ n”, “ # put method: addJokeHaHa n”, “ class _UpdateLike(Resource): n”, “ def put(self, id): n”, “ addJokeHaHa(id) n”, “ return jsonify(getJoke(id)) n”, “ n”, “ # put method: addJokeBooHoo n”, “ class _UpdateJeer(Resource): n”, “ def put(self, id): n”, “ addJokeBooHoo(id) n”, “ return jsonify(getJoke(id)) n”, “ n”, “ # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes n”, “ api.add_resource(_Create, ‘/create/&#39;) n&quot;, &quot; api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes n&quot;, &quot; api.add_resource(_ReadID, &#39;/&#39;) n&quot;, &quot; api.add_resource(_ReadRandom, &#39;/random&#39;) n&quot;, &quot; api.add_resource(_ReadCount, &#39;/count&#39;) n&quot;, &quot; api.add_resource(_UpdateLike, &#39;/like//&#39;) n&quot;, &quot; api.add_resource(_UpdateJeer, &#39;/jeer//&#39;) n&quot;, &quot; n&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Frontend (View Simulation) and Hacks n&quot;, &quot;&gt; This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. n&quot;, &quot; n&quot;, &quot;To work with this code and make observation for learning... n&quot;, &quot;- Run a local server from flask_portfolio project and the change server variable to be local n&quot;, &quot;- Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests n&quot;, &quot;- The &quot;requests &quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. n&quot;, &quot;- Try running this with Debugging and observe what data is being created at each step (Required) n&quot;, &quot;- Try to format this data in Python print statements to be more readable (Required) n&quot;, &quot;- Start and stop local server and observe errors&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 2, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 112, &#39;haha&#39;: 120, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} n&quot;, &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 112, &#39;haha&#39;: 121, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} n&quot;, &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 113, &#39;haha&#39;: 121, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} n&quot;, &quot;&lt;Response [200]&gt; n&quot;, &quot;{&#39;boohoo&#39;: 650, &#39;haha&#39;: 427, &#39;id&#39;: 2, &#39;joke&#39;: &#39;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&#39;} n&quot; ] } ], &quot;source&quot;: [ &quot;# Pick the server you want to test comment in/comment out n&quot;, &quot;# server = &quot;http://127.0.0.1:5000/ &quot; # run local n&quot;, &quot;server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server n&quot;, &quot;url = server + &quot;api/jokes/ &quot; n&quot;, &quot;responses = [] # responses list n&quot;, &quot; n&quot;, &quot;# Get the count of jokes on server n&quot;, &quot;count_response = requests.get(url+ &quot;count &quot;) n&quot;, &quot;count_json = count_response.json() n&quot;, &quot;count = count_json[&#39;count&#39;] n&quot;, &quot; n&quot;, &quot;# Update likes/dislikes test sequence using random joke n&quot;, &quot;num = str(random.randint(0, count-1)) # test a random record n&quot;, &quot;responses.append( n&quot;, &quot; requests.get(url+num) # Get/read joke by id n&quot;, &quot; ) n&quot;, &quot;responses.append( n&quot;, &quot; requests.put(url+ &quot;like/ &quot;+num) # Put/add to like count n&quot;, &quot; ) n&quot;, &quot;responses.append( n&quot;, &quot; requests.put(url+ &quot;jeer/ &quot;+num) # Put/add to jeer count n&quot;, &quot; ) n&quot;, &quot; n&quot;, &quot;# Get a random joke n&quot;, &quot;responses.append( n&quot;, &quot; requests.get(url+ &quot;random &quot;) # Get/read a random joke n&quot;, &quot; ) n&quot;, &quot; n&quot;, &quot;# Cycle through and print responses n&quot;, &quot;for response in responses: n&quot;, &quot; print(response) n&quot;, &quot; try: n&quot;, &quot; print(response.json()) n&quot;, &quot; except: n&quot;, &quot; print( &quot;data error &quot;)&quot; ] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3.9.12 (&#39;base&#39;)&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.9.12&quot; }, &quot;orig_nbformat&quot;: 4, &quot;vscode&quot;: { &quot;interpreter&quot;: { &quot;hash&quot;: &quot;126971108c560ce75295ac26010652a3ef02492d6f02a0c6c09b249494330c5a&quot; } } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 2 } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/10/17/PBL-webapi_tutorial.ipynb",
            "relUrl": "/2022/10/17/PBL-webapi_tutorial.ipynb",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Intro to Engineering",
            "content": "Suma Latha . Mother inspired her to be an engineer, started science and math early, math and science was a strong help when she started engineering | Engineering is based off of science and math : if you are good at math and science you should | Engineering can make a lot of monkey, requires teamwork, can be very useful in society | Starting salary is very good when compared to other industries | Engineers solve the most challenging problems of the world | Latha was inspired to become an engineer because of her skills in math and science and because of the potential money | Biomedical, robotics, structural, software, industrial, civil, nuclear, electrical, and hardware are all types of engineering | wanted to implement electronic problems into software | Focused on electronics in her college experience | In the corporate world, they offer training in order to support the new graduates. Latha was assigned a mentor and the mentor was able to really help her with her workload | She was able to work on latest technology in her first job | At Qualcom they work to make chips, smartphone chips, wireless communication, semiconductor, GPUS, artificial intelligence projects, machine learning, automobile technology | Plays tennis, and other games, Nisha Sethia . | Has two young kids, very busy taking care of her kids | As a kid she was fascinated by how kids used engineering | She was extremely thrilled to work on computers however she had limited access to computers | Very confused and had troubles so she worked on networking | mainly drived by her fascination for enegineering | She asked a lot of questions and this helped her find her passion | Her first job was at a 2G job as an assistant test engineer: She would verify and approve of designs and projects Worked there for two years | . | in 2011 she moved the US more specific, san diego the headquarters of qualcom | How do you know what side of engineering you want to pursue? Keep growth mindset You need get exposure and try different fields | . | Hardest challenge was having troubles priortizing her work and her personal life | She had lack of representation during parts of her education, finding a mentor or a leader to help her | | . Suma Latha . Use google to find out the jobs of each specific job | Hardware designs the chips | Software write the software for the electronics and any other machines | California has great colleges with good engineering programs | Biggest challenge she faced was when she had her first kid she took a leave from her job, this made it very hard to come back to work because she was dealing with motherhood as well as work | Mentors and managers helped her manage her work when she had her first child Hardest challenge was managing her personal life along with her work life | . | . Shirley Yager . Software and hardware works together in order for the product to fully work | Software degrees are very good to have, jobs like google and apple require software. | Google has a headset that uses software to create a virtual reality environment | Fitbit is a watch that requires hardware as well as software | It is important to take hard classes in school, take engineering classes. Robotics programs Since the West coast schools do not take SAT it is important to have extracurriculars involved with the preffered major | . | She advocated for taking classes for STEM | Use school clubs to apply your learnings For example robotics clubs work and can help you apply your stem learning. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BigIdea4notescollegboard/",
            "relUrl": "/BigIdea4notescollegboard/",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Big Idea 4 Notes",
            "content": "Internet Quiz . . In the collegeboard videos I was able to go over the main concepts of the internet | One main concept that I got was that a computing system is essentially multiple computing devices working together to a achieve a certain goal. A computing device is like a computer tablet phone or ipad. | Next step to this learning was that a computer network is a bunch of comptuing devices and systems working together | Two computing devices can communicate and send packets to each other | In order for this communication to take place, a routing has to take place and this will connect the sender to the reciever | When they talk about bandwith, the are explaining that the max amount of data that can be send or recieved in a given time interval | A packet is a small amount of data send from a sender to a reciever | Packet switching is when the message gets split in order to get sent, and the reciever pieces the pieces back together to get the final message | A path between two computing devices begins from sender and ends at the reciever | In order for data to get passed from device to device, it has to be sent through data streams, which contain data whithin packets | Packets have a chunk of data along with metadata or instructions on where it is supposed to go | The internet has a set of linked pages are interconnected | TCP (Transmission Control Protocol) common standard on how to send messages | OSI Open systems interconnet layers that you have to go through to communicate | The most common network access protocol is Ethernet | Routers are a special purpose computer with a MAC adress | The internet is scalable | LAN (Local Area Network) physical connections conected physically. | DNS Domain Name Service Application that changed a URL into an ip address The internet was designed in such a way to be scalable | . | Metadata contains information for routing and connecting sender to reciever | The world wide web is a system of linked pages that can be accessed through the internet | | . Future plan for taking notes . I will continue to take notes in the form of a markdown blog. | This way it is easily accesible and I can change them and update my notes. | . Dev Ops . Deployment through AWS using deocker through docker compose | All running on one AWS instance with a conatiner for each group. | Our group is named striver and we use docker to run it through AWS. | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/BigIdea4notescollegboard/",
            "relUrl": "/BigIdea4notescollegboard/",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Jupyter Notebook quiz",
            "content": "This is a quiz that will go over the basic vocabulary that was covered in the the jupyter document. . correct = 0 #function that takes in the question and the answer, then it determines whether the input is correct or incorrect then changes the variable correct depending on the answer def question(prompt, answer): #prints the question print(&quot;Question: &quot; + prompt) #takes in the input msg = input() #checks if the answer is correct or not if (msg).lower() == answer: #prints if the message is correct print(msg + &quot; is correct!&quot;) #changes the correct variable global correct correct += 1 #checks to see if its false else: #prints out that the answer is false print(msg + &quot; is incorrect!&quot;) #Questions questions = [(&quot;What function woud you use to output text?&quot;,&quot;print&quot;), (&quot;What function would you use to take input from the user?&quot;,&quot;input&quot;), (&quot;What keyword do you use to define a function?&quot;, &quot;def&quot;),(&quot;what function checks whether or not a certain condition is true or false?&quot;, &quot;if&quot;)] for i in questions: question(i[0] ,i[1]) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Question: What function woud you use to output text? print is correct! Question: What function would you use to take input from the user? input is correct! Question: What keyword do you use to define a function? if is incorrect! Question: what function checks whether or not a certain condition is true or false? if is correct! You got 75% .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/JupyterNotebookquiz/",
            "relUrl": "/csp/JupyterNotebookquiz/",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Project Planing",
            "content": "Project Goals . Our initial project plan was to provide inspiration to the users of the app. We were going to do this by using inspirational quotes and using inspiration collabaration between the users. For example users could comment on others goals in order to inspire them to work toward them. After a lot of planning, and the lesson on APIs, our group also decided to implement an API that would import random inspiration quotes and this could be used to inspire the users! | . Design Work . After planning the design out on Safins iPad, we decided to put out a web app that was similiar to social media, with likes comments profile pictures and stuff similiar to that. This plan includes quotes from people not on the app, as well as inspirational quotes directly from users. This way we will be guaranteed to have enough content. | . . In this picture you can see how we have celebritie’s quotes on this page. And we will be able to use data collection and databases to store likes, comments, and quotes. | . Program Purpose &amp; Function . Provide inspiration to the users | Allow users to share there goals and find new quotes! | . Data Abstraction . We will store user data Number of likes | Number of comments | What the comments are | Quotes | . | . Managing Complexity . We will use flask folder structure This will allow us to store out data in a organized way without getting confusing | . | . Procedural Abstraction . The way we will be able to execute this webstie will be running off of the API system | By using the inspirational quote API we would have access to the Rapid API database and we can extract quotes. | . Algorithm Implementation . We will create functions to get the API quotes, this will make it less complex and allows us to pull quotes easily | We will automate the user input so we can streamline the process of getting the user quotesi nto the database | . Testing . We will use print functions and the console to test out the output before we put it into our actual Website | . Roles . Safin: Scrum Leader | Alex: Back- end | Kalani- Front End | Navan Dev ops | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/ProjectPlanningBlog/",
            "relUrl": "/ProjectPlanningBlog/",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "College Board MC pt 2",
            "content": "Here is the proof of the college BoardMC . Here I was able to learn a lot about the internet, and I did some troubleshooting and figure out how to fix programming errors. These quizzes were straightforward and helped me develop my critical thinking. The internest portion was a little diffucult because I did not have much first hand experience with the internet but however after critical thinking and looking over the college videos I was able to learn about the aspects of the internet. . The programming issues were also very good for my learning because it takes a lot of effort to first understand the purpose of the code and see why it is not working. To find the lines and the more specific error trains my mind to make less errors | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CollegeBoardMCQPRactice2/",
            "relUrl": "/CollegeBoardMCQPRactice2/",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) # Outputs the quote using print() . Your random inspirational quote is, &#34;The bad news is time flies. The good news is you’re the pilot.&#34; -- –Michael Altshuler . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random #importing packages import math from flask import Flask, request app = Flask(__name__) # Creating the flask application # Creating the array of quotes for the API to parse through quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] # Creates a function that uses random to generate a random number whithin the range of the quotes array def randomgen(): number = int(random.random()*len(quotes)) return number # Creating the GET endpoint, so when we call it using /get, it will call to the randomgen function and return the quote from the array @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;Your quote is&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.json()) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1497,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29499,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983600351889&#34;,&#34;total24hVolume&#34;:&#34;62271932590&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384252414254&#34;,&#34;price&#34;:&#34;20043.048298420286&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20050.210772224906&#34;,&#34;20104.086969351873&#34;,&#34;20157.612080991814&#34;,&#34;20244.902254214187&#34;,&#34;20296.13179911493&#34;,&#34;20355.40420179014&#34;,&#34;20339.584455003165&#34;,&#34;20380.9608314705&#34;,&#34;20334.43838223393&#34;,&#34;20256.397755502137&#34;,&#34;20214.818396073206&#34;,&#34;20187.14537643429&#34;,&#34;20159.744112050765&#34;,&#34;20135.103620334423&#34;,&#34;20152.838726388378&#34;,&#34;20223.999055486038&#34;,&#34;20188.386841136497&#34;,&#34;20099.650776087008&#34;,&#34;20022.525302913724&#34;,&#34;20060.360700925474&#34;,&#34;20058.49372151537&#34;,&#34;20101.79019444109&#34;,&#34;20068.60680042962&#34;,&#34;20037.990245449524&#34;,&#34;20040.006424632564&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;34643309443&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166771865158&#34;,&#34;price&#34;:&#34;1363.4411267728026&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.12&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.0952855712028&#34;,&#34;1351.020589256574&#34;,&#34;1352.8575645347053&#34;,&#34;1363.1472565613235&#34;,&#34;1374.6067561390107&#34;,&#34;1375.494244817268&#34;,&#34;1372.953523219661&#34;,&#34;1375.925446184292&#34;,&#34;1374.4292408387619&#34;,&#34;1368.4552635284397&#34;,&#34;1366.1167355485723&#34;,&#34;1363.0950291906606&#34;,&#34;1360.3636987191837&#34;,&#34;1358.3640048395087&#34;,&#34;1360.4342504890021&#34;,&#34;1369.213281754299&#34;,&#34;1368.3676032576047&#34;,&#34;1364.1360571475047&#34;,&#34;1363.3432991494524&#34;,&#34;1364.0707758574745&#34;,&#34;1363.3606085887561&#34;,&#34;1364.148825121332&#34;,&#34;1361.3954792114398&#34;,&#34;1359.0031784082305&#34;,&#34;1360.6275497370877&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;11632395543&#34;,&#34;btcPrice&#34;:&#34;0.06802563694267322&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68226757608&#34;,&#34;price&#34;:&#34;1.0002079259242496&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.13&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0005865365358848&#34;,&#34;0.9997222677525898&#34;,&#34;1.000302739310476&#34;,&#34;0.9991136110008606&#34;,&#34;0.9999088281238293&#34;,&#34;1.0001228624687193&#34;,&#34;1.0002330626742733&#34;,&#34;0.9999085006515177&#34;,&#34;1.000637166558432&#34;,&#34;1.0010864048424142&#34;,&#34;1.000382906070256&#34;,&#34;1.0008861750426428&#34;,&#34;1.0002453605323327&#34;,&#34;1.0005499753502725&#34;,&#34;0.9999702733020642&#34;,&#34;0.9994598707479958&#34;,&#34;1.0012863570809547&#34;,&#34;1.0016448157620703&#34;,&#34;0.9996482331493484&#34;,&#34;1.0004215336032052&#34;,&#34;0.9999570213425627&#34;,&#34;0.9999224272643209&#34;,&#34;1.0007392056569566&#34;,&#34;1.000325844124763&#34;,&#34;1.0001333206640304&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40185169770&#34;,&#34;btcPrice&#34;:&#34;0.000049902984368056&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46265013950&#34;,&#34;price&#34;:&#34;1.0001455267516093&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0004792903280844&#34;,&#34;0.9997900335112507&#34;,&#34;1.0002409949691449&#34;,&#34;0.9991618677934375&#34;,&#34;0.9998534185910576&#34;,&#34;0.9999410847854596&#34;,&#34;1.0002265014975766&#34;,&#34;0.9999486744759792&#34;,&#34;1.0006735177764154&#34;,&#34;1.0009635471641476&#34;,&#34;1.0003204451973837&#34;,&#34;1.0007368556469354&#34;,&#34;1.0001965553835719&#34;,&#34;1.0005780931027144&#34;,&#34;1.0000088554796078&#34;,&#34;0.9994586243665149&#34;,&#34;1.0011869248897938&#34;,&#34;1.0015496148117664&#34;,&#34;0.9997673802296243&#34;,&#34;1.0003598578573154&#34;,&#34;1.0000778482427792&#34;,&#34;0.9998861638814902&#34;,&#34;1.0006873238669673&#34;,&#34;1.0002882569057026&#34;,&#34;1.0001093290939425&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3358522477&#34;,&#34;btcPrice&#34;:&#34;0.000049899871110446&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41769765064&#34;,&#34;price&#34;:&#34;288.31435478535195&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.55&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0659068658593&#34;,&#34;293.14125809992265&#34;,&#34;293.927072308215&#34;,&#34;294.83908930457306&#34;,&#34;297.17141223267646&#34;,&#34;296.54802038189746&#34;,&#34;296.5585630450058&#34;,&#34;296.294553936533&#34;,&#34;295.9679395053358&#34;,&#34;295.35520526954036&#34;,&#34;294.7847791953549&#34;,&#34;295.0951173850531&#34;,&#34;294.5306048069131&#34;,&#34;294.30050189031186&#34;,&#34;294.22403335151813&#34;,&#34;294.80827509690437&#34;,&#34;294.33033971155965&#34;,&#34;293.96591310440675&#34;,&#34;293.66576108995565&#34;,&#34;293.99310192770326&#34;,&#34;293.69072498915045&#34;,&#34;293.4540279331547&#34;,&#34;293.23188737664185&#34;,&#34;293.09086576852025&#34;,&#34;290.12424881390194&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;1154452180&#34;,&#34;btcPrice&#34;:&#34;0.014384755776299543&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24935527184&#34;,&#34;price&#34;:&#34;0.5001251405968443&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.02&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4937540033530011&#34;,&#34;0.4935243660903145&#34;,&#34;0.49094545203960516&#34;,&#34;0.4918624009473887&#34;,&#34;0.4957389899343572&#34;,&#34;0.49519738378148237&#34;,&#34;0.4958525362412369&#34;,&#34;0.5001275119658124&#34;,&#34;0.5026720193539957&#34;,&#34;0.4991920707876871&#34;,&#34;0.49523182938198607&#34;,&#34;0.4939376274503768&#34;,&#34;0.4938461715574201&#34;,&#34;0.4949672333116952&#34;,&#34;0.49671660295169745&#34;,&#34;0.4983157134968618&#34;,&#34;0.4984385599250301&#34;,&#34;0.4958643382230643&#34;,&#34;0.4954888154508337&#34;,&#34;0.4956388106133542&#34;,&#34;0.49687913330335365&#34;,&#34;0.49710524663432437&#34;,&#34;0.4967817423491458&#34;,&#34;0.4960523063301114&#34;,&#34;0.5002588730645078&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;1951851389&#34;,&#34;btcPrice&#34;:&#34;0.000024952548791506&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21383646644&#34;,&#34;price&#34;:&#34;1.0000938123108745&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0005254447624727&#34;,&#34;0.9997390821935204&#34;,&#34;1.0002531268638544&#34;,&#34;0.99900371650551&#34;,&#34;0.9998191100048063&#34;,&#34;0.9999887701995116&#34;,&#34;1.0001269869516713&#34;,&#34;0.9997967773830551&#34;,&#34;1.0005975052435443&#34;,&#34;1.0010354550388738&#34;,&#34;1.000273734165667&#34;,&#34;1.0007993618135278&#34;,&#34;1.0001675248577555&#34;,&#34;1.0004436296308015&#34;,&#34;0.9998831620327592&#34;,&#34;0.9993790802417244&#34;,&#34;1.0011655146499898&#34;,&#34;1.0015608327721508&#34;,&#34;0.9996737479147666&#34;,&#34;1.0003874163381075&#34;,&#34;0.999855178764249&#34;,&#34;0.9997695857566036&#34;,&#34;1.0006363550917916&#34;,&#34;1.0003015517514349&#34;,&#34;1.0001110800082091&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6147025365&#34;,&#34;btcPrice&#34;:&#34;0.000049897290942002&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13373195008&#34;,&#34;price&#34;:&#34;0.4298337184562682&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.4294077817341544&#34;,&#34;0.43010743439413285&#34;,&#34;0.4311330265281362&#34;,&#34;0.43172655110842456&#34;,&#34;0.43548735625164897&#34;,&#34;0.4357388064320796&#34;,&#34;0.4347251184847503&#34;,&#34;0.43502688530763967&#34;,&#34;0.4347130159622236&#34;,&#34;0.433471895077104&#34;,&#34;0.43259694190748693&#34;,&#34;0.4319744086787819&#34;,&#34;0.4312921949359245&#34;,&#34;0.4311011590020075&#34;,&#34;0.4302280684331196&#34;,&#34;0.4319813231178509&#34;,&#34;0.43173383257478504&#34;,&#34;0.4303997167352433&#34;,&#34;0.429398559339474&#34;,&#34;0.4299648257425132&#34;,&#34;0.4297343398397519&#34;,&#34;0.42997828353732326&#34;,&#34;0.42937033740290426&#34;,&#34;0.42883620108710657&#34;,&#34;0.42920069115240905&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;688064082&#34;,&#34;btcPrice&#34;:&#34;0.000021445526252119&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11984369729&#34;,&#34;price&#34;:&#34;33.73772094047453&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.76424676052897&#34;,&#34;33.851653978639725&#34;,&#34;34.0161400563986&#34;,&#34;34.24080407969258&#34;,&#34;34.31681894129343&#34;,&#34;34.35588900553808&#34;,&#34;34.33042777400873&#34;,&#34;34.38277635446187&#34;,&#34;34.379681489180044&#34;,&#34;34.23752810964467&#34;,&#34;34.00887003667719&#34;,&#34;34.03341197552819&#34;,&#34;34.0205375439139&#34;,&#34;33.986450347226565&#34;,&#34;33.97284356925897&#34;,&#34;34.12322348136839&#34;,&#34;34.04818308388973&#34;,&#34;33.90841528770745&#34;,&#34;33.922236226998955&#34;,&#34;33.895084271212774&#34;,&#34;33.877508596833344&#34;,&#34;33.769632367031555&#34;,&#34;33.71898828195219&#34;,&#34;33.69001212339477&#34;,&#34;33.72267866886839&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;777816550&#34;,&#34;btcPrice&#34;:&#34;0.001683262966698214&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8488807961&#34;,&#34;price&#34;:&#34;0.06398401339869234&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.80&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06431595805843943&#34;,&#34;0.06435400841112346&#34;,&#34;0.0645379870268131&#34;,&#34;0.0650123288913721&#34;,&#34;0.06501563524570002&#34;,&#34;0.06505378638919912&#34;,&#34;0.0657960580235114&#34;,&#34;0.06603851629936867&#34;,&#34;0.0658184759881278&#34;,&#34;0.06555988714644552&#34;,&#34;0.06534311647764794&#34;,&#34;0.06512217936701878&#34;,&#34;0.06525813392333525&#34;,&#34;0.06507123735868817&#34;,&#34;0.06508747877233641&#34;,&#34;0.06537694106515178&#34;,&#34;0.06521416310707462&#34;,&#34;0.06486795280882116&#34;,&#34;0.06440018609785521&#34;,&#34;0.06431000551190193&#34;,&#34;0.06399099516985579&#34;,&#34;0.0639611688502269&#34;,&#34;0.06388198077385676&#34;,&#34;0.06396888900414123&#34;,&#34;0.06390412971383753&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;479258397&#34;,&#34;btcPrice&#34;:&#34;0.000003192329452389&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7357221715&#34;,&#34;price&#34;:&#34;0.8402806991486048&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8434958048685458&#34;,&#34;0.850001213528094&#34;,&#34;0.853335038035505&#34;,&#34;0.8542282047138157&#34;,&#34;0.8515372370926926&#34;,&#34;0.8500057857531073&#34;,&#34;0.8471550687491181&#34;,&#34;0.8479199485431772&#34;,&#34;0.8469126231548905&#34;,&#34;0.8444467185672693&#34;,&#34;0.8452742352058495&#34;,&#34;0.8476150079540906&#34;,&#34;0.8463925672110996&#34;,&#34;0.8432430183950218&#34;,&#34;0.8407816804410218&#34;,&#34;0.8419007497492077&#34;,&#34;0.8398864867524278&#34;,&#34;0.8393073071328305&#34;,&#34;0.8429567390022452&#34;,&#34;0.8430941255831178&#34;,&#34;0.8444119779861358&#34;,&#34;0.8446502533596543&#34;,&#34;0.8422100742264239&#34;,&#34;0.8398203812650741&#34;,&#34;0.8392859340943655&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;448903663&#34;,&#34;btcPrice&#34;:&#34;0.000041923797550038&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7333124913&#34;,&#34;price&#34;:&#34;6.374344819711631&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.33&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.399722350341929&#34;,&#34;6.407431469281856&#34;,&#34;6.427796901211662&#34;,&#34;6.453758384149317&#34;,&#34;6.486494555997307&#34;,&#34;6.502517900580541&#34;,&#34;6.4967988980633296&#34;,&#34;6.498221992937296&#34;,&#34;6.477292881924281&#34;,&#34;6.477685872716661&#34;,&#34;6.447216988451034&#34;,&#34;6.445307223733043&#34;,&#34;6.445036089260377&#34;,&#34;6.436040246095806&#34;,&#34;6.435080457086081&#34;,&#34;6.463836456516857&#34;,&#34;6.450387542070514&#34;,&#34;6.421359237807177&#34;,&#34;6.391124134834344&#34;,&#34;6.389976567958392&#34;,&#34;6.385572049998837&#34;,&#34;6.392125200223458&#34;,&#34;6.382091060151221&#34;,&#34;6.386981587242469&#34;,&#34;6.371255606973179&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;203228586&#34;,&#34;btcPrice&#34;:&#34;0.000318032702651025&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6650702423&#34;,&#34;price&#34;:&#34;0.000011280863460425&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.64&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011387877948418&#34;,&#34;0.000011396704562993&#34;,&#34;0.000011430609861&#34;,&#34;0.000011487055432932&#34;,&#34;0.00001152036610693&#34;,&#34;0.000011526380751596&#34;,&#34;0.000011558700842959&#34;,&#34;0.000011588746012207&#34;,&#34;0.000011501542165893&#34;,&#34;0.000011474456994294&#34;,&#34;0.000011432798956209&#34;,&#34;0.000011440729374507&#34;,&#34;0.000011461144205322&#34;,&#34;0.000011476554808705&#34;,&#34;0.000011469743005642&#34;,&#34;0.00001147197624755&#34;,&#34;0.000011424815330699&#34;,&#34;0.000011366708333454&#34;,&#34;0.0000113570498162&#34;,&#34;0.000011330129168691&#34;,&#34;0.000011283648128574&#34;,&#34;0.000011278387257469&#34;,&#34;0.000011289529854914&#34;,&#34;0.000011276233126799&#34;,&#34;0.000011273560500492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;280794784&#34;,&#34;btcPrice&#34;:&#34;5.62831726e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330165313&#34;,&#34;price&#34;:&#34;0.9999235811511265&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0002501483819342&#34;,&#34;0.9996079953426593&#34;,&#34;0.9998324870129061&#34;,&#34;0.9990101105933146&#34;,&#34;0.9994857500759958&#34;,&#34;0.999624908391188&#34;,&#34;0.9998816954065115&#34;,&#34;0.9994957093637207&#34;,&#34;1.0001208517367788&#34;,&#34;1.0005216349460553&#34;,&#34;1.0000957970716848&#34;,&#34;1.000296333339733&#34;,&#34;1.0000223644977213&#34;,&#34;1.0001689023102156&#34;,&#34;0.9997500246036027&#34;,&#34;0.999188166117977&#34;,&#34;1.0005244452746045&#34;,&#34;1.0009465956605519&#34;,&#34;0.999923212227354&#34;,&#34;0.999943746062425&#34;,&#34;0.9998895246210896&#34;,&#34;0.9996584146724661&#34;,&#34;1.00032070114622&#34;,&#34;1.0001058587674057&#34;,&#34;0.9999037241650416&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;129125861&#34;,&#34;btcPrice&#34;:&#34;0.000049888797665071&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5775077437&#34;,&#34;price&#34;:&#34;0.06254395432208257&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.35&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236315630333049&#34;,&#34;0.06246392912773974&#34;,&#34;0.06240652113985693&#34;,&#34;0.06227589703736964&#34;,&#34;0.06221053328122907&#34;,&#34;0.06260319363131635&#34;,&#34;0.06283033390340566&#34;,&#34;0.06275581270672362&#34;,&#34;0.0626978662815527&#34;,&#34;0.06256692378726383&#34;,&#34;0.062454674750590175&#34;,&#34;0.06247130825939604&#34;,&#34;0.06256137344897823&#34;,&#34;0.06269756605100256&#34;,&#34;0.06269254530093321&#34;,&#34;0.06269809717602999&#34;,&#34;0.06270258509423554&#34;,&#34;0.06262935941097252&#34;,&#34;0.0625525372842027&#34;,&#34;0.0626080433578714&#34;,&#34;0.06263852382635865&#34;,&#34;0.06265458985596026&#34;,&#34;0.06258971581342093&#34;,&#34;0.06255323825419136&#34;,&#34;0.06256018276012307&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;312325495&#34;,&#34;btcPrice&#34;:&#34;0.000003120481145925&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5506331908&#34;,&#34;price&#34;:&#34;1363.1831262096398&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.91&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.149143129576&#34;,&#34;1351.1432170463336&#34;,&#34;1354.6776632978115&#34;,&#34;1359.8352913708866&#34;,&#34;1372.7157537367023&#34;,&#34;1375.4201893881768&#34;,&#34;1373.656092011277&#34;,&#34;1374.4831471744365&#34;,&#34;1374.1769793087985&#34;,&#34;1370.915906218165&#34;,&#34;1366.8736380227815&#34;,&#34;1364.5777400837617&#34;,&#34;1361.7692633130323&#34;,&#34;1360.874730475116&#34;,&#34;1360.5880536977058&#34;,&#34;1367.7933188873656&#34;,&#34;1371.0864182649937&#34;,&#34;1366.2849418001506&#34;,&#34;1363.6612621508384&#34;,&#34;1366.3897957603679&#34;,&#34;1362.6017418911797&#34;,&#34;1363.558194381478&#34;,&#34;1361.1032201925939&#34;,&#34;1358.1013179936974&#34;,&#34;1359.5832745179157&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;190296605&#34;,&#34;btcPrice&#34;:&#34;0.06801276462109211&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412997860&#34;,&#34;price&#34;:&#34;6.970594962776281&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.24&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.773487842115684&#34;,&#34;6.754212108157756&#34;,&#34;6.7904912939092545&#34;,&#34;6.859091490236875&#34;,&#34;6.930938536697723&#34;,&#34;6.979888406385319&#34;,&#34;6.95205928455466&#34;,&#34;6.9286481982692205&#34;,&#34;6.908425318713336&#34;,&#34;6.880030568657563&#34;,&#34;6.8885892255227095&#34;,&#34;6.905746957106719&#34;,&#34;6.863039316865727&#34;,&#34;6.8298809342946445&#34;,&#34;6.841694456601706&#34;,&#34;6.90374298301861&#34;,&#34;6.8980780970926565&#34;,&#34;6.846666245892528&#34;,&#34;6.840143513460894&#34;,&#34;6.886346571294433&#34;,&#34;6.894919048207694&#34;,&#34;6.8980327967208135&#34;,&#34;6.897799219282073&#34;,&#34;6.917336871562214&#34;,&#34;6.9384106402636725&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;217649348&#34;,&#34;btcPrice&#34;:&#34;0.000347781178740445&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5074795440&#34;,&#34;price&#34;:&#34;17.139061861537474&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.58&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.253975766732072&#34;,&#34;17.305445105419164&#34;,&#34;17.35179898605964&#34;,&#34;17.43602090243061&#34;,&#34;17.5320617464102&#34;,&#34;17.556198635951862&#34;,&#34;17.522328032378404&#34;,&#34;17.567506807180212&#34;,&#34;17.518999622426595&#34;,&#34;17.438188969460462&#34;,&#34;17.396108974246218&#34;,&#34;17.373243917453404&#34;,&#34;17.336368659218273&#34;,&#34;17.319601875912156&#34;,&#34;17.320429202377582&#34;,&#34;17.375834229410586&#34;,&#34;17.37115155021162&#34;,&#34;17.337499378166246&#34;,&#34;17.29492516682681&#34;,&#34;17.27482970087828&#34;,&#34;17.236186499512122&#34;,&#34;17.23084707590994&#34;,&#34;17.187481717207028&#34;,&#34;17.155821443785648&#34;,&#34;17.14078782290297&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;232336499&#34;,&#34;btcPrice&#34;:&#34;0.000855112536095036&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906490614&#34;,&#34;price&#34;:&#34;20046.410227137&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20049.450436563653&#34;,&#34;20101.625670107587&#34;,&#34;20156.496626937733&#34;,&#34;20240.909995938804&#34;,&#34;20292.728315757773&#34;,&#34;20352.616852214596&#34;,&#34;20337.507383965705&#34;,&#34;20378.75288185548&#34;,&#34;20330.405569268383&#34;,&#34;20254.404761507907&#34;,&#34;20210.442606111905&#34;,&#34;20184.9491174058&#34;,&#34;20155.621076440202&#34;,&#34;20130.24398537466&#34;,&#34;20151.81371000324&#34;,&#34;20220.458796392188&#34;,&#34;20191.06461094672&#34;,&#34;20102.3711890372&#34;,&#34;20023.818445349818&#34;,&#34;20063.904548084807&#34;,&#34;20060.09333245677&#34;,&#34;20106.126030789226&#34;,&#34;20068.970588505534&#34;,&#34;20037.981397876472&#34;,&#34;20038.946703723883&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;65699991&#34;,&#34;btcPrice&#34;:&#34;1.0001677353996585&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4082107070&#34;,&#34;price&#34;:&#34;13.113113000226868&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.06&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.86904144147151&#34;,&#34;12.971292431991326&#34;,&#34;12.997809503523687&#34;,&#34;13.053288754075908&#34;,&#34;13.126935514160385&#34;,&#34;13.162946510226798&#34;,&#34;13.176459006280066&#34;,&#34;13.160096288039203&#34;,&#34;13.137389824650167&#34;,&#34;13.06998182322184&#34;,&#34;13.020726821088282&#34;,&#34;13.014732730953519&#34;,&#34;12.998975121153673&#34;,&#34;12.998577583467394&#34;,&#34;12.961451954944232&#34;,&#34;13.060564440903033&#34;,&#34;13.110658052250319&#34;,&#34;13.099438593619361&#34;,&#34;13.13330326447949&#34;,&#34;13.33452783192435&#34;,&#34;13.373831271270106&#34;,&#34;13.343650016008963&#34;,&#34;13.181674409038528&#34;,&#34;13.131683725387289&#34;,&#34;13.11536231838439&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;310021593&#34;,&#34;btcPrice&#34;:&#34;0.00065424743806362&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3938034123&#34;,&#34;price&#34;:&#34;15.650246402664713&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.564802534652488&#34;,&#34;15.557466143075752&#34;,&#34;15.524158368263686&#34;,&#34;15.564589461143923&#34;,&#34;15.626264641755956&#34;,&#34;15.739580440410696&#34;,&#34;15.723161103836562&#34;,&#34;15.756631052262051&#34;,&#34;15.719769516902309&#34;,&#34;15.679332809859426&#34;,&#34;15.65865704432778&#34;,&#34;15.65207565226499&#34;,&#34;15.638815307350377&#34;,&#34;15.638325526594082&#34;,&#34;15.630250194419004&#34;,&#34;15.770101867167902&#34;,&#34;15.772787444807776&#34;,&#34;15.726419071810144&#34;,&#34;15.730397527991796&#34;,&#34;15.706278363014619&#34;,&#34;15.644427965881071&#34;,&#34;15.661521309252834&#34;,&#34;15.65810007258811&#34;,&#34;15.657230878915703&#34;,&#34;15.653006930210385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;15757847&#34;,&#34;btcPrice&#34;:&#34;0.000780831646446624&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3815864606&#34;,&#34;price&#34;:&#34;53.846722765780676&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.92&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.29583735175494&#34;,&#34;54.33319375556465&#34;,&#34;54.50446073551073&#34;,&#34;54.689512299086346&#34;,&#34;54.83579215246787&#34;,&#34;54.86128649682968&#34;,&#34;54.85557746061394&#34;,&#34;54.79815311448016&#34;,&#34;54.77378739059752&#34;,&#34;54.513674702652395&#34;,&#34;54.35029802146673&#34;,&#34;54.358307825475265&#34;,&#34;54.422181211169935&#34;,&#34;54.4489516734391&#34;,&#34;54.48573164038176&#34;,&#34;54.566006895097175&#34;,&#34;54.60169376918578&#34;,&#34;54.434757779526166&#34;,&#34;54.23335179752326&#34;,&#34;54.413459080815954&#34;,&#34;54.21240080510803&#34;,&#34;54.29942643192169&#34;,&#34;54.14247458562991&#34;,&#34;54.048141904913244&#34;,&#34;53.830450120278314&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;386436989&#34;,&#34;btcPrice&#34;:&#34;0.002686553560319697&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3291845373&#34;,&#34;price&#34;:&#34;24.66016972332323&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.683542378165935&#34;,&#34;24.719459773866813&#34;,&#34;24.76219388151077&#34;,&#34;24.89617949229818&#34;,&#34;24.99584490014685&#34;,&#34;25.024271811661002&#34;,&#34;25.03560312685286&#34;,&#34;25.100681844582844&#34;,&#34;25.06002637860313&#34;,&#34;24.964601458157446&#34;,&#34;24.906805998876433&#34;,&#34;24.881179208531478&#34;,&#34;24.84671933295274&#34;,&#34;24.828862066050032&#34;,&#34;24.846952016930494&#34;,&#34;24.962693812346263&#34;,&#34;24.917387870404692&#34;,&#34;24.806139246634455&#34;,&#34;24.74429478499735&#34;,&#34;24.780282567891753&#34;,&#34;24.77215711531799&#34;,&#34;24.782999234672975&#34;,&#34;24.733584769696286&#34;,&#34;24.691015340268255&#34;,&#34;24.666234967252606&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;40334123&#34;,&#34;btcPrice&#34;:&#34;0.001230360240426445&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3270026019&#34;,&#34;price&#34;:&#34;28.113947823836092&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.95&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.57375287086344&#34;,&#34;27.583701817024274&#34;,&#34;27.628337152556885&#34;,&#34;27.71293784101918&#34;,&#34;28.233029378330688&#34;,&#34;28.720730972372852&#34;,&#34;28.46641731982247&#34;,&#34;28.461748558520167&#34;,&#34;28.43371813306647&#34;,&#34;28.28911168246897&#34;,&#34;28.14473632072935&#34;,&#34;28.15563557551264&#34;,&#34;28.240843430286514&#34;,&#34;28.318006504862765&#34;,&#34;28.299833108837987&#34;,&#34;28.329928166122407&#34;,&#34;28.27078454554885&#34;,&#34;28.13957915693539&#34;,&#34;28.037422192263545&#34;,&#34;28.02538763544355&#34;,&#34;27.990684342238957&#34;,&#34;27.99587068353575&#34;,&#34;27.980180249457508&#34;,&#34;27.96831699810348&#34;,&#34;28.017446779311992&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;583436183&#34;,&#34;btcPrice&#34;:&#34;0.001402678245606579&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2708742548&#34;,&#34;price&#34;:&#34;148.96689473750794&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.98&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.06343032587645&#34;,&#34;146.2075982055981&#34;,&#34;146.16344802044546&#34;,&#34;146.888041879794&#34;,&#34;147.51024728525&#34;,&#34;147.80256016994798&#34;,&#34;148.2027654532922&#34;,&#34;149.11840657324646&#34;,&#34;148.0031628172107&#34;,&#34;146.08426002755598&#34;,&#34;145.4683320265626&#34;,&#34;145.45336396325644&#34;,&#34;145.13011985927878&#34;,&#34;145.01926185302602&#34;,&#34;145.05380463743765&#34;,&#34;145.5189388138254&#34;,&#34;144.94121932498405&#34;,&#34;144.55169371872742&#34;,&#34;144.03637609256356&#34;,&#34;144.0602822952893&#34;,&#34;143.9422537624223&#34;,&#34;144.01800973377962&#34;,&#34;144.85743594518297&#34;,&#34;145.90656965474264&#34;,&#34;146.43871992411874&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;115093840&#34;,&#34;btcPrice&#34;:&#34;0.007432347241774043&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467427793&#34;,&#34;price&#34;:&#34;0.35172981355990574&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.16&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515600123998059&#34;,&#34;0.35203683586559326&#34;,&#34;0.3530001942757888&#34;,&#34;0.35412309079161114&#34;,&#34;0.35642368756646714&#34;,&#34;0.35691371592641125&#34;,&#34;0.35632693256778514&#34;,&#34;0.35761063132157045&#34;,&#34;0.35770076129143336&#34;,&#34;0.35735739919120424&#34;,&#34;0.35578661849459614&#34;,&#34;0.35494000660403097&#34;,&#34;0.3544949322189096&#34;,&#34;0.35419673898063&#34;,&#34;0.3545814398327581&#34;,&#34;0.3560563698021784&#34;,&#34;0.35476940248868055&#34;,&#34;0.35303138884975377&#34;,&#34;0.3526138360299577&#34;,&#34;0.353297325772352&#34;,&#34;0.3530050986834627&#34;,&#34;0.3519348960977679&#34;,&#34;0.3512839084444219&#34;,&#34;0.35035540536790366&#34;,&#34;0.35085105792254034&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;115391491&#34;,&#34;btcPrice&#34;:&#34;0.000017548718554334&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2437361911&#34;,&#34;price&#34;:&#34;0.12062849560760455&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.34&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11887874398521932&#34;,&#34;0.11899682832112154&#34;,&#34;0.11900784650582279&#34;,&#34;0.11903091787613028&#34;,&#34;0.11932756061340988&#34;,&#34;0.1193124601461036&#34;,&#34;0.11935198330687927&#34;,&#34;0.11968956008888623&#34;,&#34;0.11982768782602261&#34;,&#34;0.11926800493330945&#34;,&#34;0.11894584887939669&#34;,&#34;0.11912211829876701&#34;,&#34;0.11882743355055038&#34;,&#34;0.11868474386838856&#34;,&#34;0.11878227754760867&#34;,&#34;0.11974550069912294&#34;,&#34;0.11958643330478903&#34;,&#34;0.11927337184798883&#34;,&#34;0.11957351041625688&#34;,&#34;0.11944049884817015&#34;,&#34;0.12009378998253879&#34;,&#34;0.12024109052539109&#34;,&#34;0.12017728479638659&#34;,&#34;0.12012660542021919&#34;,&#34;0.12022267745313032&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;183603999&#34;,&#34;btcPrice&#34;:&#34;0.0000060184705346&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2276265173&#34;,&#34;price&#34;:&#34;118.98058610983257&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.66&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.32262573171138&#34;,&#34;122.21216671462395&#34;,&#34;122.2424076189862&#34;,&#34;122.65231412716444&#34;,&#34;123.18814722852751&#34;,&#34;123.0389419465099&#34;,&#34;122.7525437321455&#34;,&#34;122.63297695763477&#34;,&#34;122.25888231512374&#34;,&#34;121.6083740301883&#34;,&#34;121.0704992507114&#34;,&#34;121.08119723327034&#34;,&#34;121.3486844528348&#34;,&#34;121.35241663771652&#34;,&#34;121.4308975310673&#34;,&#34;121.83807088869149&#34;,&#34;121.79108869683151&#34;,&#34;121.38727041457742&#34;,&#34;120.77014246462569&#34;,&#34;120.9730955171752&#34;,&#34;120.81712651964756&#34;,&#34;120.67586343768751&#34;,&#34;120.35934093743896&#34;,&#34;119.33573062080143&#34;,&#34;118.92020484427697&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;207705732&#34;,&#34;btcPrice&#34;:&#34;0.005936252028051548&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2254967512&#34;,&#34;price&#34;:&#34;20043.97749206499&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.40&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20057.082143515574&#34;,&#34;20073.73634471567&#34;,&#34;20155.35074272695&#34;,&#34;20201.665838224184&#34;,&#34;20307.87652463223&#34;,&#34;20347.737496425136&#34;,&#34;20336.451830858347&#34;,&#34;20370.359230166003&#34;,&#34;20347.242691661544&#34;,&#34;20289.47946418053&#34;,&#34;20236.389261394786&#34;,&#34;20216.767454565917&#34;,&#34;20157.58477689183&#34;,&#34;20148.427911440165&#34;,&#34;20139.404745478332&#34;,&#34;20195.51476083255&#34;,&#34;20218.207717425983&#34;,&#34;20128.86850120113&#34;,&#34;20006.9744546404&#34;,&#34;20060.410623139804&#34;,&#34;20033.996371801375&#34;,&#34;20098.47310976815&#34;,&#34;20097.464012404307&#34;,&#34;20046.809041658624&#34;,&#34;20049.799901903058&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24085498&#34;,&#34;btcPrice&#34;:&#34;1.0000463598965021&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2207091566&#34;,&#34;price&#34;:&#34;0.10974041351835884&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10962651467178453&#34;,&#34;0.10994008962491644&#34;,&#34;0.1102558436062367&#34;,&#34;0.11066651769044844&#34;,&#34;0.11099761359490694&#34;,&#34;0.11112033875517015&#34;,&#34;0.11109668798682694&#34;,&#34;0.11125486280094371&#34;,&#34;0.11097328447826356&#34;,&#34;0.11061839872555923&#34;,&#34;0.11051157703154837&#34;,&#34;0.11040516533585498&#34;,&#34;0.11018324144957391&#34;,&#34;0.11015957429341776&#34;,&#34;0.11025941309951554&#34;,&#34;0.1107306596648452&#34;,&#34;0.11056541424952443&#34;,&#34;0.11033981054182589&#34;,&#34;0.11014982408569168&#34;,&#34;0.11018846762437533&#34;,&#34;0.11026378704001755&#34;,&#34;0.11036637137706824&#34;,&#34;0.11006396812568181&#34;,&#34;0.10976547166697294&#34;,&#34;0.10969235793422591&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;32894151&#34;,&#34;btcPrice&#34;:&#34;0.000005475235696908&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2206952701&#34;,&#34;price&#34;:&#34;3.630786016166329&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.37&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6764432411708334&#34;,&#34;3.6877377535157785&#34;,&#34;3.695275020835127&#34;,&#34;3.703712737949751&#34;,&#34;3.7340726187087037&#34;,&#34;3.7301224517518223&#34;,&#34;3.726830183476546&#34;,&#34;3.732039649903934&#34;,&#34;3.717434927228703&#34;,&#34;3.6877396306355372&#34;,&#34;3.672153124641749&#34;,&#34;3.6712014753545934&#34;,&#34;3.682858101631704&#34;,&#34;3.6816966205355786&#34;,&#34;3.6732422481738896&#34;,&#34;3.68742500998647&#34;,&#34;3.67949841043138&#34;,&#34;3.658086252545483&#34;,&#34;3.6466882303359083&#34;,&#34;3.653534815527586&#34;,&#34;3.6524651001872352&#34;,&#34;3.6566637162352977&#34;,&#34;3.6505578611908183&#34;,&#34;3.641624197517031&#34;,&#34;3.6360026668443743&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;214660455&#34;,&#34;btcPrice&#34;:&#34;0.000181149392153712&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1912308135&#34;,&#34;price&#34;:&#34;0.000290147954073881&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.81&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297534732475355&#34;,&#34;0.00029924350285628&#34;,&#34;0.000301788299795161&#34;,&#34;0.000299920153570012&#34;,&#34;0.000298931795978761&#34;,&#34;0.00030181081782183&#34;,&#34;0.000303176990591589&#34;,&#34;0.000301682155659599&#34;,&#34;0.000300427127360826&#34;,&#34;0.000299399340560452&#34;,&#34;0.000295889751885886&#34;,&#34;0.000294483950425306&#34;,&#34;0.000296163406502654&#34;,&#34;0.000295896753590268&#34;,&#34;0.000296293813138895&#34;,&#34;0.00029712340206075&#34;,&#34;0.000296241802461865&#34;,&#34;0.000294833413425782&#34;,&#34;0.000295805632133273&#34;,&#34;0.000295448279840089&#34;,&#34;0.000294342506473691&#34;,&#34;0.000292052607134611&#34;,&#34;0.000290629002509443&#34;,&#34;0.000292037309457244&#34;,&#34;0.000292007407136324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;87308849&#34;,&#34;btcPrice&#34;:&#34;1.4476238831e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1809009261&#34;,&#34;price&#34;:&#34;1.8090092609827892&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.08&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8200632272957997&#34;,&#34;1.8247805232483643&#34;,&#34;1.828712312707551&#34;,&#34;1.833483750666553&#34;,&#34;1.8388113856711226&#34;,&#34;1.8340065059765118&#34;,&#34;1.833810679916731&#34;,&#34;1.8379730157830576&#34;,&#34;1.839871909045534&#34;,&#34;1.8316951407594886&#34;,&#34;1.8218905615149048&#34;,&#34;1.8133420432182386&#34;,&#34;1.8119386729956268&#34;,&#34;1.8082288357010967&#34;,&#34;1.8068009632735749&#34;,&#34;1.8188388540688198&#34;,&#34;1.8203819894312625&#34;,&#34;1.814524337055796&#34;,&#34;1.808721193963964&#34;,&#34;1.8196357521223283&#34;,&#34;1.815149328780377&#34;,&#34;1.8112776438372116&#34;,&#34;1.8108458436676627&#34;,&#34;1.8027262559586126&#34;,&#34;1.805119314397385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12137167&#34;,&#34;btcPrice&#34;:&#34;0.000090256194269879&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767866343&#34;,&#34;price&#34;:&#34;1.7061053298863806&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.32&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6885003563699261&#34;,&#34;1.6911129238364746&#34;,&#34;1.6949035542249486&#34;,&#34;1.7027954737084738&#34;,&#34;1.7125610716564361&#34;,&#34;1.7140651860196017&#34;,&#34;1.714695946307908&#34;,&#34;1.7186349196969963&#34;,&#34;1.7112095222795702&#34;,&#34;1.7059432521776707&#34;,&#34;1.6993434662570355&#34;,&#34;1.7005773278388585&#34;,&#34;1.6968447607894448&#34;,&#34;1.6929234664355564&#34;,&#34;1.692450465901943&#34;,&#34;1.7010313056523052&#34;,&#34;1.6985550988885165&#34;,&#34;1.6893705490937398&#34;,&#34;1.6866645696902811&#34;,&#34;1.7019443099317626&#34;,&#34;1.7014230772153076&#34;,&#34;1.7069133070811424&#34;,&#34;1.7033611748224882&#34;,&#34;1.6994360137640887&#34;,&#34;1.704400633762173&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;71187916&#34;,&#34;btcPrice&#34;:&#34;0.000085122048526962&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725996262&#34;,&#34;price&#34;:&#34;17.259962623670035&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.03&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.0775388533003&#34;,&#34;17.067912741278125&#34;,&#34;17.19371992172132&#34;,&#34;17.4049080612785&#34;,&#34;17.349122197170388&#34;,&#34;17.383691525495145&#34;,&#34;17.38955154672953&#34;,&#34;17.62408133673586&#34;,&#34;17.593322076060364&#34;,&#34;17.4386892965598&#34;,&#34;17.328889316544824&#34;,&#34;17.447514865666506&#34;,&#34;17.32297480082281&#34;,&#34;17.37509972478323&#34;,&#34;17.34525419003646&#34;,&#34;17.409372532584655&#34;,&#34;17.389133405821546&#34;,&#34;17.35036829752898&#34;,&#34;17.427069919455597&#34;,&#34;17.552044170794996&#34;,&#34;17.412493725255267&#34;,&#34;17.349458429441366&#34;,&#34;17.146992959728287&#34;,&#34;17.252120262541386&#34;,&#34;17.264212303383914&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19832838&#34;,&#34;btcPrice&#34;:&#34;0.000860915853391649&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1632172859&#34;,&#34;price&#34;:&#34;5.553360617882926&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.39&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.563583111239947&#34;,&#34;5.566550453652093&#34;,&#34;5.574658649368248&#34;,&#34;5.59947207926758&#34;,&#34;5.623738949982796&#34;,&#34;5.620874463842186&#34;,&#34;5.636449717522663&#34;,&#34;5.636012075827377&#34;,&#34;5.621787024814909&#34;,&#34;5.604863066684564&#34;,&#34;5.59106302185655&#34;,&#34;5.592521259925081&#34;,&#34;5.578504466675582&#34;,&#34;5.569698214994045&#34;,&#34;5.57106966286358&#34;,&#34;5.5871830930712845&#34;,&#34;5.58594625512426&#34;,&#34;5.567567471367906&#34;,&#34;5.557070809165411&#34;,&#34;5.564056973722409&#34;,&#34;5.560812558868851&#34;,&#34;5.555371588027569&#34;,&#34;5.5431943077677825&#34;,&#34;5.540294464973471&#34;,&#34;5.542380071855275&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;155725594&#34;,&#34;btcPrice&#34;:&#34;0.000277071657723871&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579991723&#34;,&#34;price&#34;:&#34;6.0165579380799885&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.016755740637141&#34;,&#34;6.025549949045874&#34;,&#34;6.025640938683228&#34;,&#34;6.0377448148370085&#34;,&#34;6.064372958080765&#34;,&#34;6.083168222934446&#34;,&#34;6.121138125111502&#34;,&#34;6.122110772502033&#34;,&#34;6.115151992864029&#34;,&#34;6.094617924935418&#34;,&#34;6.060091344132251&#34;,&#34;6.055252608620663&#34;,&#34;6.044824998176658&#34;,&#34;6.039684832886364&#34;,&#34;6.031722431559297&#34;,&#34;6.051848135596568&#34;,&#34;6.052505386943968&#34;,&#34;6.039004021283348&#34;,&#34;6.03094716124407&#34;,&#34;6.0282463753416&#34;,&#34;6.032921444329065&#34;,&#34;6.04632010848593&#34;,&#34;6.041115706175561&#34;,&#34;6.045998924171826&#34;,&#34;6.0229305076806545&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;35516114&#34;,&#34;btcPrice&#34;:&#34;0.000300181781159216&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1572684480&#34;,&#34;price&#34;:&#34;0.023557025426635677&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.72&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.02375170887710745&#34;,&#34;0.023790767210407363&#34;,&#34;0.02385906108038382&#34;,&#34;0.023963654949121647&#34;,&#34;0.024032391322482857&#34;,&#34;0.02406040482720113&#34;,&#34;0.0240241062637749&#34;,&#34;0.024037336226182978&#34;,&#34;0.02400171948264513&#34;,&#34;0.02387998962803967&#34;,&#34;0.02378930361410667&#34;,&#34;0.02383913575157462&#34;,&#34;0.02381560283772684&#34;,&#34;0.02375080527252874&#34;,&#34;0.023755408145521056&#34;,&#34;0.02387716977416547&#34;,&#34;0.02387351543491939&#34;,&#34;0.023763817483126306&#34;,&#34;0.023691552163897643&#34;,&#34;0.023726104965078293&#34;,&#34;0.02368589760998112&#34;,&#34;0.023671062742535463&#34;,&#34;0.023601726034422614&#34;,&#34;0.0235570377718252&#34;,&#34;0.0235469112210421&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;88620897&#34;,&#34;btcPrice&#34;:&#34;0.000001175321491816&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1553748228&#34;,&#34;price&#34;:&#34;4.671730797095194&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.661125064396867&#34;,&#34;4.663869351538766&#34;,&#34;4.66954849891612&#34;,&#34;4.700257578283811&#34;,&#34;4.730018157572612&#34;,&#34;4.714143976512721&#34;,&#34;4.723478551910749&#34;,&#34;4.726841497246268&#34;,&#34;4.71589081766422&#34;,&#34;4.704019970362516&#34;,&#34;4.6988239161796725&#34;,&#34;4.701002359282831&#34;,&#34;4.691700450917038&#34;,&#34;4.677135351952703&#34;,&#34;4.694429858732558&#34;,&#34;4.721898404666295&#34;,&#34;4.72192706714792&#34;,&#34;4.711492514608389&#34;,&#34;4.722961417487937&#34;,&#34;4.727350513894986&#34;,&#34;4.726777756847048&#34;,&#34;4.730691546772397&#34;,&#34;4.723894121828546&#34;,&#34;4.720900237522959&#34;,&#34;4.694323412913096&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;62601195&#34;,&#34;btcPrice&#34;:&#34;0.000233084844557472&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535345175&#34;,&#34;price&#34;:&#34;0.6999520749208403&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.37&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7018437336148443&#34;,&#34;0.7012296643669335&#34;,&#34;0.7022993535952263&#34;,&#34;0.7043824624342494&#34;,&#34;0.7061012732016445&#34;,&#34;0.7092722059821073&#34;,&#34;0.7107294942869858&#34;,&#34;0.7108990080244315&#34;,&#34;0.7099791984418414&#34;,&#34;0.7078420220186218&#34;,&#34;0.7051095437828625&#34;,&#34;0.707248929548027&#34;,&#34;0.7050915198697436&#34;,&#34;0.7044747588216688&#34;,&#34;0.7041160697442599&#34;,&#34;0.7066206655413716&#34;,&#34;0.7058549946852882&#34;,&#34;0.7032486369948753&#34;,&#34;0.7012876549332069&#34;,&#34;0.7009747852786251&#34;,&#34;0.700473849406315&#34;,&#34;0.7005982029037023&#34;,&#34;0.7002369574369308&#34;,&#34;0.7006334207984222&#34;,&#34;0.7000127772948245&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;113068798&#34;,&#34;btcPrice&#34;:&#34;0.000034922436173344&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1529157571&#34;,&#34;price&#34;:&#34;0.7645787855498196&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.80&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7862352418397442&#34;,&#34;0.7857962385011888&#34;,&#34;0.7860823591712383&#34;,&#34;0.7913864227222935&#34;,&#34;0.7931731378366671&#34;,&#34;0.7918535836709918&#34;,&#34;0.7934385490032205&#34;,&#34;0.7935992087657073&#34;,&#34;0.7897855169136626&#34;,&#34;0.7868869873929384&#34;,&#34;0.7827511307418661&#34;,&#34;0.7829200782135203&#34;,&#34;0.7815399732777862&#34;,&#34;0.7772118263855671&#34;,&#34;0.7746419330272937&#34;,&#34;0.7799681155884691&#34;,&#34;0.777981466209664&#34;,&#34;0.7739045575146072&#34;,&#34;0.7718550460057184&#34;,&#34;0.7715939215456447&#34;,&#34;0.7695383673672498&#34;,&#34;0.7673191324882311&#34;,&#34;0.7657534786224457&#34;,&#34;0.764881660541454&#34;,&#34;0.7646092366582135&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;145242009&#34;,&#34;btcPrice&#34;:&#34;0.000038146831468249&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1413337607&#34;,&#34;price&#34;:&#34;0.058052265495351495&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770820809062958&#34;,&#34;0.05773161591193554&#34;,&#34;0.057901448026430706&#34;,&#34;0.058104711439575775&#34;,&#34;0.05821494457445837&#34;,&#34;0.05837605385144989&#34;,&#34;0.0583912493104286&#34;,&#34;0.058424171286181624&#34;,&#34;0.05828953359467471&#34;,&#34;0.058191254382563104&#34;,&#34;0.058069476804724386&#34;,&#34;0.05816012171446981&#34;,&#34;0.05809696154952601&#34;,&#34;0.05804430834562561&#34;,&#34;0.058079013279903904&#34;,&#34;0.058270287529447726&#34;,&#34;0.05828744692577993&#34;,&#34;0.05819030965298005&#34;,&#34;0.05799510351002881&#34;,&#34;0.05801850162696806&#34;,&#34;0.05804288093820356&#34;,&#34;0.05809254408384736&#34;,&#34;0.05803413483043568&#34;,&#34;0.057982852173679544&#34;,&#34;0.05799862984287226&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;38825707&#34;,&#34;btcPrice&#34;:&#34;0.000002896379065251&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359878097&#34;,&#34;price&#34;:&#34;1.001334577613883&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.99995237657306&#34;,&#34;0.9992610930077082&#34;,&#34;0.9995048898577841&#34;,&#34;0.9984857957300194&#34;,&#34;0.9991338275862605&#34;,&#34;0.9991463646832447&#34;,&#34;0.9995515068035792&#34;,&#34;0.9992688671456238&#34;,&#34;0.9999129851645419&#34;,&#34;1.0002242997546233&#34;,&#34;0.999712820332821&#34;,&#34;1.0000332602428952&#34;,&#34;0.9995079927133396&#34;,&#34;0.999782374902935&#34;,&#34;0.999308877507305&#34;,&#34;0.9988846870195152&#34;,&#34;1.0005152287641716&#34;,&#34;1.0008340522704022&#34;,&#34;0.9994436410988572&#34;,&#34;0.9996849217788387&#34;,&#34;0.9995211220531371&#34;,&#34;0.999211197536607&#34;,&#34;0.9999983085146361&#34;,&#34;0.999769500498533&#34;,&#34;1.0011860473290413&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6768277&#34;,&#34;btcPrice&#34;:&#34;0.000049959195961864&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1353847155&#34;,&#34;price&#34;:&#34;138.46931334806206&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.70&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.82868883894076&#34;,&#34;137.71306856606782&#34;,&#34;138.03647928074753&#34;,&#34;138.80197795554938&#34;,&#34;139.12071269372848&#34;,&#34;139.05878455835125&#34;,&#34;139.14677841096062&#34;,&#34;138.87253490735398&#34;,&#34;138.02179236057498&#34;,&#34;137.42442294208283&#34;,&#34;137.6271009908909&#34;,&#34;139.44419273993879&#34;,&#34;138.9594762558207&#34;,&#34;139.35956951767986&#34;,&#34;139.76224675334996&#34;,&#34;140.73346306408735&#34;,&#34;139.70014562219615&#34;,&#34;139.58102151134608&#34;,&#34;139.19177605867037&#34;,&#34;139.65458123164169&#34;,&#34;139.17824474960636&#34;,&#34;139.1901615972891&#34;,&#34;138.83319330338816&#34;,&#34;138.1218448902609&#34;,&#34;138.15277303739376&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;71501255&#34;,&#34;btcPrice&#34;:&#34;0.006908595503358421&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1316030339&#34;,&#34;price&#34;:&#34;55.7002018134128&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.89&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.49977253219301&#34;,&#34;54.11874620026287&#34;,&#34;54.2183062824539&#34;,&#34;54.68045352030543&#34;,&#34;55.29261101979573&#34;,&#34;55.12466500529631&#34;,&#34;55.4096265101037&#34;,&#34;55.17360006105945&#34;,&#34;55.03825697066999&#34;,&#34;54.83782041498208&#34;,&#34;54.61174346698164&#34;,&#34;54.72261326487687&#34;,&#34;55.07467359664748&#34;,&#34;55.12258904806393&#34;,&#34;55.12232719822051&#34;,&#34;55.10748540691841&#34;,&#34;55.01733359597467&#34;,&#34;54.876885804473424&#34;,&#34;54.85576050348866&#34;,&#34;55.096674446643746&#34;,&#34;55.35611005385607&#34;,&#34;54.96784781952569&#34;,&#34;54.84449264613283&#34;,&#34;54.95034295425699&#34;,&#34;55.112649002423744&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;72484623&#34;,&#34;btcPrice&#34;:&#34;0.002779028468329484&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298954067&#34;,&#34;price&#34;:&#34;1.4302723371340804&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.37&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.421883939884071&#34;,&#34;1.42509607402001&#34;,&#34;1.4278239665456545&#34;,&#34;1.4336636277697252&#34;,&#34;1.4443645638453815&#34;,&#34;1.4463747088081587&#34;,&#34;1.4428608091094144&#34;,&#34;1.4490881454348474&#34;,&#34;1.4450878337651158&#34;,&#34;1.4401715843904537&#34;,&#34;1.4355148328665224&#34;,&#34;1.4365319902236815&#34;,&#34;1.4339651090330499&#34;,&#34;1.4334495267586773&#34;,&#34;1.4333504141935083&#34;,&#34;1.4389840361204465&#34;,&#34;1.4379456439736016&#34;,&#34;1.4315401694215406&#34;,&#34;1.4240153029007887&#34;,&#34;1.4240927210678032&#34;,&#34;1.4220389629012662&#34;,&#34;1.4290008245398644&#34;,&#34;1.4312652127406216&#34;,&#34;1.4310909189590104&#34;,&#34;1.4306725904273427&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;35958124&#34;,&#34;btcPrice&#34;:&#34;0.000071360020483851&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281371060&#34;,&#34;price&#34;:&#34;0.21568734363318337&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.48&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.21553593139708543&#34;,&#34;0.21544366417321525&#34;,&#34;0.21646610949174847&#34;,&#34;0.21730782782429547&#34;,&#34;0.21865681130587172&#34;,&#34;0.21939390999187283&#34;,&#34;0.21985592005582816&#34;,&#34;0.21915437745243896&#34;,&#34;0.2184171446254368&#34;,&#34;0.21798236632181323&#34;,&#34;0.21690087683062034&#34;,&#34;0.21604240077342493&#34;,&#34;0.21587704160172458&#34;,&#34;0.2158448062065273&#34;,&#34;0.21568131629647883&#34;,&#34;0.21628666481515962&#34;,&#34;0.21575577092565493&#34;,&#34;0.21492437995400548&#34;,&#34;0.21514404501911413&#34;,&#34;0.2171108493305216&#34;,&#34;0.21771656940310347&#34;,&#34;0.21679986568652215&#34;,&#34;0.21607273994568685&#34;,&#34;0.21599406892348155&#34;,&#34;0.216016823604864&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;205319395&#34;,&#34;btcPrice&#34;:&#34;0.000010761204604301&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273244296&#34;,&#34;price&#34;:&#34;0.8491294389371948&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.58&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8590405964683089&#34;,&#34;0.859478250004335&#34;,&#34;0.8609939510022012&#34;,&#34;0.8652881133772078&#34;,&#34;0.8665208089867517&#34;,&#34;0.8666644958759461&#34;,&#34;0.8662362089943302&#34;,&#34;0.8669849089516505&#34;,&#34;0.8647803548984957&#34;,&#34;0.8606548254227334&#34;,&#34;0.858647121421129&#34;,&#34;0.8662635524287782&#34;,&#34;0.8588847882234059&#34;,&#34;0.8544149170251873&#34;,&#34;0.8528484459196816&#34;,&#34;0.8567742977148085&#34;,&#34;0.8559971556239261&#34;,&#34;0.8526369746427614&#34;,&#34;0.8503963749700182&#34;,&#34;0.8514893353210455&#34;,&#34;0.8513642787546029&#34;,&#34;0.8508505323793061&#34;,&#34;0.8483933250963328&#34;,&#34;0.8475209589259349&#34;,&#34;0.8482538011775931&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;116012726&#34;,&#34;btcPrice&#34;:&#34;0.000042365284276849&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1216349067&#34;,&#34;price&#34;:&#34;1.5122657530928172&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5150991540359635&#34;,&#34;1.5176061095960762&#34;,&#34;1.5245756510192037&#34;,&#34;1.5369489213784007&#34;,&#34;1.5521086753177897&#34;,&#34;1.5577273434480916&#34;,&#34;1.5620222188046804&#34;,&#34;1.5618008806408366&#34;,&#34;1.5635266954065115&#34;,&#34;1.5512539189835166&#34;,&#34;1.5391754904487456&#34;,&#34;1.5415483542201813&#34;,&#34;1.5406687905041778&#34;,&#34;1.5536997118197664&#34;,&#34;1.5585509390347834&#34;,&#34;1.5605461378658754&#34;,&#34;1.556322526404288&#34;,&#34;1.5432139594119398&#34;,&#34;1.527711427666444&#34;,&#34;1.5295360489082588&#34;,&#34;1.5251991365229256&#34;,&#34;1.523882390305484&#34;,&#34;1.5152199119209957&#34;,&#34;1.5079084095454254&#34;,&#34;1.5059207760888258&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;14537858&#34;,&#34;btcPrice&#34;:&#34;0.000075450886041721&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1157143428&#34;,&#34;price&#34;:&#34;1.170587468937924&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1694694824289555&#34;,&#34;1.1709120673050462&#34;,&#34;1.1739859596809479&#34;,&#34;1.17900555328724&#34;,&#34;1.184230473597679&#34;,&#34;1.185710435108849&#34;,&#34;1.1864344657129484&#34;,&#34;1.1885516582635711&#34;,&#34;1.1870888275685685&#34;,&#34;1.1829654851494844&#34;,&#34;1.17709582794196&#34;,&#34;1.1762202099671832&#34;,&#34;1.1773458464363997&#34;,&#34;1.1770861707666584&#34;,&#34;1.1811474861902838&#34;,&#34;1.1833592012519114&#34;,&#34;1.1818251357201783&#34;,&#34;1.1782503602022067&#34;,&#34;1.176960097898779&#34;,&#34;1.1767921922729265&#34;,&#34;1.1759604894059537&#34;,&#34;1.1750064515228658&#34;,&#34;1.1729163746108195&#34;,&#34;1.170358956437112&#34;,&#34;1.1692075076471242&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;178450428&#34;,&#34;btcPrice&#34;:&#34;0.000058403664527924&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "AWS Deployment",
            "content": "Docker! . Me and my group was able to create four different containers that are each bound to 8080 inside the container with a unique port outside the container for each site. Each website also has a unique image! . . Next we tested to see if we were able to display the websites inside of the container that we made! . . This is the process of pulling from my flask and then updating the website on AWS! . . Here is me using curl command to show the website inside of the AWS terminal! . Here is my docker-compose.yml file Here I changed the image to become unique for my flask and I changed the port to have 8089 to differentiate from my container vs my teamates conatainers . version: &#39;3&#39; services: web: image: flask_alex_v1 build: . ports: - &quot;8089:8080&quot; volumes: - persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/alex-flask/volumes . Here is my dockerfile! It is basically original except for the COPY .. . FROM docker.io/python:3.9 WORKDIR /app # [Install python and pip] RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git COPY . . RUN pip install --no-cache-dir -r requirements.txt RUN pip3 install gunicorn ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8080&quot; EXPOSE 8080 CMD [ &quot;gunicorn&quot;, &quot;main:app&quot; ] . Here is my nginx file for my flask! Here you can see my personal ports and the public ip that we put. . server { listen 8083; listen [::]:8083; server_name 18.216.138.52; location / { proxy_pass http://localhost:8089; add_header &quot;Access-Control-Allow-Origin&quot; *; } } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/AWSDeploymentpublic/",
            "relUrl": "/AWSDeploymentpublic/",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i +1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter z is the 26 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times running = True while running: #while loop that keeps running unless running is false item = input(&quot;Please select an item from the menu&quot;) #Takes in input item2 = item.lower() #lowercases te input so the user can put in their input with capitlization if item2 in menu: #if statemment that checks to see if the input matches the menu total += menu[item2] #Adds the prices the items to the menu print(&quot;Your cost: &quot; &quot;{:.2f}&quot;.format(total)) # prints out the total elif item2 == &quot;stop&quot;: # Checks to see if the user wants to stop the code print(&quot;Thank you for shopping!&quot;) #prints out the goodbye message running = False #stops the while loop else: # Checks to see if there is invalid input print(&quot;Invalid Item Try again&quot;) # Finaly prints out message showing the user that the message is invalid #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Your cost: 3.99 Invalid Item Try again Your cost: 4.98 Your cost: 8.97 Your cost: 10.96 Thank you for shopping! 10.96 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "College Board MC",
            "content": "Collaboration Quiz! . . One thing that I really liked about this quiz was how it emphasized the importance of having multiple perspectives In my own scrum team, we highly value collaboration and using multiple perspectives to solve problems and this is why I was able to relate to this quiz and it was a good review on the main ideas of working as groups! | . | . Program Function and Purpose Quiz! . . One Question that I have for this specific quiz is why the equal signs appear as arrows in the college board mcqs | I also really liked the nested loop question because it took a lot of time to understand it, however in the end I was able to see what the code was doing! | . Program Design and Development Quiz! . . I found the loop that outputs the odd numbers to be very good because it uses many loops to print out the numbers with the least amount of code blocks | I have the same question again with the arrows and why they don’t use equal signs | . Overall I think that these MCQS were good practice and helped me review over these main concepts! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CollegeBoardMCQPRactice/",
            "relUrl": "/CollegeBoardMCQPRactice/",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Basketball Data Generator",
            "content": "NBA generator . This is a button that will randomly generate a name from a great player in the NBA | . Click Me! . . This is how it works: . var players = [&quot;Stephen Curry&quot; , &quot;LeBron James&quot;, &quot;Michael Jordan&quot;, &quot;Kareem Abdul-Jabbar&quot;, &quot;Kobe Bryant&quot;, &quot;Shaquille ONeal&quot;, &quot;Larry Bird&quot;, &quot;Wilt Chamberlain&quot;, &quot;Magic Johnson&quot;] var button = document.getElementById(&quot;1&quot;) var random2 = document.getElementById(&quot;random&quot;) button.onclick=function() { let random = players[Math.floor(Math.random()*players.length)]; random2.innerHTML = random } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Basketballdatagen/",
            "relUrl": "/Basketballdatagen/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Scrum Project",
            "content": "Main Goal . make a platform where people are able to share their goals and track their own progress as well as support their peers in keeping on track with their goals | . My role . I am apart of the backend whithing my scrum team, I will manage the code that takes care of tracking likes and comments. Storing the data and allowing everything to work together perfectly so the fromt end would have an easier job of simply making the page look nicer and easier to use. My job as the backend is to make sure all the text boxes would load correctly and store the data and to also make sure that all the links work in sync. | . End Result . We will hopefully end with a public website that will allow friends and family to communicate and post goals about their daily lives. This website will be nicely decorated and easy to use in order to ensure that the people can find success in their own goals. | . Here is a brainstorming picture . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/ScrumProjectbrainstorm",
            "relUrl": "/csp/ScrumProjectbrainstorm",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "HTML Fragments and Javascript kernel",
            "content": "// defines a function that outputs to the console the message function logt(output) { console.log(output); } // calls to the function logt(&quot;hi&quot;); . HTML fragments along with Javascript table . outputs the lakers roster along with the coach using javascript and html that uses json to convert the objects into strings to output into the table! | . // define a function to hold data for a Person function Person(name, height, age) { this.name = name; this.height = height; this.age = age; this.role = &quot;&quot;; } // Sets the role of the person Person.prototype.setRole = function(role) { this.role = role; } //Defines Coach var coach = new Person(&quot;Darwin Ham&quot;, &quot;6&#39;7&quot;, 48); coach.setRole(&quot;Coach&quot;); // JSON conversion that changes an object into a string Person.prototype.toJSON = function() { const obj = {name: this.name, height: this.height, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // data about players var players = [ new Person(&quot;Carmelo Anthony&quot;, &quot;6&#39;7&quot;, 38), new Person(&quot;Lebron James&quot;, &quot;6&#39;9&quot;, 37), new Person(&quot;Russel Westbrook&quot;, &quot;6&#39;3&quot;, 33), new Person(&quot;Dennis Shroder&quot;, &quot;6&#39;1&quot;, 29), new Person(&quot;Anthony Davis&quot;, &quot;6&#39;10&quot;, 29), new Person(&quot;Dwight Howard&quot;, &quot;6&#39;10&quot;, 36) ]; function Team(coach, players){ // 1 coach with a group of players to make a team // starts the list with the coach this.coach = coach; this.team = [coach]; // adding players to the array that we just made this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.team.push(player); }); // creates the json list of string by calling back to the function earlier this.json = []; this.team.forEach(player =&gt; this.json.push(player.toJSON())); } //defining the team var lakers = new Team(coach, players); // define an HTML conversion &quot;method&quot; associated with Classroom Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Height&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of lakers.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.height + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(lakers._toHtml()); . NameHeightAgeRole . Darwin Ham | 6&#39;7 | 48 | Coach | Carmelo Anthony | 6&#39;7 | 38 | Player | Lebron James | 6&#39;9 | 37 | Player | Russel Westbrook | 6&#39;3 | 33 | Player | Dennis Shroder | 6&#39;1 | 29 | Player | Anthony Davis | 6&#39;10 | 29 | Player | Dwight Howard | 6&#39;10 | 36 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/htmltablejavascript",
            "relUrl": "/csp/htmltablejavascript",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "HTML Fragments and Javascript kernel",
            "content": "// defines a function that outputs to the console the message function logt(output) { console.log(output); } // calls to the function logt(&quot;hi&quot;); . HTML fragments along with Javascript table . outputs the lakers roster along with the coach using javascript and html that uses json to convert the objects into strings to output into the table! | . // define a function to hold data for a Person function Person(name, height, age) { this.name = name; this.height = height; this.age = age; this.role = &quot;&quot;; } // Sets the role of the person Person.prototype.setRole = function(role) { this.role = role; } //Defines Coach var coach = new Person(&quot;Darwin Ham&quot;, &quot;6&#39;7&quot;, 48); coach.setRole(&quot;Coach&quot;); // JSON conversion that changes an object into a string Person.prototype.toJSON = function() { const obj = {name: this.name, height: this.height, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // data about players var players = [ new Person(&quot;Carmelo Anthony&quot;, &quot;6&#39;7&quot;, 38), new Person(&quot;Lebron James&quot;, &quot;6&#39;9&quot;, 37), new Person(&quot;Russel Westbrook&quot;, &quot;6&#39;3&quot;, 33), new Person(&quot;Dennis Shroder&quot;, &quot;6&#39;1&quot;, 29), new Person(&quot;Anthony Davis&quot;, &quot;6&#39;10&quot;, 29), new Person(&quot;Dwight Howard&quot;, &quot;6&#39;10&quot;, 36) ]; function Team(coach, players){ // 1 coach with a group of players to make a team // starts the list with the coach this.coach = coach; this.team = [coach]; // adding players to the array that we just made this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.team.push(player); }); // creates the json list of string by calling back to the function earlier this.json = []; this.team.forEach(player =&gt; this.json.push(player.toJSON())); } //defining the team var lakers = new Team(coach, players); // define an HTML conversion &quot;method&quot; associated with Classroom Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Height&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of lakers.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.height + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(lakers._toHtml()); .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/HtmlFragmentJavascriptKernel/",
            "relUrl": "/HtmlFragmentJavascriptKernel/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Good Life",
            "content": "Main Takeaway From Video: . Students have been dealing with stress, so extensive to the point where they aren’t able to enjoy and be productive. . As a group, my scrum team was able to put together this google form that assessed the mental health of students at Del Norte, to see how this problem is affecting students in our high school. . Example of one of our questions: . | This question goes over the stress levels in our school | The results are very bad in the sense that most students are dealing with extreme amounts of stress | . . This next question goes over anxiety which is hand in hand with stress | Our scrum team chose this question so it can emphasize the amount of pressure that the students are put under | . . This next question goes over homework and how much stress it puts onto the students | This shows the effect that school has on the students | . . This is another question that talks about the mental health of the students, most of the people that answered our survey responded by saying that they were feeling lonely. This is not good because being lonely is bad. | . Results . From this survey I was able to guage the mental health of the students in del norte and I was able to get a better understanding of how school affects the students. This was also a survey that allowed me to reflect off of the video of the Better life. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/TheGoodLife",
            "relUrl": "/csp/TheGoodLife",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Preformance Task Planning",
            "content": "Ideas for preformance Task . Basketball NBA statistics calculator and achievement record database that you can pull from. Purpose of this will to inform people on the most recent stats so they can easily have an uderstanding of what is going on in the league so far | . | NBA player ranking based off of data This will be very good for fantasy basketball, the purpose would be to give instant ratings based off of the player statics | . | What to wear based off of the weather app To inform people what to wear so they do not have to manually check the weather and think about what would be the best to wear | . | Informational page on track, teaching about certain events, embedded quizes and statistics Help new track and field athelets choose their evens and see what is good about each event. | . | . Things that I need to learn . I need to master using functions and creating them to manage the complexity of my project. Because if I were to do these complex apps such as data analytics, I would need to use many functions in order to make it run properly so I will not have to manually code everything over and over again . // example of a function that I could possibly use : something I learned making my quiz function nextQuestion() { if (quiz[question - 1].answers[selected - 1].correct) { correct++; } . In this code block there is a next question function that allows the user to go to the next question. This function parses through the list with all the data checking for the right answer, and if it is correct it will update the correct variable by 1. This saves a lot of time becaue it is an algorithm that is used very often in my code. This is something that I can possibly implement into my Preformance Task . Resources . Some resources that I can use is all the lecture notes and I can refer back the functions that I was able to make in my quiz. These functions that were created from the code blocks can provide the structure to making the algorithms that I will use in my preformance task. To start, I already have a good understanding of how to use javascript and use if statements and Onevent blocks. I can also ue my knowledge of variable to create the preformance task. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/PreformanceTaskPlanning",
            "relUrl": "/csp/PreformanceTaskPlanning",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Codeorg Blog",
            "content": "Link . Design Work . Me and Safin met up after school at Safin’s house, we were able to draw images and sketches using his ipad. We decided to do one screen and replace images with a 2x2 grid with images and text boxes to display the labels. We also finallized our page by putting a text box at the top that gives the question. We also planned out a score page that displays the percent accuracy which represents how many questions they were able to get right. We also planned out to do basketbal and tennis because basketball is my favorite sport and tennis is safins favorite sport . Purpose . The purpose of the app that we were able to create tests the user on the important knowledge about basketball and tennis. It also allows the user to understand how to play because there is a tutorial page. I sometimes have troubles remembering these important achievements that these players have made, and this quiz allows us to recall that information very easily. . Design . The design that me and Safin chose was to design our own quiz and eventually come together to make one app that accesses both of our quizzes. The way that We planned this was storing all of our quiz data into one list of dictionary respectively called Basketball and Tennis and we uploaded the lists into the same app. . Data abstraction . We created a huge list that contains dictionarys and whithin the dictionaries there were key and value pairs. Within the answer pair we put all of our answer choices which included pictures, names, and whether they were right or not. This list was easy to parse through and allowed us to use functions that went through these lists and created tests . Managing Complexity . In order to manage the complexity of this quiz, we were able to input many comments and use many functions to ensure that the code is very easy to follow. The comments allow us to communicate what we are doing with each function and what the purpose of the variables are. And the repeated use of the functions allow us to easily call back to a known function that we make and it communicated the purpose of the funciton without having the reader have to understand the code. . Procedural Abstraction . In order to apply the lists into the quiz, we used many functions. The overarching function was the function that called for the quiz and whithin the quiz function we were able to create many different functions. Some functions included changing the selected answer. Changing the pictures and labels as we the the quiz changes question. And another function we used was the finish function that changes the screen to the end and outputs score. . Algorithm implementations . We used many algorithms or functions to make the code more straight forward and less repetitive. Some of them are next question or finish quiz. This was important to our code because it allowed us to call back to that algorithm very easily without having to recode the whole thing over and over again. These algorithms made our code easier to understand and made it more efficent. . Testing . In order to test out our code, we used the console.log to test out what the code would output before implementing it into our code. This way we were able to see what input was given and how we can use that input to advance our quiz. The consol.log function was a very useful tool that went very well with the onEvent block because it allows us to easily detect for when input is given and it allows us to test new strategies and ideas without hurting out code . Challenges . Some challenges was formatting the quiz into the right list and dictionary so we could call to it. This was very tedious and very hard because and syntax errors in the large array stopped the whole code all togther. Another problem that came up and that the variables were not resetting after each function use. In order to solve this we had to make a new function that resets all the variables. . function finish() { setScreen(&quot;finishscreen&quot;); setProperty(&quot;score&quot;, &quot;text&quot;, correct + &quot;/3, which is &quot; + Math.floor((correct*1.0/3)*100) + &quot;%&quot;) onEvent(&quot;backbutton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;BegginingScreen&quot;); question = 1; correct = 0; selected = null; }); } . This javascript codeblock function allows us to manage our complexity and use an algorithm at the same time. This code block is the finish screen function that changes the screen, and it also outputs the score, to do this it it takes in the variable correct that was made earlier in the code and divides it by 3 and multiplies it by 100 to get a percent. Then it also has the back button inside of the function, so that if you click the button it sends you back to the beggining screen and it resets all the variables. This is a very usefull function because instead of having to say the entire code block over and over again, we can just call the function finish() . Successes . Some of our success came form the onEvent block because it was very easy to use and allowed us to save a lot of time without our code. This Onevent block led to us ultimately creating a working quiz that enabled me and safin to combine the quizes that we made. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Codeorgblog",
            "relUrl": "/csp/Codeorgblog",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Time Box Fragments",
            "content": "Week link link   . 0 | Alex’s First Blog Post | Fastpages Notebook Blog Post | Extra info about myself! | . 1 | Bash Notes | Bash toolset validation | Jupyter Notebook quiz | . 2 | Lists, Dictionaries, Iteration | Time Box Fragments |   | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/WeeklyLog",
            "relUrl": "/csp/WeeklyLog",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDb with extra entries . Purpose of this cell is to define InfoDb and add entries about certain people and traits that they have . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . For loop to print out InfoDb . Purpose of this independent cell is to use a normal loop that goes through Infodb printint out all the entries. The for loop automates the process so we do not have to manually print out all the enries by hand. . for item in InfoDb: #print function that goes through and formats print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,item[&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . While loop to print out InfoDb . The purpose of this independent cell block is use a while loop to go print out InfoDb while a certain variable is less than the length of InfoDb. This allows us to print out the data without manually inputting the values to the console . #Sets number to the length of InfoDb number = len(InfoDb) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) i+=1 . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . for loop with index to print out InfoDb . The purpose of this independent code cell is to use a for loop with an index that will go over all the data in infoDB without having to manually print out every single statement. The for loop will repeat the print function for every single entry in InfoDb . for i in range(len(InfoDb)): #prints out the items for every i in the InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Recursion to print out all of InfoDb . This recursion which utilizes a function to print out all the data in InfoDb is used to automate the printint process so we will not have to manually print out every single line. It uses a function that also uses embedded if statements that also calls itself at the end. This allows us to go over every single entry inside of InfoDb. . #sets variable n equal to the length of Info Db n = len(InfoDb) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Phone: {} &quot;&quot;&quot;.format(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], InfoDb[i][&quot;DOB&quot;], InfoDb[i][&quot;Residence&quot;], InfoDb[i][&quot;Email&quot;], InfoDb[i][&quot;Phone&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Outputting data in Reverse Order . Names_of_basketball_players = [&quot;Lebron James&quot;, &quot;Kobe Bryant&quot;, &quot;Chris Paul&quot;, &quot;Kevin Durant&quot;, &quot;Jason Tatum&quot;, &quot;Paul George&quot;, &quot;Kyrie Irving&quot;] #prints the list out in reverse order print(Names_of_basketball_players[::-1]) . [&#39;Kyrie Irving&#39;, &#39;Paul George&#39;, &#39;Jason Tatum&#39;, &#39;Kevin Durant&#39;, &#39;Chris Paul&#39;, &#39;Kobe Bryant&#39;, &#39;Lebron James&#39;] . Quiz That stores into a dictionary . The purpose of this code block is to test for basic animal trivia and it does this through multiple functions that stores the answers and questions in a dictionary. It calls back to the dictionary using for loops and then embedded whithin the for loops, it calls back to the function to print out the question and take input. . def question_and_answers(input): #function that prints out the question and takes in input print(&quot;Question: &quot; + input) correct = 0 #percent correct variable #dictionary with answers questions_answers = [{&quot;Whats the largest mammal&quot; : &quot;blue whale&quot;, &quot;whats the fastest animal&quot; : &quot;cheetah&quot;, &quot;what color is a flamingo&quot; : &quot;pink&quot;, &quot;Whats is the tallest animal&quot; : &quot;giraffe&quot;}] for i in questions_answers: for question, answer in i.items(): question_and_answers(question) # calls back to the questionanswer function response = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if response.lower() == answer: # if the answer provided is correct print(response, &quot;is correct&quot;) correct += 1 else: # if the answer provided is wrong print(response, &quot;is wrong&quot;) print(correct/4*100, &quot;%&quot;) #outputs the correct variable as a percentage . Question: Whats the largest mammal blue whale is correct Question: whats the fastest animal cheetah is correct Question: what color is a flamingo pink is correct Question: Whats is the tallest animal giraffe is correct 100.0 % .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/python_lists_dictionaries",
            "relUrl": "/csp/python_lists_dictionaries",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Basetball Data",
            "content": "Stats . This is a table that contains stats about my favorite players . Player Name Age Height wieght . Kevin Durant | 33 | 6’10 | 240 lb | . Stephen Curry | 34 | 6’2 | 185 lb | . Kyrie Irving | 30 | 6’2 | 195 lb | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BasketballData",
            "relUrl": "/csp/BasketballData",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Resume",
            "content": "Alex Kumar . 15489 Tanner Ridge Road, San Diego, CA 92127 . (858)-757-6371 . alex.k.kumar@gmail.com . Education . Del Norte High School (Junior) . 4.14 GPA . | Completed AP Calculus AB, AP Chemistry . Currently enrolled in AP Computer Science Principles, AP Physics, AP Calculus BC . | . | . Work Experience . Code Ninjas: Code Sensei (2022 - Present) . Led robotics camps, and guided students through the process of coding and engineering robots . | Used JavaScript, C#, Python, and Java to teach core computer science concepts . | . Extracurriculars . Soles In need: Treasurer (2022 - present) . Organize and plan meetings and keep track of funding and donations . Worked with team to collect hundreds of shoes to donate to those in need . | . | Engage audiences during school activities using public speaking skills . | . Del Norte Cultural Diversity Club: President (2021 - present) . Teaching and spreading knowledge about various cultures . | Public speaking to audiences to teach and create a better environment . | . STEM Enablers: Vice-President (2021 - Present) . Teach students topics like Chemistry and math . | Collect donations to distribute to other non-profits . | . Sports . Varsity Basketball (2021 - Present) . Volunteered to coach younger athletes . | Helped organize and coordinate team bonding events . | . Varsity Track and Field (2021 - Present) . Led the jumps team and got ranked regionally for triple jump and high jump . | . Skills . Excellent worker with Office 360 (Excel, PowerPoint, docs) . | Experience using various packages in python, including Pandas, NumPy, Matplotlib, TensorFlow, Scikit-Learn . | Knowledge in machine learning models, including artificial neural networks, K-Nearest-Neighbors, Linear regression, and logistic regression . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/09/02/Resume.html",
            "relUrl": "/2022/09/02/Resume.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Physic Notes",
            "content": "Purpose Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through a graphical method. In using graphical methods, we will learn about linearization and the use of it to create a mathematical model. . Procedure: . Find the radius of the discs with a ruler . | Find the mass of the discs using scale . | Graph the data on a non linear graph . | Record equation . | Change the axis and linearize graph . | Record graph and equations . | Height(mm) Mass(g) Radius   Radius Squared . 0.003125 cm | 0.69 g | 6.75 cm |   | 45.256 cm2 | . 0.003125 cm | 0.36 g | 5.25 cm |   | 27.5625 cm2 | . 0.003125 cm | 0.21g | 4.25 cm |   | 18.0625 cm2 | . 0.003125 cm | 0.13 g | 3.25 cm |   | 10.6525 cm2 | . 0.003125 cm | 0.06 g | 2.25 cm |   | 5.0625 cm2 | . Volume and mass increase proportionally (because the density is the same) so the only thing that is changing in this lab is the area which is piR2 so it is changing proportionally to r2. Since everything else is constant, we are able to ignore them and we are given a linear relationship between r2 and mass. . Graph #1 : Mass vs. Radius . Equation: 0.02547x^2- 0.091328x + 0.143184 . Graph #2: Linearization of Graph #1 (Mass vs radius2) . . Equation: 0.015585x -0.042943 . Work: . . Analysis Questions . 1. Considering the mathematical relationship between disk radius r and disk mass m . (equation 4), what does the independent variable from your line of best fit represent? . The independent variable from the line of best fit represents the radius of the aluminum disk because the mass is dependent on the radius therefore the radius is considered the independent variable . | . 2. Use the mathematical relationship between mass of the disk m and the disk’s . radius r to equate the coefficient values from your line of best fit to physical . quantities. What are the units for each? . . The slope represents the constants (density, pi, and height). In the equation that we made, the slope shows that mass and radius^2 are proportional. . 3. Should you adjust the best-fit line to be sure it passes through the origin, (0,0)? . Justify your answer. . No, you shouldn’t, because the y-intercept can help show that the data has an error, and moving it to fit (0,0) would hide the error and display false results. . 4. Using the slope of your best fit line and your measured value for disk thickness, . determine the experimental value for the disk material density. How does this value . compared to the theoretical value provided by your teacher? What is your percent . Error? . Theoretical density = 2.7 g/cm^3 . Percent difference = 42.8% . . 5. What are some of the factors that may have caused error and how might these . Factors have been prevented? . Some of the factors that may cause the error are manual and non digital measurement. For example the radius measurements and the thickness measurements. To prevent these human errors, we could use digital measurements to get the exact values. . Synthesis Questions: . In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . | The slope of the line of best fit would change because if the thickness increases, the mass would increase and in order for the equation to stay accurate, the slope will have to increase because mass is the dependent variable. The density would be the same because mass and the volume would still increase proportionally. . How would your graph of m versus r2 be different if you had used disks of the same thickness, but made out of steel? Draw a second line on your m versus r2 plot that represents disks made of steel. . | The line would be different because the slope would be different. The density of steel is 7.85 g/cm^3 however the density of aluminum is 2.7 g/cm^3. In this lab, the slope is pi*height*density and since the density is different by a factor of 2.5, the slope of the steel graph will be 2.5 times greater. . Aluminum equation/graph: 0.015585x -0.042943 . Steel equation/graph: 0.035067x-0.096621 . . 3. Another group of students has acquired data for the exact same experiment; . however, their disks are made of an unknown material that they are trying to . determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . . Multiple Choice questions: . 1. You perform the same experiment, but this time you plot a linear relationship . between mass and the circumference of the disks rather than the radius. What is the . slope of the linear plot? . E . 3. Consider an experiment in which a student measures the mass and diameter of 10 . different-sized spheres, all made of the same material of uniform density ρ. For this . student to create a linear graph relating the mass of the sphere to its radius r, the . student would need to plot mass m versus which quantity: . C . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/09/02/Physic-Notes.html",
            "relUrl": "/2022/09/02/Physic-Notes.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "HTML and markdown Fragments",
            "content": "Changing Theme from Minima to DarkMode . Some things that I noticed when changing the theme to darkmode was that I could not do it through the index.htmlm and I was forced to do it through the _sass file. . The entire background including the header and footer was changed to black ad the text was changed | the fonts where changed and the color changed to white | One thing that I had to come accross was the the fonts did not contrast well because it was just black and white and I did not really like that. | Another thing was that the font was different, although it was still legible I liked the old one better | the installation process of getting the themes in was creating a new folder in the _sass folder and putting the darkmode code it, and the process was very smooth | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/HTMLMarkdownFragments",
            "relUrl": "/csp/HTMLMarkdownFragments",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Bash toolset validation",
            "content": "Automating gitfile cloning . export project_dir=$HOME/vscode export project=$project_dir/fastpages-APCSP export project_repo=&quot;https://github.com/AlexKumar19/fastpages-APCSP.git&quot; #checks for vscode directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists...creating directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Checks for the project repository clone, otherwise it clones if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Directory /home/alexkumar/vscode exists. Directory /home/alexkumar/vscode/fastpages-APCSP exists. . Python Version . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . TestForPackage(){ echo &quot;Test if $1 was downloaded via conda&quot; if conda list | grep -q $1; then echo &quot;There is $1&quot; else echo &quot;There is no $1&quot; fi } #Calls the function to test for packages TestForPackage &quot;jupyter&quot; TestForPackage &quot;nodejs&quot; . Test if jupyter was downloaded via conda There is jupyter Test if nodejs was downloaded via conda There is nodejs . Jupyter Checks . TestForKernellInstallation(){ #outputs test echo &quot;Test if $1 was installed&quot; #checks jupyter kernelspec list to find the called package if jupyter kernelspec list | grep -q $1; then echo &quot;There is $1&quot; else echo &quot;There is no $1&quot; fi } #calls the function for certain packages TestForKernellInstallation &quot;bash&quot; TestForKernellInstallation &quot;javascript&quot; TestForKernellInstallation &quot;python3&quot; . Test if bash was installed There is bash Test if javascript was installed There is javascript Test if python3 was installed There is python3 . conda list jupyter kernelspec list . # packages in environment at /home/alexkumar/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 Available kernels: bash /home/alexkumar/.local/share/jupyter/kernels/bash javascript /home/alexkumar/.local/share/jupyter/kernels/javascript python3 /home/alexkumar/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BashToolsetCheck",
            "relUrl": "/csp/BashToolsetCheck",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "APCSP Bash Notes 08/25/22",
            "content": "Bash . cd #cd stands for &quot;change directory&quot; cd vscode #goes to vscode directory Ls #tells the user the directory . Bash allows us to create scripts that can automatically download packages and navigate the terminal . Cloud . The cloud is up in the skies near the moon and it allows us to clone repositories down to our solid state drive. This allows us to edit the repositories on out own devices remotely. When you pull, you update your clone and when you push, it adds your changesinto the repository .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BashNotes",
            "relUrl": "/csp/BashNotes",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Blog Post Notes 08/24/22",
            "content": "Front Matter . Each markdown or jupyter post contains a set configurations at the head of the file known as Front-Matter. Front-matter settings can change many things including TOC, author, and you can also hide documents . &gt; Basics of Python quiz - toc:true - badges: true - author: Alex Kumar - comments: true - categories: [jupyter, csp] . This is an example of front matter and this will set the author, tags, and allow comments . _config.yml . lots of defautl settings can be changed whithin the repositories config file. This allows for pictures and description extensions. This allows for more customization. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BlogPostNotes",
            "relUrl": "/csp/BlogPostNotes",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Extra info about myself!",
            "content": "Extra info about myself: Hi my name is alex, and some things that I enjoy about school is going to my basketball practice, I enjoy doing ceramics, and I really love to go to physics class .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/aboutme/2022/08/22/Aboutme.html",
            "relUrl": "/markdown/aboutme/2022/08/22/Aboutme.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Python . Using python to pring &quot;Hello&quot; . print(&#39;Hello world, this is Alex Kumar&#39;) . Hello world, this is Alex Kumar . info =&#39;I like to play basketball and I also enjoy going to the gym&#39; print(&quot;Here are some things about me: &quot; + info) . Here are some things about me:I like to play basketball and I also enjoy going to the gym .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/jupyter/aboutme/2022/08/21/firstjuypternotebook.html",
            "relUrl": "/jupyter/aboutme/2022/08/21/firstjuypternotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Alex's first blog post!",
            "content": "Hello, my name is alex and this is a sample markdown post. I have many hobbies that I do in my free time: Playing basketball, track and field, going to the beach, and playing with my dog! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/aboutme/2022/08/20/Post.html",
            "relUrl": "/markdown/aboutme/2022/08/20/Post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Individual Project Blog",
            "content": "Each individual preforms starts “pre-view” outline/write up of materials requried for College Board For my video submission, in order to meet the College Board requirements for the Performance task, I need to show the input and output and the program working. I also need to show what is the purpose of the program and emphasize what the program does with the user input. I also need to have data abstraction in my program, this can be in the form of a list that stores the data of the user. In my video I also need to show off the use of sequencing selection and iteration for my algorithms in order to show off how I am using functions to simplifiy the process. I need to explain the algorithms in order to show off complexity | . | Describe the portion of the Project you will use for Create Performance task In our SAAKD group, I will show off my feature that allows the user to time their tasks by storing the users input into a table and having a timer inside of the html that will track the time it takes for their activities | . | Describe code plan as it is required for CB My plan is to have a function that will be able to take in the users input, for expected time and also the name of the task. This function will store all the data in a list and also it will start a timer. Another function will be used to add the entries from this list and put it in the form of a html table and give output to the user so they can see the live action timer. Finally I will also use another funciton that will be able to take entries from the list and remove them in case the user is done with an adtivity. The list that is behind the code poses as my data abstration as it can be easy to iterate through in order to quickly populate the table with data | . | Consider what will be demonstrated in the video In my video I will give a brief overview of the code quickly showing off the functionality and how it is used. Then I will continue explain what the purpose of it as I go over one example of my adding a class with an expected time. Then I will wait, pause the timer and delete it to show off all the functionality of my project. | . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/IndividualBlog",
            "relUrl": "/csp/IndividualBlog",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "HTML and markdown Fragments",
            "content": "Changing Theme from Minima to DarkMode . Some things that I noticed when changing the theme to darkmode was that I could not do it through the index.htmlm and I was forced to do it through the _sass file. . The entire background including the header and footer was changed to black ad the text was changed | the fonts where changed and the color changed to white | One thing that I had to come accross was the the fonts did not contrast well because it was just black and white and I did not really like that. | Another thing was that the font was different, although it was still legible I liked the old one better | the installation process of getting the themes in was creating a new folder in the _sass folder and putting the darkmode code it, and the process was very smooth | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/HTMLMarkdownFragments",
            "relUrl": "/csp/HTMLMarkdownFragments",
            "date": " • Sep 2, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "notes",
          "content": "This page contains my notes from all classes, I use this page to go back to lectures or past presentations to review over important ideas so I can apply it to current problems! . Notes Table of Contents . Date subject link . 08/24/22 | CSP | Blog post and Markdown | . 08/25/22 | CSP | Bash lecture | . 08/25/22 | Physics | Physics Lab Notes | . 12/9/22 | CSP Notes | notes | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "HTML and Javascript table",
          "content": "| HTML + JavaScript Table | NBA Generator | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/HTMLTable/",
          "relUrl": "/HTMLTable/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "API",
          "content": "link .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/APIpractice/",
          "relUrl": "/APIpractice/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}