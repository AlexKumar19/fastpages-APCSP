{
  
    
        "post0": {
            "title": "Jupyter Notebook quiz",
            "content": "This is a quiz that will go over the basic vocabulary that was covered in the the jupyter document. . correct = 0 #function that takes in the question and the answer, then it determines whether the input is correct or incorrect then changes the variable correct depending on the answer def question(prompt, answer): #prints the question print(&quot;Question: &quot; + prompt) #takes in the input msg = input() #checks if the answer is correct or not if (msg).lower() == answer: #prints if the message is correct print(msg + &quot; is correct!&quot;) #changes the correct variable global correct correct += 1 #checks to see if its false else: #prints out that the answer is false print(msg + &quot; is incorrect!&quot;) #Questions questions = [(&quot;What function woud you use to output text?&quot;,&quot;print&quot;), (&quot;What function would you use to take input from the user?&quot;,&quot;input&quot;), (&quot;What keyword do you use to define a function?&quot;, &quot;def&quot;),(&quot;what function checks whether or not a certain condition is true or false?&quot;, &quot;if&quot;)] for i in questions: question(i[0] ,i[1]) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Question: What function woud you use to output text? print is correct! Question: What function would you use to take input from the user? input is correct! Question: What keyword do you use to define a function? if is incorrect! Question: what function checks whether or not a certain condition is true or false? if is correct! You got 75% .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/JupyterNotebookquiz/",
            "relUrl": "/csp/JupyterNotebookquiz/",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDb with extra entries . Purpose of this cell is to define InfoDb and add entries about certain people and traits that they have . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . For loop to print out InfoDb . Purpose of this independent cell is to use a normal loop that goes through Infodb printint out all the entries. The for loop automates the process so we do not have to manually print out all the enries by hand. . for item in InfoDb: #print function that goes through and formats print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,item[&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . While loop to print out InfoDb . The purpose of this independent cell block is use a while loop to go print out InfoDb while a certain variable is less than the length of InfoDb. This allows us to print out the data without manually inputting the values to the console . #Sets number to the length of InfoDb number = len(InfoDb) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) i+=1 . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . for loop with index to print out InfoDb . The purpose of this independent code cell is to use a for loop with an index that will go over all the data in infoDB without having to manually print out every single statement. The for loop will repeat the print function for every single entry in InfoDb . for i in range(len(InfoDb)): #prints out the items for every i in the InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Recursion to print out all of InfoDb . This recursion which utilizes a function to print out all the data in InfoDb is used to automate the printint process so we will not have to manually print out every single line. It uses a function that also uses embedded if statements that also calls itself at the end. This allows us to go over every single entry inside of InfoDb. . #sets variable n equal to the length of Info Db n = len(InfoDb) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Phone: {} &quot;&quot;&quot;.format(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], InfoDb[i][&quot;DOB&quot;], InfoDb[i][&quot;Residence&quot;], InfoDb[i][&quot;Email&quot;], InfoDb[i][&quot;Phone&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Outputting data in Reverse Order . Names_of_basketball_players = [&quot;Lebron James&quot;, &quot;Kobe Bryant&quot;, &quot;Chris Paul&quot;, &quot;Kevin Durant&quot;, &quot;Jason Tatum&quot;, &quot;Paul George&quot;, &quot;Kyrie Irving&quot;] #prints the list out in reverse order print(Names_of_basketball_players[::-1]) . [&#39;Kyrie Irving&#39;, &#39;Paul George&#39;, &#39;Jason Tatum&#39;, &#39;Kevin Durant&#39;, &#39;Chris Paul&#39;, &#39;Kobe Bryant&#39;, &#39;Lebron James&#39;] . Quiz That stores into a dictionary . The purpose of this code block is to test for basic animal trivia and it does this through multiple functions that stores the answers and questions in a dictionary. It calls back to the dictionary using for loops and then embedded whithin the for loops, it calls back to the function to print out the question and take input. . def question_and_answers(input): #function that prints out the question and takes in input print(&quot;Question: &quot; + input) correct = 0 #percent correct variable #dictionary with answers questions_answers = [{&quot;Whats the largest mammal&quot; : &quot;blue whale&quot;, &quot;whats the fastest animal&quot; : &quot;cheetah&quot;, &quot;what color is a flamingo&quot; : &quot;pink&quot;, &quot;Whats is the tallest animal&quot; : &quot;giraffe&quot;}] for i in questions_answers: for question, answer in i.items(): question_and_answers(question) # calls back to the questionanswer function response = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if response.lower() == answer: # if the answer provided is correct print(response, &quot;is correct&quot;) correct += 1 else: # if the answer provided is wrong print(response, &quot;is wrong&quot;) print(correct/4*100, &quot;%&quot;) #outputs the correct variable as a percentage . Question: Whats the largest mammal blue whale is correct Question: whats the fastest animal cheetah is correct Question: what color is a flamingo pink is correct Question: Whats is the tallest animal giraffe is correct 100.0 % .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/python_lists_dictionaries",
            "relUrl": "/csp/python_lists_dictionaries",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Physics Lab Notes",
            "content": "Purpose Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through a graphical method. In using graphical methods, we will learn about linearization and the use of it to create a mathematical model. . Procedure: . Find the radius of the discs with a ruler . | Find the mass of the discs using scale . | Graph the data on a non linear graph . | Record equation . | Change the axis and linearize graph . | Record graph and equations . | Height(mm) Mass(g) Radius   Radius Squared . 0.003125 cm | 0.69 g | 6.75 cm |   | 45.256 cm2 | . 0.003125 cm | 0.36 g | 5.25 cm |   | 27.5625 cm2 | . 0.003125 cm | 0.21g | 4.25 cm |   | 18.0625 cm2 | . 0.003125 cm | 0.13 g | 3.25 cm |   | 10.6525 cm2 | . 0.003125 cm | 0.06 g | 2.25 cm |   | 5.0625 cm2 | . Volume and mass increase proportionally (because the density is the same) so the only thing that is changing in this lab is the area which is piR2 so it is changing proportionally to r2. Since everything else is constant, we are able to ignore them and we are given a linear relationship between r2 and mass. . Graph #1 : Mass vs. Radius . Equation: 0.02547x^2- 0.091328x + 0.143184 . Graph #2: Linearization of Graph #1 (Mass vs radius2) . . Equation: 0.015585x -0.042943 . Work: . . Analysis Questions . 1. Considering the mathematical relationship between disk radius r and disk mass m . (equation 4), what does the independent variable from your line of best fit represent? . The independent variable from the line of best fit represents the radius of the aluminum disk because the mass is dependent on the radius therefore the radius is considered the independent variable . | . 2. Use the mathematical relationship between mass of the disk m and the disk’s . radius r to equate the coefficient values from your line of best fit to physical . quantities. What are the units for each? . . The slope represents the constants (density, pi, and height). In the equation that we made, the slope shows that mass and radius^2 are proportional. . 3. Should you adjust the best-fit line to be sure it passes through the origin, (0,0)? . Justify your answer. . No, you shouldn’t, because the y-intercept can help show that the data has an error, and moving it to fit (0,0) would hide the error and display false results. . 4. Using the slope of your best fit line and your measured value for disk thickness, . determine the experimental value for the disk material density. How does this value . compared to the theoretical value provided by your teacher? What is your percent . Error? . Theoretical density = 2.7 g/cm^3 . Percent difference = 42.8% . . 5. What are some of the factors that may have caused error and how might these . Factors have been prevented? . Some of the factors that may cause the error are manual and non digital measurement. For example the radius measurements and the thickness measurements. To prevent these human errors, we could use digital measurements to get the exact values. . Synthesis Questions: . In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . | The slope of the line of best fit would change because if the thickness increases, the mass would increase and in order for the equation to stay accurate, the slope will have to increase because mass is the dependent variable. The density would be the same because mass and the volume would still increase proportionally. . How would your graph of m versus r2 be different if you had used disks of the same thickness, but made out of steel? Draw a second line on your m versus r2 plot that represents disks made of steel. . | The line would be different because the slope would be different. The density of steel is 7.85 g/cm^3 however the density of aluminum is 2.7 g/cm^3. In this lab, the slope is pi*height*density and since the density is different by a factor of 2.5, the slope of the steel graph will be 2.5 times greater. . Aluminum equation/graph: 0.015585x -0.042943 . Steel equation/graph: 0.035067x-0.096621 . . 3. Another group of students has acquired data for the exact same experiment; . however, their disks are made of an unknown material that they are trying to . determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . . Multiple Choice questions: . 1. You perform the same experiment, but this time you plot a linear relationship . between mass and the circumference of the disks rather than the radius. What is the . slope of the linear plot? . E . 3. Consider an experiment in which a student measures the mass and diameter of 10 . different-sized spheres, all made of the same material of uniform density ρ. For this . student to create a linear graph relating the mass of the sphere to its radius r, the . student would need to plot mass m versus which quantity: . C . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/10/09/Physics-Lab-Notes.html",
            "relUrl": "/2022/10/09/Physics-Lab-Notes.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "API Testing!",
            "content": "Using an API! . Here I use the code from RapidAPI to import the data from the Inspirational quote database. The RapidAPI key is specific for me and allows for me to access the API with spam protection. The RapidAPI host directs me the proper API that I want data from! . import requests url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } . After Setting the parameters for the API, I now used the .request function . response = requests.request(&quot;POST&quot;, url, json={&quot;topic&quot;: &quot;motivation&quot;}, headers=headers).json() #This uses the .request function that sends a post request to the API to retrieve data quote = response[&quot;quote&quot;] #Sets the variable quote to the quote inside of the API author = response[&quot;by&quot;] #sets author to the author inside of the API print(&quot;Your random inspirational quote is, &quot;&quot; +quote +&quot; &quot;&quot; &quot; n&quot;, &quot;--&quot;, author) . Your random inspirational quote is, &#34;old is gold&#34; -- proverb . Now with this API, we can retrieve random inspiration quotes. This is very beneficial for our website because now we have access to 1000s of quotes and we can use this to provide inspiration to users. Our app is based on inspiration and these quotes would help push people to reach for their goals! . Making my own API! . import random import math from flask import Flask, request app = Flask(__name__) quotes = [&quot;The sky is the limit - Kalani&quot;, &quot;The celling is the roof - Micheal Jordan&quot;, &quot;You miss 100% of the shots you don&#39;t take -Wayne Gretsky&quot;, &quot;hehe - Navan&quot;, &quot;JSON! - Mort&quot;] def randomgen(): number = int(random.random()*len(quotes)) return number @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return {&quot;connection&quot;: &quot;succesful&quot;, &quot;quote&quot; : quotes[randomgen()]} .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/APITestingnotebook",
            "relUrl": "/csp/APITestingnotebook",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.json()) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f8c1edc71amsh2ceb94e75170cf3p1172ddjsn28d9990da6a6&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1497,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29499,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983600351889&#34;,&#34;total24hVolume&#34;:&#34;62271932590&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384252414254&#34;,&#34;price&#34;:&#34;20043.048298420286&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20050.210772224906&#34;,&#34;20104.086969351873&#34;,&#34;20157.612080991814&#34;,&#34;20244.902254214187&#34;,&#34;20296.13179911493&#34;,&#34;20355.40420179014&#34;,&#34;20339.584455003165&#34;,&#34;20380.9608314705&#34;,&#34;20334.43838223393&#34;,&#34;20256.397755502137&#34;,&#34;20214.818396073206&#34;,&#34;20187.14537643429&#34;,&#34;20159.744112050765&#34;,&#34;20135.103620334423&#34;,&#34;20152.838726388378&#34;,&#34;20223.999055486038&#34;,&#34;20188.386841136497&#34;,&#34;20099.650776087008&#34;,&#34;20022.525302913724&#34;,&#34;20060.360700925474&#34;,&#34;20058.49372151537&#34;,&#34;20101.79019444109&#34;,&#34;20068.60680042962&#34;,&#34;20037.990245449524&#34;,&#34;20040.006424632564&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;34643309443&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166771865158&#34;,&#34;price&#34;:&#34;1363.4411267728026&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.12&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.0952855712028&#34;,&#34;1351.020589256574&#34;,&#34;1352.8575645347053&#34;,&#34;1363.1472565613235&#34;,&#34;1374.6067561390107&#34;,&#34;1375.494244817268&#34;,&#34;1372.953523219661&#34;,&#34;1375.925446184292&#34;,&#34;1374.4292408387619&#34;,&#34;1368.4552635284397&#34;,&#34;1366.1167355485723&#34;,&#34;1363.0950291906606&#34;,&#34;1360.3636987191837&#34;,&#34;1358.3640048395087&#34;,&#34;1360.4342504890021&#34;,&#34;1369.213281754299&#34;,&#34;1368.3676032576047&#34;,&#34;1364.1360571475047&#34;,&#34;1363.3432991494524&#34;,&#34;1364.0707758574745&#34;,&#34;1363.3606085887561&#34;,&#34;1364.148825121332&#34;,&#34;1361.3954792114398&#34;,&#34;1359.0031784082305&#34;,&#34;1360.6275497370877&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;11632395543&#34;,&#34;btcPrice&#34;:&#34;0.06802563694267322&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68226757608&#34;,&#34;price&#34;:&#34;1.0002079259242496&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.13&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0005865365358848&#34;,&#34;0.9997222677525898&#34;,&#34;1.000302739310476&#34;,&#34;0.9991136110008606&#34;,&#34;0.9999088281238293&#34;,&#34;1.0001228624687193&#34;,&#34;1.0002330626742733&#34;,&#34;0.9999085006515177&#34;,&#34;1.000637166558432&#34;,&#34;1.0010864048424142&#34;,&#34;1.000382906070256&#34;,&#34;1.0008861750426428&#34;,&#34;1.0002453605323327&#34;,&#34;1.0005499753502725&#34;,&#34;0.9999702733020642&#34;,&#34;0.9994598707479958&#34;,&#34;1.0012863570809547&#34;,&#34;1.0016448157620703&#34;,&#34;0.9996482331493484&#34;,&#34;1.0004215336032052&#34;,&#34;0.9999570213425627&#34;,&#34;0.9999224272643209&#34;,&#34;1.0007392056569566&#34;,&#34;1.000325844124763&#34;,&#34;1.0001333206640304&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40185169770&#34;,&#34;btcPrice&#34;:&#34;0.000049902984368056&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46265013950&#34;,&#34;price&#34;:&#34;1.0001455267516093&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0004792903280844&#34;,&#34;0.9997900335112507&#34;,&#34;1.0002409949691449&#34;,&#34;0.9991618677934375&#34;,&#34;0.9998534185910576&#34;,&#34;0.9999410847854596&#34;,&#34;1.0002265014975766&#34;,&#34;0.9999486744759792&#34;,&#34;1.0006735177764154&#34;,&#34;1.0009635471641476&#34;,&#34;1.0003204451973837&#34;,&#34;1.0007368556469354&#34;,&#34;1.0001965553835719&#34;,&#34;1.0005780931027144&#34;,&#34;1.0000088554796078&#34;,&#34;0.9994586243665149&#34;,&#34;1.0011869248897938&#34;,&#34;1.0015496148117664&#34;,&#34;0.9997673802296243&#34;,&#34;1.0003598578573154&#34;,&#34;1.0000778482427792&#34;,&#34;0.9998861638814902&#34;,&#34;1.0006873238669673&#34;,&#34;1.0002882569057026&#34;,&#34;1.0001093290939425&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3358522477&#34;,&#34;btcPrice&#34;:&#34;0.000049899871110446&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41769765064&#34;,&#34;price&#34;:&#34;288.31435478535195&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.55&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0659068658593&#34;,&#34;293.14125809992265&#34;,&#34;293.927072308215&#34;,&#34;294.83908930457306&#34;,&#34;297.17141223267646&#34;,&#34;296.54802038189746&#34;,&#34;296.5585630450058&#34;,&#34;296.294553936533&#34;,&#34;295.9679395053358&#34;,&#34;295.35520526954036&#34;,&#34;294.7847791953549&#34;,&#34;295.0951173850531&#34;,&#34;294.5306048069131&#34;,&#34;294.30050189031186&#34;,&#34;294.22403335151813&#34;,&#34;294.80827509690437&#34;,&#34;294.33033971155965&#34;,&#34;293.96591310440675&#34;,&#34;293.66576108995565&#34;,&#34;293.99310192770326&#34;,&#34;293.69072498915045&#34;,&#34;293.4540279331547&#34;,&#34;293.23188737664185&#34;,&#34;293.09086576852025&#34;,&#34;290.12424881390194&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;1154452180&#34;,&#34;btcPrice&#34;:&#34;0.014384755776299543&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24935527184&#34;,&#34;price&#34;:&#34;0.5001251405968443&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.02&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4937540033530011&#34;,&#34;0.4935243660903145&#34;,&#34;0.49094545203960516&#34;,&#34;0.4918624009473887&#34;,&#34;0.4957389899343572&#34;,&#34;0.49519738378148237&#34;,&#34;0.4958525362412369&#34;,&#34;0.5001275119658124&#34;,&#34;0.5026720193539957&#34;,&#34;0.4991920707876871&#34;,&#34;0.49523182938198607&#34;,&#34;0.4939376274503768&#34;,&#34;0.4938461715574201&#34;,&#34;0.4949672333116952&#34;,&#34;0.49671660295169745&#34;,&#34;0.4983157134968618&#34;,&#34;0.4984385599250301&#34;,&#34;0.4958643382230643&#34;,&#34;0.4954888154508337&#34;,&#34;0.4956388106133542&#34;,&#34;0.49687913330335365&#34;,&#34;0.49710524663432437&#34;,&#34;0.4967817423491458&#34;,&#34;0.4960523063301114&#34;,&#34;0.5002588730645078&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;1951851389&#34;,&#34;btcPrice&#34;:&#34;0.000024952548791506&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21383646644&#34;,&#34;price&#34;:&#34;1.0000938123108745&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.14&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0005254447624727&#34;,&#34;0.9997390821935204&#34;,&#34;1.0002531268638544&#34;,&#34;0.99900371650551&#34;,&#34;0.9998191100048063&#34;,&#34;0.9999887701995116&#34;,&#34;1.0001269869516713&#34;,&#34;0.9997967773830551&#34;,&#34;1.0005975052435443&#34;,&#34;1.0010354550388738&#34;,&#34;1.000273734165667&#34;,&#34;1.0007993618135278&#34;,&#34;1.0001675248577555&#34;,&#34;1.0004436296308015&#34;,&#34;0.9998831620327592&#34;,&#34;0.9993790802417244&#34;,&#34;1.0011655146499898&#34;,&#34;1.0015608327721508&#34;,&#34;0.9996737479147666&#34;,&#34;1.0003874163381075&#34;,&#34;0.999855178764249&#34;,&#34;0.9997695857566036&#34;,&#34;1.0006363550917916&#34;,&#34;1.0003015517514349&#34;,&#34;1.0001110800082091&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6147025365&#34;,&#34;btcPrice&#34;:&#34;0.000049897290942002&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13373195008&#34;,&#34;price&#34;:&#34;0.4298337184562682&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.4294077817341544&#34;,&#34;0.43010743439413285&#34;,&#34;0.4311330265281362&#34;,&#34;0.43172655110842456&#34;,&#34;0.43548735625164897&#34;,&#34;0.4357388064320796&#34;,&#34;0.4347251184847503&#34;,&#34;0.43502688530763967&#34;,&#34;0.4347130159622236&#34;,&#34;0.433471895077104&#34;,&#34;0.43259694190748693&#34;,&#34;0.4319744086787819&#34;,&#34;0.4312921949359245&#34;,&#34;0.4311011590020075&#34;,&#34;0.4302280684331196&#34;,&#34;0.4319813231178509&#34;,&#34;0.43173383257478504&#34;,&#34;0.4303997167352433&#34;,&#34;0.429398559339474&#34;,&#34;0.4299648257425132&#34;,&#34;0.4297343398397519&#34;,&#34;0.42997828353732326&#34;,&#34;0.42937033740290426&#34;,&#34;0.42883620108710657&#34;,&#34;0.42920069115240905&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;688064082&#34;,&#34;btcPrice&#34;:&#34;0.000021445526252119&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11984369729&#34;,&#34;price&#34;:&#34;33.73772094047453&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.76424676052897&#34;,&#34;33.851653978639725&#34;,&#34;34.0161400563986&#34;,&#34;34.24080407969258&#34;,&#34;34.31681894129343&#34;,&#34;34.35588900553808&#34;,&#34;34.33042777400873&#34;,&#34;34.38277635446187&#34;,&#34;34.379681489180044&#34;,&#34;34.23752810964467&#34;,&#34;34.00887003667719&#34;,&#34;34.03341197552819&#34;,&#34;34.0205375439139&#34;,&#34;33.986450347226565&#34;,&#34;33.97284356925897&#34;,&#34;34.12322348136839&#34;,&#34;34.04818308388973&#34;,&#34;33.90841528770745&#34;,&#34;33.922236226998955&#34;,&#34;33.895084271212774&#34;,&#34;33.877508596833344&#34;,&#34;33.769632367031555&#34;,&#34;33.71898828195219&#34;,&#34;33.69001212339477&#34;,&#34;33.72267866886839&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;777816550&#34;,&#34;btcPrice&#34;:&#34;0.001683262966698214&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8488807961&#34;,&#34;price&#34;:&#34;0.06398401339869234&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.80&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06431595805843943&#34;,&#34;0.06435400841112346&#34;,&#34;0.0645379870268131&#34;,&#34;0.0650123288913721&#34;,&#34;0.06501563524570002&#34;,&#34;0.06505378638919912&#34;,&#34;0.0657960580235114&#34;,&#34;0.06603851629936867&#34;,&#34;0.0658184759881278&#34;,&#34;0.06555988714644552&#34;,&#34;0.06534311647764794&#34;,&#34;0.06512217936701878&#34;,&#34;0.06525813392333525&#34;,&#34;0.06507123735868817&#34;,&#34;0.06508747877233641&#34;,&#34;0.06537694106515178&#34;,&#34;0.06521416310707462&#34;,&#34;0.06486795280882116&#34;,&#34;0.06440018609785521&#34;,&#34;0.06431000551190193&#34;,&#34;0.06399099516985579&#34;,&#34;0.0639611688502269&#34;,&#34;0.06388198077385676&#34;,&#34;0.06396888900414123&#34;,&#34;0.06390412971383753&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;479258397&#34;,&#34;btcPrice&#34;:&#34;0.000003192329452389&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7357221715&#34;,&#34;price&#34;:&#34;0.8402806991486048&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8434958048685458&#34;,&#34;0.850001213528094&#34;,&#34;0.853335038035505&#34;,&#34;0.8542282047138157&#34;,&#34;0.8515372370926926&#34;,&#34;0.8500057857531073&#34;,&#34;0.8471550687491181&#34;,&#34;0.8479199485431772&#34;,&#34;0.8469126231548905&#34;,&#34;0.8444467185672693&#34;,&#34;0.8452742352058495&#34;,&#34;0.8476150079540906&#34;,&#34;0.8463925672110996&#34;,&#34;0.8432430183950218&#34;,&#34;0.8407816804410218&#34;,&#34;0.8419007497492077&#34;,&#34;0.8398864867524278&#34;,&#34;0.8393073071328305&#34;,&#34;0.8429567390022452&#34;,&#34;0.8430941255831178&#34;,&#34;0.8444119779861358&#34;,&#34;0.8446502533596543&#34;,&#34;0.8422100742264239&#34;,&#34;0.8398203812650741&#34;,&#34;0.8392859340943655&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;448903663&#34;,&#34;btcPrice&#34;:&#34;0.000041923797550038&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7333124913&#34;,&#34;price&#34;:&#34;6.374344819711631&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.33&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.399722350341929&#34;,&#34;6.407431469281856&#34;,&#34;6.427796901211662&#34;,&#34;6.453758384149317&#34;,&#34;6.486494555997307&#34;,&#34;6.502517900580541&#34;,&#34;6.4967988980633296&#34;,&#34;6.498221992937296&#34;,&#34;6.477292881924281&#34;,&#34;6.477685872716661&#34;,&#34;6.447216988451034&#34;,&#34;6.445307223733043&#34;,&#34;6.445036089260377&#34;,&#34;6.436040246095806&#34;,&#34;6.435080457086081&#34;,&#34;6.463836456516857&#34;,&#34;6.450387542070514&#34;,&#34;6.421359237807177&#34;,&#34;6.391124134834344&#34;,&#34;6.389976567958392&#34;,&#34;6.385572049998837&#34;,&#34;6.392125200223458&#34;,&#34;6.382091060151221&#34;,&#34;6.386981587242469&#34;,&#34;6.371255606973179&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;203228586&#34;,&#34;btcPrice&#34;:&#34;0.000318032702651025&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6650702423&#34;,&#34;price&#34;:&#34;0.000011280863460425&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.64&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011387877948418&#34;,&#34;0.000011396704562993&#34;,&#34;0.000011430609861&#34;,&#34;0.000011487055432932&#34;,&#34;0.00001152036610693&#34;,&#34;0.000011526380751596&#34;,&#34;0.000011558700842959&#34;,&#34;0.000011588746012207&#34;,&#34;0.000011501542165893&#34;,&#34;0.000011474456994294&#34;,&#34;0.000011432798956209&#34;,&#34;0.000011440729374507&#34;,&#34;0.000011461144205322&#34;,&#34;0.000011476554808705&#34;,&#34;0.000011469743005642&#34;,&#34;0.00001147197624755&#34;,&#34;0.000011424815330699&#34;,&#34;0.000011366708333454&#34;,&#34;0.0000113570498162&#34;,&#34;0.000011330129168691&#34;,&#34;0.000011283648128574&#34;,&#34;0.000011278387257469&#34;,&#34;0.000011289529854914&#34;,&#34;0.000011276233126799&#34;,&#34;0.000011273560500492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;280794784&#34;,&#34;btcPrice&#34;:&#34;5.62831726e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330165313&#34;,&#34;price&#34;:&#34;0.9999235811511265&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0002501483819342&#34;,&#34;0.9996079953426593&#34;,&#34;0.9998324870129061&#34;,&#34;0.9990101105933146&#34;,&#34;0.9994857500759958&#34;,&#34;0.999624908391188&#34;,&#34;0.9998816954065115&#34;,&#34;0.9994957093637207&#34;,&#34;1.0001208517367788&#34;,&#34;1.0005216349460553&#34;,&#34;1.0000957970716848&#34;,&#34;1.000296333339733&#34;,&#34;1.0000223644977213&#34;,&#34;1.0001689023102156&#34;,&#34;0.9997500246036027&#34;,&#34;0.999188166117977&#34;,&#34;1.0005244452746045&#34;,&#34;1.0009465956605519&#34;,&#34;0.999923212227354&#34;,&#34;0.999943746062425&#34;,&#34;0.9998895246210896&#34;,&#34;0.9996584146724661&#34;,&#34;1.00032070114622&#34;,&#34;1.0001058587674057&#34;,&#34;0.9999037241650416&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;129125861&#34;,&#34;btcPrice&#34;:&#34;0.000049888797665071&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5775077437&#34;,&#34;price&#34;:&#34;0.06254395432208257&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.35&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236315630333049&#34;,&#34;0.06246392912773974&#34;,&#34;0.06240652113985693&#34;,&#34;0.06227589703736964&#34;,&#34;0.06221053328122907&#34;,&#34;0.06260319363131635&#34;,&#34;0.06283033390340566&#34;,&#34;0.06275581270672362&#34;,&#34;0.0626978662815527&#34;,&#34;0.06256692378726383&#34;,&#34;0.062454674750590175&#34;,&#34;0.06247130825939604&#34;,&#34;0.06256137344897823&#34;,&#34;0.06269756605100256&#34;,&#34;0.06269254530093321&#34;,&#34;0.06269809717602999&#34;,&#34;0.06270258509423554&#34;,&#34;0.06262935941097252&#34;,&#34;0.0625525372842027&#34;,&#34;0.0626080433578714&#34;,&#34;0.06263852382635865&#34;,&#34;0.06265458985596026&#34;,&#34;0.06258971581342093&#34;,&#34;0.06255323825419136&#34;,&#34;0.06256018276012307&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;312325495&#34;,&#34;btcPrice&#34;:&#34;0.000003120481145925&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5506331908&#34;,&#34;price&#34;:&#34;1363.1831262096398&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.91&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.149143129576&#34;,&#34;1351.1432170463336&#34;,&#34;1354.6776632978115&#34;,&#34;1359.8352913708866&#34;,&#34;1372.7157537367023&#34;,&#34;1375.4201893881768&#34;,&#34;1373.656092011277&#34;,&#34;1374.4831471744365&#34;,&#34;1374.1769793087985&#34;,&#34;1370.915906218165&#34;,&#34;1366.8736380227815&#34;,&#34;1364.5777400837617&#34;,&#34;1361.7692633130323&#34;,&#34;1360.874730475116&#34;,&#34;1360.5880536977058&#34;,&#34;1367.7933188873656&#34;,&#34;1371.0864182649937&#34;,&#34;1366.2849418001506&#34;,&#34;1363.6612621508384&#34;,&#34;1366.3897957603679&#34;,&#34;1362.6017418911797&#34;,&#34;1363.558194381478&#34;,&#34;1361.1032201925939&#34;,&#34;1358.1013179936974&#34;,&#34;1359.5832745179157&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;190296605&#34;,&#34;btcPrice&#34;:&#34;0.06801276462109211&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412997860&#34;,&#34;price&#34;:&#34;6.970594962776281&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.24&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.773487842115684&#34;,&#34;6.754212108157756&#34;,&#34;6.7904912939092545&#34;,&#34;6.859091490236875&#34;,&#34;6.930938536697723&#34;,&#34;6.979888406385319&#34;,&#34;6.95205928455466&#34;,&#34;6.9286481982692205&#34;,&#34;6.908425318713336&#34;,&#34;6.880030568657563&#34;,&#34;6.8885892255227095&#34;,&#34;6.905746957106719&#34;,&#34;6.863039316865727&#34;,&#34;6.8298809342946445&#34;,&#34;6.841694456601706&#34;,&#34;6.90374298301861&#34;,&#34;6.8980780970926565&#34;,&#34;6.846666245892528&#34;,&#34;6.840143513460894&#34;,&#34;6.886346571294433&#34;,&#34;6.894919048207694&#34;,&#34;6.8980327967208135&#34;,&#34;6.897799219282073&#34;,&#34;6.917336871562214&#34;,&#34;6.9384106402636725&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;217649348&#34;,&#34;btcPrice&#34;:&#34;0.000347781178740445&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5074795440&#34;,&#34;price&#34;:&#34;17.139061861537474&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.58&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.253975766732072&#34;,&#34;17.305445105419164&#34;,&#34;17.35179898605964&#34;,&#34;17.43602090243061&#34;,&#34;17.5320617464102&#34;,&#34;17.556198635951862&#34;,&#34;17.522328032378404&#34;,&#34;17.567506807180212&#34;,&#34;17.518999622426595&#34;,&#34;17.438188969460462&#34;,&#34;17.396108974246218&#34;,&#34;17.373243917453404&#34;,&#34;17.336368659218273&#34;,&#34;17.319601875912156&#34;,&#34;17.320429202377582&#34;,&#34;17.375834229410586&#34;,&#34;17.37115155021162&#34;,&#34;17.337499378166246&#34;,&#34;17.29492516682681&#34;,&#34;17.27482970087828&#34;,&#34;17.236186499512122&#34;,&#34;17.23084707590994&#34;,&#34;17.187481717207028&#34;,&#34;17.155821443785648&#34;,&#34;17.14078782290297&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;232336499&#34;,&#34;btcPrice&#34;:&#34;0.000855112536095036&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906490614&#34;,&#34;price&#34;:&#34;20046.410227137&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20049.450436563653&#34;,&#34;20101.625670107587&#34;,&#34;20156.496626937733&#34;,&#34;20240.909995938804&#34;,&#34;20292.728315757773&#34;,&#34;20352.616852214596&#34;,&#34;20337.507383965705&#34;,&#34;20378.75288185548&#34;,&#34;20330.405569268383&#34;,&#34;20254.404761507907&#34;,&#34;20210.442606111905&#34;,&#34;20184.9491174058&#34;,&#34;20155.621076440202&#34;,&#34;20130.24398537466&#34;,&#34;20151.81371000324&#34;,&#34;20220.458796392188&#34;,&#34;20191.06461094672&#34;,&#34;20102.3711890372&#34;,&#34;20023.818445349818&#34;,&#34;20063.904548084807&#34;,&#34;20060.09333245677&#34;,&#34;20106.126030789226&#34;,&#34;20068.970588505534&#34;,&#34;20037.981397876472&#34;,&#34;20038.946703723883&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;65699991&#34;,&#34;btcPrice&#34;:&#34;1.0001677353996585&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4082107070&#34;,&#34;price&#34;:&#34;13.113113000226868&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.06&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.86904144147151&#34;,&#34;12.971292431991326&#34;,&#34;12.997809503523687&#34;,&#34;13.053288754075908&#34;,&#34;13.126935514160385&#34;,&#34;13.162946510226798&#34;,&#34;13.176459006280066&#34;,&#34;13.160096288039203&#34;,&#34;13.137389824650167&#34;,&#34;13.06998182322184&#34;,&#34;13.020726821088282&#34;,&#34;13.014732730953519&#34;,&#34;12.998975121153673&#34;,&#34;12.998577583467394&#34;,&#34;12.961451954944232&#34;,&#34;13.060564440903033&#34;,&#34;13.110658052250319&#34;,&#34;13.099438593619361&#34;,&#34;13.13330326447949&#34;,&#34;13.33452783192435&#34;,&#34;13.373831271270106&#34;,&#34;13.343650016008963&#34;,&#34;13.181674409038528&#34;,&#34;13.131683725387289&#34;,&#34;13.11536231838439&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;310021593&#34;,&#34;btcPrice&#34;:&#34;0.00065424743806362&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3938034123&#34;,&#34;price&#34;:&#34;15.650246402664713&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.564802534652488&#34;,&#34;15.557466143075752&#34;,&#34;15.524158368263686&#34;,&#34;15.564589461143923&#34;,&#34;15.626264641755956&#34;,&#34;15.739580440410696&#34;,&#34;15.723161103836562&#34;,&#34;15.756631052262051&#34;,&#34;15.719769516902309&#34;,&#34;15.679332809859426&#34;,&#34;15.65865704432778&#34;,&#34;15.65207565226499&#34;,&#34;15.638815307350377&#34;,&#34;15.638325526594082&#34;,&#34;15.630250194419004&#34;,&#34;15.770101867167902&#34;,&#34;15.772787444807776&#34;,&#34;15.726419071810144&#34;,&#34;15.730397527991796&#34;,&#34;15.706278363014619&#34;,&#34;15.644427965881071&#34;,&#34;15.661521309252834&#34;,&#34;15.65810007258811&#34;,&#34;15.657230878915703&#34;,&#34;15.653006930210385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;15757847&#34;,&#34;btcPrice&#34;:&#34;0.000780831646446624&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3815864606&#34;,&#34;price&#34;:&#34;53.846722765780676&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.92&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.29583735175494&#34;,&#34;54.33319375556465&#34;,&#34;54.50446073551073&#34;,&#34;54.689512299086346&#34;,&#34;54.83579215246787&#34;,&#34;54.86128649682968&#34;,&#34;54.85557746061394&#34;,&#34;54.79815311448016&#34;,&#34;54.77378739059752&#34;,&#34;54.513674702652395&#34;,&#34;54.35029802146673&#34;,&#34;54.358307825475265&#34;,&#34;54.422181211169935&#34;,&#34;54.4489516734391&#34;,&#34;54.48573164038176&#34;,&#34;54.566006895097175&#34;,&#34;54.60169376918578&#34;,&#34;54.434757779526166&#34;,&#34;54.23335179752326&#34;,&#34;54.413459080815954&#34;,&#34;54.21240080510803&#34;,&#34;54.29942643192169&#34;,&#34;54.14247458562991&#34;,&#34;54.048141904913244&#34;,&#34;53.830450120278314&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;386436989&#34;,&#34;btcPrice&#34;:&#34;0.002686553560319697&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3291845373&#34;,&#34;price&#34;:&#34;24.66016972332323&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.683542378165935&#34;,&#34;24.719459773866813&#34;,&#34;24.76219388151077&#34;,&#34;24.89617949229818&#34;,&#34;24.99584490014685&#34;,&#34;25.024271811661002&#34;,&#34;25.03560312685286&#34;,&#34;25.100681844582844&#34;,&#34;25.06002637860313&#34;,&#34;24.964601458157446&#34;,&#34;24.906805998876433&#34;,&#34;24.881179208531478&#34;,&#34;24.84671933295274&#34;,&#34;24.828862066050032&#34;,&#34;24.846952016930494&#34;,&#34;24.962693812346263&#34;,&#34;24.917387870404692&#34;,&#34;24.806139246634455&#34;,&#34;24.74429478499735&#34;,&#34;24.780282567891753&#34;,&#34;24.77215711531799&#34;,&#34;24.782999234672975&#34;,&#34;24.733584769696286&#34;,&#34;24.691015340268255&#34;,&#34;24.666234967252606&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;40334123&#34;,&#34;btcPrice&#34;:&#34;0.001230360240426445&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3270026019&#34;,&#34;price&#34;:&#34;28.113947823836092&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.95&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.57375287086344&#34;,&#34;27.583701817024274&#34;,&#34;27.628337152556885&#34;,&#34;27.71293784101918&#34;,&#34;28.233029378330688&#34;,&#34;28.720730972372852&#34;,&#34;28.46641731982247&#34;,&#34;28.461748558520167&#34;,&#34;28.43371813306647&#34;,&#34;28.28911168246897&#34;,&#34;28.14473632072935&#34;,&#34;28.15563557551264&#34;,&#34;28.240843430286514&#34;,&#34;28.318006504862765&#34;,&#34;28.299833108837987&#34;,&#34;28.329928166122407&#34;,&#34;28.27078454554885&#34;,&#34;28.13957915693539&#34;,&#34;28.037422192263545&#34;,&#34;28.02538763544355&#34;,&#34;27.990684342238957&#34;,&#34;27.99587068353575&#34;,&#34;27.980180249457508&#34;,&#34;27.96831699810348&#34;,&#34;28.017446779311992&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;583436183&#34;,&#34;btcPrice&#34;:&#34;0.001402678245606579&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2708742548&#34;,&#34;price&#34;:&#34;148.96689473750794&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.98&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.06343032587645&#34;,&#34;146.2075982055981&#34;,&#34;146.16344802044546&#34;,&#34;146.888041879794&#34;,&#34;147.51024728525&#34;,&#34;147.80256016994798&#34;,&#34;148.2027654532922&#34;,&#34;149.11840657324646&#34;,&#34;148.0031628172107&#34;,&#34;146.08426002755598&#34;,&#34;145.4683320265626&#34;,&#34;145.45336396325644&#34;,&#34;145.13011985927878&#34;,&#34;145.01926185302602&#34;,&#34;145.05380463743765&#34;,&#34;145.5189388138254&#34;,&#34;144.94121932498405&#34;,&#34;144.55169371872742&#34;,&#34;144.03637609256356&#34;,&#34;144.0602822952893&#34;,&#34;143.9422537624223&#34;,&#34;144.01800973377962&#34;,&#34;144.85743594518297&#34;,&#34;145.90656965474264&#34;,&#34;146.43871992411874&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;115093840&#34;,&#34;btcPrice&#34;:&#34;0.007432347241774043&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467427793&#34;,&#34;price&#34;:&#34;0.35172981355990574&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.16&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515600123998059&#34;,&#34;0.35203683586559326&#34;,&#34;0.3530001942757888&#34;,&#34;0.35412309079161114&#34;,&#34;0.35642368756646714&#34;,&#34;0.35691371592641125&#34;,&#34;0.35632693256778514&#34;,&#34;0.35761063132157045&#34;,&#34;0.35770076129143336&#34;,&#34;0.35735739919120424&#34;,&#34;0.35578661849459614&#34;,&#34;0.35494000660403097&#34;,&#34;0.3544949322189096&#34;,&#34;0.35419673898063&#34;,&#34;0.3545814398327581&#34;,&#34;0.3560563698021784&#34;,&#34;0.35476940248868055&#34;,&#34;0.35303138884975377&#34;,&#34;0.3526138360299577&#34;,&#34;0.353297325772352&#34;,&#34;0.3530050986834627&#34;,&#34;0.3519348960977679&#34;,&#34;0.3512839084444219&#34;,&#34;0.35035540536790366&#34;,&#34;0.35085105792254034&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;115391491&#34;,&#34;btcPrice&#34;:&#34;0.000017548718554334&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2437361911&#34;,&#34;price&#34;:&#34;0.12062849560760455&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.34&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11887874398521932&#34;,&#34;0.11899682832112154&#34;,&#34;0.11900784650582279&#34;,&#34;0.11903091787613028&#34;,&#34;0.11932756061340988&#34;,&#34;0.1193124601461036&#34;,&#34;0.11935198330687927&#34;,&#34;0.11968956008888623&#34;,&#34;0.11982768782602261&#34;,&#34;0.11926800493330945&#34;,&#34;0.11894584887939669&#34;,&#34;0.11912211829876701&#34;,&#34;0.11882743355055038&#34;,&#34;0.11868474386838856&#34;,&#34;0.11878227754760867&#34;,&#34;0.11974550069912294&#34;,&#34;0.11958643330478903&#34;,&#34;0.11927337184798883&#34;,&#34;0.11957351041625688&#34;,&#34;0.11944049884817015&#34;,&#34;0.12009378998253879&#34;,&#34;0.12024109052539109&#34;,&#34;0.12017728479638659&#34;,&#34;0.12012660542021919&#34;,&#34;0.12022267745313032&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;183603999&#34;,&#34;btcPrice&#34;:&#34;0.0000060184705346&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2276265173&#34;,&#34;price&#34;:&#34;118.98058610983257&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.66&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.32262573171138&#34;,&#34;122.21216671462395&#34;,&#34;122.2424076189862&#34;,&#34;122.65231412716444&#34;,&#34;123.18814722852751&#34;,&#34;123.0389419465099&#34;,&#34;122.7525437321455&#34;,&#34;122.63297695763477&#34;,&#34;122.25888231512374&#34;,&#34;121.6083740301883&#34;,&#34;121.0704992507114&#34;,&#34;121.08119723327034&#34;,&#34;121.3486844528348&#34;,&#34;121.35241663771652&#34;,&#34;121.4308975310673&#34;,&#34;121.83807088869149&#34;,&#34;121.79108869683151&#34;,&#34;121.38727041457742&#34;,&#34;120.77014246462569&#34;,&#34;120.9730955171752&#34;,&#34;120.81712651964756&#34;,&#34;120.67586343768751&#34;,&#34;120.35934093743896&#34;,&#34;119.33573062080143&#34;,&#34;118.92020484427697&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;207705732&#34;,&#34;btcPrice&#34;:&#34;0.005936252028051548&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2254967512&#34;,&#34;price&#34;:&#34;20043.97749206499&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.40&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20057.082143515574&#34;,&#34;20073.73634471567&#34;,&#34;20155.35074272695&#34;,&#34;20201.665838224184&#34;,&#34;20307.87652463223&#34;,&#34;20347.737496425136&#34;,&#34;20336.451830858347&#34;,&#34;20370.359230166003&#34;,&#34;20347.242691661544&#34;,&#34;20289.47946418053&#34;,&#34;20236.389261394786&#34;,&#34;20216.767454565917&#34;,&#34;20157.58477689183&#34;,&#34;20148.427911440165&#34;,&#34;20139.404745478332&#34;,&#34;20195.51476083255&#34;,&#34;20218.207717425983&#34;,&#34;20128.86850120113&#34;,&#34;20006.9744546404&#34;,&#34;20060.410623139804&#34;,&#34;20033.996371801375&#34;,&#34;20098.47310976815&#34;,&#34;20097.464012404307&#34;,&#34;20046.809041658624&#34;,&#34;20049.799901903058&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24085498&#34;,&#34;btcPrice&#34;:&#34;1.0000463598965021&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2207091566&#34;,&#34;price&#34;:&#34;0.10974041351835884&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10962651467178453&#34;,&#34;0.10994008962491644&#34;,&#34;0.1102558436062367&#34;,&#34;0.11066651769044844&#34;,&#34;0.11099761359490694&#34;,&#34;0.11112033875517015&#34;,&#34;0.11109668798682694&#34;,&#34;0.11125486280094371&#34;,&#34;0.11097328447826356&#34;,&#34;0.11061839872555923&#34;,&#34;0.11051157703154837&#34;,&#34;0.11040516533585498&#34;,&#34;0.11018324144957391&#34;,&#34;0.11015957429341776&#34;,&#34;0.11025941309951554&#34;,&#34;0.1107306596648452&#34;,&#34;0.11056541424952443&#34;,&#34;0.11033981054182589&#34;,&#34;0.11014982408569168&#34;,&#34;0.11018846762437533&#34;,&#34;0.11026378704001755&#34;,&#34;0.11036637137706824&#34;,&#34;0.11006396812568181&#34;,&#34;0.10976547166697294&#34;,&#34;0.10969235793422591&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;32894151&#34;,&#34;btcPrice&#34;:&#34;0.000005475235696908&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2206952701&#34;,&#34;price&#34;:&#34;3.630786016166329&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.37&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6764432411708334&#34;,&#34;3.6877377535157785&#34;,&#34;3.695275020835127&#34;,&#34;3.703712737949751&#34;,&#34;3.7340726187087037&#34;,&#34;3.7301224517518223&#34;,&#34;3.726830183476546&#34;,&#34;3.732039649903934&#34;,&#34;3.717434927228703&#34;,&#34;3.6877396306355372&#34;,&#34;3.672153124641749&#34;,&#34;3.6712014753545934&#34;,&#34;3.682858101631704&#34;,&#34;3.6816966205355786&#34;,&#34;3.6732422481738896&#34;,&#34;3.68742500998647&#34;,&#34;3.67949841043138&#34;,&#34;3.658086252545483&#34;,&#34;3.6466882303359083&#34;,&#34;3.653534815527586&#34;,&#34;3.6524651001872352&#34;,&#34;3.6566637162352977&#34;,&#34;3.6505578611908183&#34;,&#34;3.641624197517031&#34;,&#34;3.6360026668443743&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;214660455&#34;,&#34;btcPrice&#34;:&#34;0.000181149392153712&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1912308135&#34;,&#34;price&#34;:&#34;0.000290147954073881&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.81&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297534732475355&#34;,&#34;0.00029924350285628&#34;,&#34;0.000301788299795161&#34;,&#34;0.000299920153570012&#34;,&#34;0.000298931795978761&#34;,&#34;0.00030181081782183&#34;,&#34;0.000303176990591589&#34;,&#34;0.000301682155659599&#34;,&#34;0.000300427127360826&#34;,&#34;0.000299399340560452&#34;,&#34;0.000295889751885886&#34;,&#34;0.000294483950425306&#34;,&#34;0.000296163406502654&#34;,&#34;0.000295896753590268&#34;,&#34;0.000296293813138895&#34;,&#34;0.00029712340206075&#34;,&#34;0.000296241802461865&#34;,&#34;0.000294833413425782&#34;,&#34;0.000295805632133273&#34;,&#34;0.000295448279840089&#34;,&#34;0.000294342506473691&#34;,&#34;0.000292052607134611&#34;,&#34;0.000290629002509443&#34;,&#34;0.000292037309457244&#34;,&#34;0.000292007407136324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;87308849&#34;,&#34;btcPrice&#34;:&#34;1.4476238831e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1809009261&#34;,&#34;price&#34;:&#34;1.8090092609827892&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.08&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8200632272957997&#34;,&#34;1.8247805232483643&#34;,&#34;1.828712312707551&#34;,&#34;1.833483750666553&#34;,&#34;1.8388113856711226&#34;,&#34;1.8340065059765118&#34;,&#34;1.833810679916731&#34;,&#34;1.8379730157830576&#34;,&#34;1.839871909045534&#34;,&#34;1.8316951407594886&#34;,&#34;1.8218905615149048&#34;,&#34;1.8133420432182386&#34;,&#34;1.8119386729956268&#34;,&#34;1.8082288357010967&#34;,&#34;1.8068009632735749&#34;,&#34;1.8188388540688198&#34;,&#34;1.8203819894312625&#34;,&#34;1.814524337055796&#34;,&#34;1.808721193963964&#34;,&#34;1.8196357521223283&#34;,&#34;1.815149328780377&#34;,&#34;1.8112776438372116&#34;,&#34;1.8108458436676627&#34;,&#34;1.8027262559586126&#34;,&#34;1.805119314397385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12137167&#34;,&#34;btcPrice&#34;:&#34;0.000090256194269879&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767866343&#34;,&#34;price&#34;:&#34;1.7061053298863806&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.32&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6885003563699261&#34;,&#34;1.6911129238364746&#34;,&#34;1.6949035542249486&#34;,&#34;1.7027954737084738&#34;,&#34;1.7125610716564361&#34;,&#34;1.7140651860196017&#34;,&#34;1.714695946307908&#34;,&#34;1.7186349196969963&#34;,&#34;1.7112095222795702&#34;,&#34;1.7059432521776707&#34;,&#34;1.6993434662570355&#34;,&#34;1.7005773278388585&#34;,&#34;1.6968447607894448&#34;,&#34;1.6929234664355564&#34;,&#34;1.692450465901943&#34;,&#34;1.7010313056523052&#34;,&#34;1.6985550988885165&#34;,&#34;1.6893705490937398&#34;,&#34;1.6866645696902811&#34;,&#34;1.7019443099317626&#34;,&#34;1.7014230772153076&#34;,&#34;1.7069133070811424&#34;,&#34;1.7033611748224882&#34;,&#34;1.6994360137640887&#34;,&#34;1.704400633762173&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;71187916&#34;,&#34;btcPrice&#34;:&#34;0.000085122048526962&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725996262&#34;,&#34;price&#34;:&#34;17.259962623670035&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.03&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.0775388533003&#34;,&#34;17.067912741278125&#34;,&#34;17.19371992172132&#34;,&#34;17.4049080612785&#34;,&#34;17.349122197170388&#34;,&#34;17.383691525495145&#34;,&#34;17.38955154672953&#34;,&#34;17.62408133673586&#34;,&#34;17.593322076060364&#34;,&#34;17.4386892965598&#34;,&#34;17.328889316544824&#34;,&#34;17.447514865666506&#34;,&#34;17.32297480082281&#34;,&#34;17.37509972478323&#34;,&#34;17.34525419003646&#34;,&#34;17.409372532584655&#34;,&#34;17.389133405821546&#34;,&#34;17.35036829752898&#34;,&#34;17.427069919455597&#34;,&#34;17.552044170794996&#34;,&#34;17.412493725255267&#34;,&#34;17.349458429441366&#34;,&#34;17.146992959728287&#34;,&#34;17.252120262541386&#34;,&#34;17.264212303383914&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19832838&#34;,&#34;btcPrice&#34;:&#34;0.000860915853391649&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1632172859&#34;,&#34;price&#34;:&#34;5.553360617882926&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.39&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.563583111239947&#34;,&#34;5.566550453652093&#34;,&#34;5.574658649368248&#34;,&#34;5.59947207926758&#34;,&#34;5.623738949982796&#34;,&#34;5.620874463842186&#34;,&#34;5.636449717522663&#34;,&#34;5.636012075827377&#34;,&#34;5.621787024814909&#34;,&#34;5.604863066684564&#34;,&#34;5.59106302185655&#34;,&#34;5.592521259925081&#34;,&#34;5.578504466675582&#34;,&#34;5.569698214994045&#34;,&#34;5.57106966286358&#34;,&#34;5.5871830930712845&#34;,&#34;5.58594625512426&#34;,&#34;5.567567471367906&#34;,&#34;5.557070809165411&#34;,&#34;5.564056973722409&#34;,&#34;5.560812558868851&#34;,&#34;5.555371588027569&#34;,&#34;5.5431943077677825&#34;,&#34;5.540294464973471&#34;,&#34;5.542380071855275&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;155725594&#34;,&#34;btcPrice&#34;:&#34;0.000277071657723871&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579991723&#34;,&#34;price&#34;:&#34;6.0165579380799885&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.016755740637141&#34;,&#34;6.025549949045874&#34;,&#34;6.025640938683228&#34;,&#34;6.0377448148370085&#34;,&#34;6.064372958080765&#34;,&#34;6.083168222934446&#34;,&#34;6.121138125111502&#34;,&#34;6.122110772502033&#34;,&#34;6.115151992864029&#34;,&#34;6.094617924935418&#34;,&#34;6.060091344132251&#34;,&#34;6.055252608620663&#34;,&#34;6.044824998176658&#34;,&#34;6.039684832886364&#34;,&#34;6.031722431559297&#34;,&#34;6.051848135596568&#34;,&#34;6.052505386943968&#34;,&#34;6.039004021283348&#34;,&#34;6.03094716124407&#34;,&#34;6.0282463753416&#34;,&#34;6.032921444329065&#34;,&#34;6.04632010848593&#34;,&#34;6.041115706175561&#34;,&#34;6.045998924171826&#34;,&#34;6.0229305076806545&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;35516114&#34;,&#34;btcPrice&#34;:&#34;0.000300181781159216&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1572684480&#34;,&#34;price&#34;:&#34;0.023557025426635677&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.72&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.02375170887710745&#34;,&#34;0.023790767210407363&#34;,&#34;0.02385906108038382&#34;,&#34;0.023963654949121647&#34;,&#34;0.024032391322482857&#34;,&#34;0.02406040482720113&#34;,&#34;0.0240241062637749&#34;,&#34;0.024037336226182978&#34;,&#34;0.02400171948264513&#34;,&#34;0.02387998962803967&#34;,&#34;0.02378930361410667&#34;,&#34;0.02383913575157462&#34;,&#34;0.02381560283772684&#34;,&#34;0.02375080527252874&#34;,&#34;0.023755408145521056&#34;,&#34;0.02387716977416547&#34;,&#34;0.02387351543491939&#34;,&#34;0.023763817483126306&#34;,&#34;0.023691552163897643&#34;,&#34;0.023726104965078293&#34;,&#34;0.02368589760998112&#34;,&#34;0.023671062742535463&#34;,&#34;0.023601726034422614&#34;,&#34;0.0235570377718252&#34;,&#34;0.0235469112210421&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;88620897&#34;,&#34;btcPrice&#34;:&#34;0.000001175321491816&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1553748228&#34;,&#34;price&#34;:&#34;4.671730797095194&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.661125064396867&#34;,&#34;4.663869351538766&#34;,&#34;4.66954849891612&#34;,&#34;4.700257578283811&#34;,&#34;4.730018157572612&#34;,&#34;4.714143976512721&#34;,&#34;4.723478551910749&#34;,&#34;4.726841497246268&#34;,&#34;4.71589081766422&#34;,&#34;4.704019970362516&#34;,&#34;4.6988239161796725&#34;,&#34;4.701002359282831&#34;,&#34;4.691700450917038&#34;,&#34;4.677135351952703&#34;,&#34;4.694429858732558&#34;,&#34;4.721898404666295&#34;,&#34;4.72192706714792&#34;,&#34;4.711492514608389&#34;,&#34;4.722961417487937&#34;,&#34;4.727350513894986&#34;,&#34;4.726777756847048&#34;,&#34;4.730691546772397&#34;,&#34;4.723894121828546&#34;,&#34;4.720900237522959&#34;,&#34;4.694323412913096&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;62601195&#34;,&#34;btcPrice&#34;:&#34;0.000233084844557472&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535345175&#34;,&#34;price&#34;:&#34;0.6999520749208403&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.37&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7018437336148443&#34;,&#34;0.7012296643669335&#34;,&#34;0.7022993535952263&#34;,&#34;0.7043824624342494&#34;,&#34;0.7061012732016445&#34;,&#34;0.7092722059821073&#34;,&#34;0.7107294942869858&#34;,&#34;0.7108990080244315&#34;,&#34;0.7099791984418414&#34;,&#34;0.7078420220186218&#34;,&#34;0.7051095437828625&#34;,&#34;0.707248929548027&#34;,&#34;0.7050915198697436&#34;,&#34;0.7044747588216688&#34;,&#34;0.7041160697442599&#34;,&#34;0.7066206655413716&#34;,&#34;0.7058549946852882&#34;,&#34;0.7032486369948753&#34;,&#34;0.7012876549332069&#34;,&#34;0.7009747852786251&#34;,&#34;0.700473849406315&#34;,&#34;0.7005982029037023&#34;,&#34;0.7002369574369308&#34;,&#34;0.7006334207984222&#34;,&#34;0.7000127772948245&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;113068798&#34;,&#34;btcPrice&#34;:&#34;0.000034922436173344&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1529157571&#34;,&#34;price&#34;:&#34;0.7645787855498196&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.80&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7862352418397442&#34;,&#34;0.7857962385011888&#34;,&#34;0.7860823591712383&#34;,&#34;0.7913864227222935&#34;,&#34;0.7931731378366671&#34;,&#34;0.7918535836709918&#34;,&#34;0.7934385490032205&#34;,&#34;0.7935992087657073&#34;,&#34;0.7897855169136626&#34;,&#34;0.7868869873929384&#34;,&#34;0.7827511307418661&#34;,&#34;0.7829200782135203&#34;,&#34;0.7815399732777862&#34;,&#34;0.7772118263855671&#34;,&#34;0.7746419330272937&#34;,&#34;0.7799681155884691&#34;,&#34;0.777981466209664&#34;,&#34;0.7739045575146072&#34;,&#34;0.7718550460057184&#34;,&#34;0.7715939215456447&#34;,&#34;0.7695383673672498&#34;,&#34;0.7673191324882311&#34;,&#34;0.7657534786224457&#34;,&#34;0.764881660541454&#34;,&#34;0.7646092366582135&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;145242009&#34;,&#34;btcPrice&#34;:&#34;0.000038146831468249&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1413337607&#34;,&#34;price&#34;:&#34;0.058052265495351495&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770820809062958&#34;,&#34;0.05773161591193554&#34;,&#34;0.057901448026430706&#34;,&#34;0.058104711439575775&#34;,&#34;0.05821494457445837&#34;,&#34;0.05837605385144989&#34;,&#34;0.0583912493104286&#34;,&#34;0.058424171286181624&#34;,&#34;0.05828953359467471&#34;,&#34;0.058191254382563104&#34;,&#34;0.058069476804724386&#34;,&#34;0.05816012171446981&#34;,&#34;0.05809696154952601&#34;,&#34;0.05804430834562561&#34;,&#34;0.058079013279903904&#34;,&#34;0.058270287529447726&#34;,&#34;0.05828744692577993&#34;,&#34;0.05819030965298005&#34;,&#34;0.05799510351002881&#34;,&#34;0.05801850162696806&#34;,&#34;0.05804288093820356&#34;,&#34;0.05809254408384736&#34;,&#34;0.05803413483043568&#34;,&#34;0.057982852173679544&#34;,&#34;0.05799862984287226&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;38825707&#34;,&#34;btcPrice&#34;:&#34;0.000002896379065251&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359878097&#34;,&#34;price&#34;:&#34;1.001334577613883&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.99995237657306&#34;,&#34;0.9992610930077082&#34;,&#34;0.9995048898577841&#34;,&#34;0.9984857957300194&#34;,&#34;0.9991338275862605&#34;,&#34;0.9991463646832447&#34;,&#34;0.9995515068035792&#34;,&#34;0.9992688671456238&#34;,&#34;0.9999129851645419&#34;,&#34;1.0002242997546233&#34;,&#34;0.999712820332821&#34;,&#34;1.0000332602428952&#34;,&#34;0.9995079927133396&#34;,&#34;0.999782374902935&#34;,&#34;0.999308877507305&#34;,&#34;0.9988846870195152&#34;,&#34;1.0005152287641716&#34;,&#34;1.0008340522704022&#34;,&#34;0.9994436410988572&#34;,&#34;0.9996849217788387&#34;,&#34;0.9995211220531371&#34;,&#34;0.999211197536607&#34;,&#34;0.9999983085146361&#34;,&#34;0.999769500498533&#34;,&#34;1.0011860473290413&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6768277&#34;,&#34;btcPrice&#34;:&#34;0.000049959195961864&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1353847155&#34;,&#34;price&#34;:&#34;138.46931334806206&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.70&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.82868883894076&#34;,&#34;137.71306856606782&#34;,&#34;138.03647928074753&#34;,&#34;138.80197795554938&#34;,&#34;139.12071269372848&#34;,&#34;139.05878455835125&#34;,&#34;139.14677841096062&#34;,&#34;138.87253490735398&#34;,&#34;138.02179236057498&#34;,&#34;137.42442294208283&#34;,&#34;137.6271009908909&#34;,&#34;139.44419273993879&#34;,&#34;138.9594762558207&#34;,&#34;139.35956951767986&#34;,&#34;139.76224675334996&#34;,&#34;140.73346306408735&#34;,&#34;139.70014562219615&#34;,&#34;139.58102151134608&#34;,&#34;139.19177605867037&#34;,&#34;139.65458123164169&#34;,&#34;139.17824474960636&#34;,&#34;139.1901615972891&#34;,&#34;138.83319330338816&#34;,&#34;138.1218448902609&#34;,&#34;138.15277303739376&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;71501255&#34;,&#34;btcPrice&#34;:&#34;0.006908595503358421&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1316030339&#34;,&#34;price&#34;:&#34;55.7002018134128&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.89&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.49977253219301&#34;,&#34;54.11874620026287&#34;,&#34;54.2183062824539&#34;,&#34;54.68045352030543&#34;,&#34;55.29261101979573&#34;,&#34;55.12466500529631&#34;,&#34;55.4096265101037&#34;,&#34;55.17360006105945&#34;,&#34;55.03825697066999&#34;,&#34;54.83782041498208&#34;,&#34;54.61174346698164&#34;,&#34;54.72261326487687&#34;,&#34;55.07467359664748&#34;,&#34;55.12258904806393&#34;,&#34;55.12232719822051&#34;,&#34;55.10748540691841&#34;,&#34;55.01733359597467&#34;,&#34;54.876885804473424&#34;,&#34;54.85576050348866&#34;,&#34;55.096674446643746&#34;,&#34;55.35611005385607&#34;,&#34;54.96784781952569&#34;,&#34;54.84449264613283&#34;,&#34;54.95034295425699&#34;,&#34;55.112649002423744&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;72484623&#34;,&#34;btcPrice&#34;:&#34;0.002779028468329484&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298954067&#34;,&#34;price&#34;:&#34;1.4302723371340804&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.37&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.421883939884071&#34;,&#34;1.42509607402001&#34;,&#34;1.4278239665456545&#34;,&#34;1.4336636277697252&#34;,&#34;1.4443645638453815&#34;,&#34;1.4463747088081587&#34;,&#34;1.4428608091094144&#34;,&#34;1.4490881454348474&#34;,&#34;1.4450878337651158&#34;,&#34;1.4401715843904537&#34;,&#34;1.4355148328665224&#34;,&#34;1.4365319902236815&#34;,&#34;1.4339651090330499&#34;,&#34;1.4334495267586773&#34;,&#34;1.4333504141935083&#34;,&#34;1.4389840361204465&#34;,&#34;1.4379456439736016&#34;,&#34;1.4315401694215406&#34;,&#34;1.4240153029007887&#34;,&#34;1.4240927210678032&#34;,&#34;1.4220389629012662&#34;,&#34;1.4290008245398644&#34;,&#34;1.4312652127406216&#34;,&#34;1.4310909189590104&#34;,&#34;1.4306725904273427&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;35958124&#34;,&#34;btcPrice&#34;:&#34;0.000071360020483851&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281371060&#34;,&#34;price&#34;:&#34;0.21568734363318337&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.48&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.21553593139708543&#34;,&#34;0.21544366417321525&#34;,&#34;0.21646610949174847&#34;,&#34;0.21730782782429547&#34;,&#34;0.21865681130587172&#34;,&#34;0.21939390999187283&#34;,&#34;0.21985592005582816&#34;,&#34;0.21915437745243896&#34;,&#34;0.2184171446254368&#34;,&#34;0.21798236632181323&#34;,&#34;0.21690087683062034&#34;,&#34;0.21604240077342493&#34;,&#34;0.21587704160172458&#34;,&#34;0.2158448062065273&#34;,&#34;0.21568131629647883&#34;,&#34;0.21628666481515962&#34;,&#34;0.21575577092565493&#34;,&#34;0.21492437995400548&#34;,&#34;0.21514404501911413&#34;,&#34;0.2171108493305216&#34;,&#34;0.21771656940310347&#34;,&#34;0.21679986568652215&#34;,&#34;0.21607273994568685&#34;,&#34;0.21599406892348155&#34;,&#34;0.216016823604864&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;205319395&#34;,&#34;btcPrice&#34;:&#34;0.000010761204604301&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273244296&#34;,&#34;price&#34;:&#34;0.8491294389371948&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.58&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8590405964683089&#34;,&#34;0.859478250004335&#34;,&#34;0.8609939510022012&#34;,&#34;0.8652881133772078&#34;,&#34;0.8665208089867517&#34;,&#34;0.8666644958759461&#34;,&#34;0.8662362089943302&#34;,&#34;0.8669849089516505&#34;,&#34;0.8647803548984957&#34;,&#34;0.8606548254227334&#34;,&#34;0.858647121421129&#34;,&#34;0.8662635524287782&#34;,&#34;0.8588847882234059&#34;,&#34;0.8544149170251873&#34;,&#34;0.8528484459196816&#34;,&#34;0.8567742977148085&#34;,&#34;0.8559971556239261&#34;,&#34;0.8526369746427614&#34;,&#34;0.8503963749700182&#34;,&#34;0.8514893353210455&#34;,&#34;0.8513642787546029&#34;,&#34;0.8508505323793061&#34;,&#34;0.8483933250963328&#34;,&#34;0.8475209589259349&#34;,&#34;0.8482538011775931&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;116012726&#34;,&#34;btcPrice&#34;:&#34;0.000042365284276849&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1216349067&#34;,&#34;price&#34;:&#34;1.5122657530928172&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5150991540359635&#34;,&#34;1.5176061095960762&#34;,&#34;1.5245756510192037&#34;,&#34;1.5369489213784007&#34;,&#34;1.5521086753177897&#34;,&#34;1.5577273434480916&#34;,&#34;1.5620222188046804&#34;,&#34;1.5618008806408366&#34;,&#34;1.5635266954065115&#34;,&#34;1.5512539189835166&#34;,&#34;1.5391754904487456&#34;,&#34;1.5415483542201813&#34;,&#34;1.5406687905041778&#34;,&#34;1.5536997118197664&#34;,&#34;1.5585509390347834&#34;,&#34;1.5605461378658754&#34;,&#34;1.556322526404288&#34;,&#34;1.5432139594119398&#34;,&#34;1.527711427666444&#34;,&#34;1.5295360489082588&#34;,&#34;1.5251991365229256&#34;,&#34;1.523882390305484&#34;,&#34;1.5152199119209957&#34;,&#34;1.5079084095454254&#34;,&#34;1.5059207760888258&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;14537858&#34;,&#34;btcPrice&#34;:&#34;0.000075450886041721&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1157143428&#34;,&#34;price&#34;:&#34;1.170587468937924&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1694694824289555&#34;,&#34;1.1709120673050462&#34;,&#34;1.1739859596809479&#34;,&#34;1.17900555328724&#34;,&#34;1.184230473597679&#34;,&#34;1.185710435108849&#34;,&#34;1.1864344657129484&#34;,&#34;1.1885516582635711&#34;,&#34;1.1870888275685685&#34;,&#34;1.1829654851494844&#34;,&#34;1.17709582794196&#34;,&#34;1.1762202099671832&#34;,&#34;1.1773458464363997&#34;,&#34;1.1770861707666584&#34;,&#34;1.1811474861902838&#34;,&#34;1.1833592012519114&#34;,&#34;1.1818251357201783&#34;,&#34;1.1782503602022067&#34;,&#34;1.176960097898779&#34;,&#34;1.1767921922729265&#34;,&#34;1.1759604894059537&#34;,&#34;1.1750064515228658&#34;,&#34;1.1729163746108195&#34;,&#34;1.170358956437112&#34;,&#34;1.1692075076471242&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;178450428&#34;,&#34;btcPrice&#34;:&#34;0.000058403664527924&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "AWS Deployment",
            "content": "Docker! . Me and my group was able to create four different containers that are each bound to 8080 inside the container with a unique port outside the container for each site. Each website also has a unique image! . . Next we tested to see if we were able to display the websites inside of the container that we made! . . This is the process of pulling from my flask and then updating the website on AWS! . . Here is me using curl command to show the website inside of the AWS terminal! . Here is my docker-compose.yml file Here I changed the image to become unique for my flask and I changed the port to have 8089 to differentiate from my container vs my teamates conatainers . version: &#39;3&#39; services: web: image: flask_alex_v1 build: . ports: - &quot;8089:8080&quot; volumes: - persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/alex-flask/volumes . Here is my dockerfile! It is basically original except for the COPY .. . FROM docker.io/python:3.9 WORKDIR /app # [Install python and pip] RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git COPY . . RUN pip install --no-cache-dir -r requirements.txt RUN pip3 install gunicorn ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8080&quot; EXPOSE 8080 CMD [ &quot;gunicorn&quot;, &quot;main:app&quot; ] . Here is my nginx file for my flask! Here you can see my personal ports and the public ip that we put. . server { listen 8083; listen [::]:8083; server_name 18.216.138.52; location / { proxy_pass http://localhost:8089; add_header &quot;Access-Control-Allow-Origin&quot; *; } } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/AWSDeploymentpublic/",
            "relUrl": "/AWSDeploymentpublic/",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i +1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter z is the 26 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) for i in item.split(&quot; &quot;): for k,v in menu.items(): if i == k: total += v #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 4.96 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "College Board MC",
            "content": "Collaboration Quiz! . . One thing that I really liked about this quiz was how it emphasized the importance of having multiple perspectives In my own scrum team, we highly value collaboration and using multiple perspectives to solve problems and this is why I was able to relate to this quiz and it was a good review on the main ideas of working as groups! | . | . Program Function and Purpose Quiz! . . One Question that I have for this specific quiz is why the equal signs appear as arrows in the college board mcqs | I also really liked the nested loop question because it took a lot of time to understand it, however in the end I was able to see what the code was doing! | . Program Design and Development Quiz! . . I found the loop that outputs the odd numbers to be very good because it uses many loops to print out the numbers with the least amount of code blocks | I have the same question again with the arrows and why they don’t use equal signs | . Overall I think that these MCQS were good practice and helped me review over these main concepts! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/CollegeBoardMCQPRactice/",
            "relUrl": "/CollegeBoardMCQPRactice/",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Basketball Data Generator",
            "content": "NBA generator . This is a button that will randomly generate a name from a great player in the NBA | . Click Me! . . This is how it works: . var players = [&quot;Stephen Curry&quot; , &quot;LeBron James&quot;, &quot;Michael Jordan&quot;, &quot;Kareem Abdul-Jabbar&quot;, &quot;Kobe Bryant&quot;, &quot;Shaquille ONeal&quot;, &quot;Larry Bird&quot;, &quot;Wilt Chamberlain&quot;, &quot;Magic Johnson&quot;] var button = document.getElementById(&quot;1&quot;) var random2 = document.getElementById(&quot;random&quot;) button.onclick=function() { let random = players[Math.floor(Math.random()*players.length)]; random2.innerHTML = random } .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/Basketballdatagen/",
            "relUrl": "/Basketballdatagen/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Scrum Project",
            "content": "Main Goal . make a platform where people are able to share their goals and track their own progress as well as support their peers in keeping on track with their goals | . My role . I am apart of the backend whithing my scrum team, I will manage the code that takes care of tracking likes and comments. Storing the data and allowing everything to work together perfectly so the fromt end would have an easier job of simply making the page look nicer and easier to use. My job as the backend is to make sure all the text boxes would load correctly and store the data and to also make sure that all the links work in sync. | . End Result . We will hopefully end with a public website that will allow friends and family to communicate and post goals about their daily lives. This website will be nicely decorated and easy to use in order to ensure that the people can find success in their own goals. | . Here is a brainstorming picture . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/ScrumProjectbrainstorm",
            "relUrl": "/csp/ScrumProjectbrainstorm",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "HTML Fragments and Javascript kernel",
            "content": "// defines a function that outputs to the console the message function logt(output) { console.log(output); } // calls to the function logt(&quot;hi&quot;); . HTML fragments along with Javascript table . outputs the lakers roster along with the coach using javascript and html that uses json to convert the objects into strings to output into the table! | . // define a function to hold data for a Person function Person(name, height, age) { this.name = name; this.height = height; this.age = age; this.role = &quot;&quot;; } // Sets the role of the person Person.prototype.setRole = function(role) { this.role = role; } //Defines Coach var coach = new Person(&quot;Darwin Ham&quot;, &quot;6&#39;7&quot;, 48); coach.setRole(&quot;Coach&quot;); // JSON conversion that changes an object into a string Person.prototype.toJSON = function() { const obj = {name: this.name, height: this.height, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // data about players var players = [ new Person(&quot;Carmelo Anthony&quot;, &quot;6&#39;7&quot;, 38), new Person(&quot;Lebron James&quot;, &quot;6&#39;9&quot;, 37), new Person(&quot;Russel Westbrook&quot;, &quot;6&#39;3&quot;, 33), new Person(&quot;Dennis Shroder&quot;, &quot;6&#39;1&quot;, 29), new Person(&quot;Anthony Davis&quot;, &quot;6&#39;10&quot;, 29), new Person(&quot;Dwight Howard&quot;, &quot;6&#39;10&quot;, 36) ]; function Team(coach, players){ // 1 coach with a group of players to make a team // starts the list with the coach this.coach = coach; this.team = [coach]; // adding players to the array that we just made this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.team.push(player); }); // creates the json list of string by calling back to the function earlier this.json = []; this.team.forEach(player =&gt; this.json.push(player.toJSON())); } //defining the team var lakers = new Team(coach, players); // define an HTML conversion &quot;method&quot; associated with Classroom Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Height&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of lakers.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.height + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(lakers._toHtml()); . NameHeightAgeRole . Darwin Ham | 6&#39;7 | 48 | Coach | Carmelo Anthony | 6&#39;7 | 38 | Player | Lebron James | 6&#39;9 | 37 | Player | Russel Westbrook | 6&#39;3 | 33 | Player | Dennis Shroder | 6&#39;1 | 29 | Player | Anthony Davis | 6&#39;10 | 29 | Player | Dwight Howard | 6&#39;10 | 36 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/htmltablejavascript",
            "relUrl": "/csp/htmltablejavascript",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "HTML Fragments and Javascript kernel",
            "content": "// defines a function that outputs to the console the message function logt(output) { console.log(output); } // calls to the function logt(&quot;hi&quot;); . HTML fragments along with Javascript table . outputs the lakers roster along with the coach using javascript and html that uses json to convert the objects into strings to output into the table! | . // define a function to hold data for a Person function Person(name, height, age) { this.name = name; this.height = height; this.age = age; this.role = &quot;&quot;; } // Sets the role of the person Person.prototype.setRole = function(role) { this.role = role; } //Defines Coach var coach = new Person(&quot;Darwin Ham&quot;, &quot;6&#39;7&quot;, 48); coach.setRole(&quot;Coach&quot;); // JSON conversion that changes an object into a string Person.prototype.toJSON = function() { const obj = {name: this.name, height: this.height, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // data about players var players = [ new Person(&quot;Carmelo Anthony&quot;, &quot;6&#39;7&quot;, 38), new Person(&quot;Lebron James&quot;, &quot;6&#39;9&quot;, 37), new Person(&quot;Russel Westbrook&quot;, &quot;6&#39;3&quot;, 33), new Person(&quot;Dennis Shroder&quot;, &quot;6&#39;1&quot;, 29), new Person(&quot;Anthony Davis&quot;, &quot;6&#39;10&quot;, 29), new Person(&quot;Dwight Howard&quot;, &quot;6&#39;10&quot;, 36) ]; function Team(coach, players){ // 1 coach with a group of players to make a team // starts the list with the coach this.coach = coach; this.team = [coach]; // adding players to the array that we just made this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.team.push(player); }); // creates the json list of string by calling back to the function earlier this.json = []; this.team.forEach(player =&gt; this.json.push(player.toJSON())); } //defining the team var lakers = new Team(coach, players); // define an HTML conversion &quot;method&quot; associated with Classroom Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Height&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of lakers.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.height + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(lakers._toHtml()); .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/HtmlFragmentJavascriptKernel/",
            "relUrl": "/HtmlFragmentJavascriptKernel/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Good Life",
            "content": "Main Takeaway From Video: . Students have been dealing with stress, so extensive to the point where they aren’t able to enjoy and be productive. . As a group, my scrum team was able to put together this google form that assessed the mental health of students at Del Norte, to see how this problem is affecting students in our high school. . Example of one of our questions: . | This question goes over the stress levels in our school | The results are very bad in the sense that most students are dealing with extreme amounts of stress | . . This next question goes over anxiety which is hand in hand with stress | Our scrum team chose this question so it can emphasize the amount of pressure that the students are put under | . . This next question goes over homework and how much stress it puts onto the students | This shows the effect that school has on the students | . . This is another question that talks about the mental health of the students, most of the people that answered our survey responded by saying that they were feeling lonely. This is not good because being lonely is bad. | . Results . From this survey I was able to guage the mental health of the students in del norte and I was able to get a better understanding of how school affects the students. This was also a survey that allowed me to reflect off of the video of the Better life. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/TheGoodLife",
            "relUrl": "/csp/TheGoodLife",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Preformance Task Planning",
            "content": "Ideas for preformance Task . Basketball NBA statistics calculator and achievement record database that you can pull from. Purpose of this will to inform people on the most recent stats so they can easily have an uderstanding of what is going on in the league so far | . | NBA player ranking based off of data This will be very good for fantasy basketball, the purpose would be to give instant ratings based off of the player statics | . | What to wear based off of the weather app To inform people what to wear so they do not have to manually check the weather and think about what would be the best to wear | . | Informational page on track, teaching about certain events, embedded quizes and statistics Help new track and field athelets choose their evens and see what is good about each event. | . | . Things that I need to learn . I need to master using functions and creating them to manage the complexity of my project. Because if I were to do these complex apps such as data analytics, I would need to use many functions in order to make it run properly so I will not have to manually code everything over and over again . // example of a function that I could possibly use : something I learned making my quiz function nextQuestion() { if (quiz[question - 1].answers[selected - 1].correct) { correct++; } . In this code block there is a next question function that allows the user to go to the next question. This function parses through the list with all the data checking for the right answer, and if it is correct it will update the correct variable by 1. This saves a lot of time becaue it is an algorithm that is used very often in my code. This is something that I can possibly implement into my Preformance Task . Resources . Some resources that I can use is all the lecture notes and I can refer back the functions that I was able to make in my quiz. These functions that were created from the code blocks can provide the structure to making the algorithms that I will use in my preformance task. To start, I already have a good understanding of how to use javascript and use if statements and Onevent blocks. I can also ue my knowledge of variable to create the preformance task. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/PreformanceTaskPlanning",
            "relUrl": "/csp/PreformanceTaskPlanning",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Codeorg Blog",
            "content": "Link . Design Work . Me and Safin met up after school at Safin’s house, we were able to draw images and sketches using his ipad. We decided to do one screen and replace images with a 2x2 grid with images and text boxes to display the labels. We also finallized our page by putting a text box at the top that gives the question. We also planned out a score page that displays the percent accuracy which represents how many questions they were able to get right. We also planned out to do basketbal and tennis because basketball is my favorite sport and tennis is safins favorite sport . Purpose . The purpose of the app that we were able to create tests the user on the important knowledge about basketball and tennis. It also allows the user to understand how to play because there is a tutorial page. I sometimes have troubles remembering these important achievements that these players have made, and this quiz allows us to recall that information very easily. . Design . The design that me and Safin chose was to design our own quiz and eventually come together to make one app that accesses both of our quizzes. The way that We planned this was storing all of our quiz data into one list of dictionary respectively called Basketball and Tennis and we uploaded the lists into the same app. . Data abstraction . We created a huge list that contains dictionarys and whithin the dictionaries there were key and value pairs. Within the answer pair we put all of our answer choices which included pictures, names, and whether they were right or not. This list was easy to parse through and allowed us to use functions that went through these lists and created tests . Managing Complexity . In order to manage the complexity of this quiz, we were able to input many comments and use many functions to ensure that the code is very easy to follow. The comments allow us to communicate what we are doing with each function and what the purpose of the variables are. And the repeated use of the functions allow us to easily call back to a known function that we make and it communicated the purpose of the funciton without having the reader have to understand the code. . Procedural Abstraction . In order to apply the lists into the quiz, we used many functions. The overarching function was the function that called for the quiz and whithin the quiz function we were able to create many different functions. Some functions included changing the selected answer. Changing the pictures and labels as we the the quiz changes question. And another function we used was the finish function that changes the screen to the end and outputs score. . Algorithm implementations . We used many algorithms or functions to make the code more straight forward and less repetitive. Some of them are next question or finish quiz. This was important to our code because it allowed us to call back to that algorithm very easily without having to recode the whole thing over and over again. These algorithms made our code easier to understand and made it more efficent. . Testing . In order to test out our code, we used the console.log to test out what the code would output before implementing it into our code. This way we were able to see what input was given and how we can use that input to advance our quiz. The consol.log function was a very useful tool that went very well with the onEvent block because it allows us to easily detect for when input is given and it allows us to test new strategies and ideas without hurting out code . Challenges . Some challenges was formatting the quiz into the right list and dictionary so we could call to it. This was very tedious and very hard because and syntax errors in the large array stopped the whole code all togther. Another problem that came up and that the variables were not resetting after each function use. In order to solve this we had to make a new function that resets all the variables. . function finish() { setScreen(&quot;finishscreen&quot;); setProperty(&quot;score&quot;, &quot;text&quot;, correct + &quot;/3, which is &quot; + Math.floor((correct*1.0/3)*100) + &quot;%&quot;) onEvent(&quot;backbutton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;BegginingScreen&quot;); question = 1; correct = 0; selected = null; }); } . This javascript codeblock function allows us to manage our complexity and use an algorithm at the same time. This code block is the finish screen function that changes the screen, and it also outputs the score, to do this it it takes in the variable correct that was made earlier in the code and divides it by 3 and multiplies it by 100 to get a percent. Then it also has the back button inside of the function, so that if you click the button it sends you back to the beggining screen and it resets all the variables. This is a very usefull function because instead of having to say the entire code block over and over again, we can just call the function finish() . Successes . Some of our success came form the onEvent block because it was very easy to use and allowed us to save a lot of time without our code. This Onevent block led to us ultimately creating a working quiz that enabled me and safin to combine the quizes that we made. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/Codeorgblog",
            "relUrl": "/csp/Codeorgblog",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Time Box Fragments",
            "content": "Week link link   . 0 | Alex’s First Blog Post | Fastpages Notebook Blog Post | Extra info about myself! | . 1 | Bash Notes | Bash toolset validation | Jupyter Notebook quiz | . 2 | Lists, Dictionaries, Iteration | Time Box Fragments |   | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/WeeklyLog",
            "relUrl": "/csp/WeeklyLog",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDb with extra entries . Purpose of this cell is to define InfoDb and add entries about certain people and traits that they have . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . For loop to print out InfoDb . Purpose of this independent cell is to use a normal loop that goes through Infodb printint out all the entries. The for loop automates the process so we do not have to manually print out all the enries by hand. . for item in InfoDb: #print function that goes through and formats print(item[&quot;FirstName&quot;], item[&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, item[&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, item[&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, item[&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,item[&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . While loop to print out InfoDb . The purpose of this independent cell block is use a while loop to go print out InfoDb while a certain variable is less than the length of InfoDb. This allows us to print out the data without manually inputting the values to the console . #Sets number to the length of InfoDb number = len(InfoDb) #temporary variable i set to 0 i = 0 while i &lt; number: #while i is less than the number or the length of InfoDb, it prints out the data in InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) i+=1 . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . for loop with index to print out InfoDb . The purpose of this independent code cell is to use a for loop with an index that will go over all the data in infoDB without having to manually print out every single statement. The for loop will repeat the print function for every single entry in InfoDb . for i in range(len(InfoDb)): #prints out the items for every i in the InfoDb print(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], &quot; n&quot;, &quot; t&quot;, &quot;DOB:&quot;, InfoDb[i][&quot;DOB&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Residence:&quot;, InfoDb[i][&quot;Residence&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Email: &quot;, InfoDb[i][&quot;Email&quot;], &quot; n&quot;, &quot; t&quot;, &quot;Phone: &quot; ,InfoDb[i][&quot;Phone&quot;]) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Recursion to print out all of InfoDb . This recursion which utilizes a function to print out all the data in InfoDb is used to automate the printint process so we will not have to manually print out every single line. It uses a function that also uses embedded if statements that also calls itself at the end. This allows us to go over every single entry inside of InfoDb. . #sets variable n equal to the length of Info Db n = len(InfoDb) #function that checks to see if i is n, and if it is non, it will parse through InfoDb and print it out def output(i): if i == n: return #format string to output InfoDb in an organized foramt print(&quot;&quot;&quot;{} {} DOB: {} Residence: {} Email: {} Phone: {} &quot;&quot;&quot;.format(InfoDb[i][&quot;FirstName&quot;], InfoDb[i][&quot;LastName&quot;], InfoDb[i][&quot;DOB&quot;], InfoDb[i][&quot;Residence&quot;], InfoDb[i][&quot;Email&quot;], InfoDb[i][&quot;Phone&quot;])) #recalls the function output to go over every single person in InfoDb output(1+i) output(0) . samit poojary DOB: September 15 Residence: San Diego Email: samit.poojary@gmail.com Phone: iphone Safin Singh DOB: July 13 Residence: San Diego Email: safin.singh@gmail.com Phone: android Alex Kumar DOB: May 9 Residence: San Diego Email: alex.k.kumar@gmail.com Phone: iphone Maxie Kumar DOB: November 5 Residence: San Diego Email: maxie.kumar@gmail.com Phone: no phone . Outputting data in Reverse Order . Names_of_basketball_players = [&quot;Lebron James&quot;, &quot;Kobe Bryant&quot;, &quot;Chris Paul&quot;, &quot;Kevin Durant&quot;, &quot;Jason Tatum&quot;, &quot;Paul George&quot;, &quot;Kyrie Irving&quot;] #prints the list out in reverse order print(Names_of_basketball_players[::-1]) . [&#39;Kyrie Irving&#39;, &#39;Paul George&#39;, &#39;Jason Tatum&#39;, &#39;Kevin Durant&#39;, &#39;Chris Paul&#39;, &#39;Kobe Bryant&#39;, &#39;Lebron James&#39;] . Quiz That stores into a dictionary . The purpose of this code block is to test for basic animal trivia and it does this through multiple functions that stores the answers and questions in a dictionary. It calls back to the dictionary using for loops and then embedded whithin the for loops, it calls back to the function to print out the question and take input. . def question_and_answers(input): #function that prints out the question and takes in input print(&quot;Question: &quot; + input) correct = 0 #percent correct variable #dictionary with answers questions_answers = [{&quot;Whats the largest mammal&quot; : &quot;blue whale&quot;, &quot;whats the fastest animal&quot; : &quot;cheetah&quot;, &quot;what color is a flamingo&quot; : &quot;pink&quot;, &quot;Whats is the tallest animal&quot; : &quot;giraffe&quot;}] for i in questions_answers: for question, answer in i.items(): question_and_answers(question) # calls back to the questionanswer function response = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if response.lower() == answer: # if the answer provided is correct print(response, &quot;is correct&quot;) correct += 1 else: # if the answer provided is wrong print(response, &quot;is wrong&quot;) print(correct/4*100, &quot;%&quot;) #outputs the correct variable as a percentage . Question: Whats the largest mammal blue whale is correct Question: whats the fastest animal cheetah is correct Question: what color is a flamingo pink is correct Question: Whats is the tallest animal giraffe is correct 100.0 % .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/python_lists_dictionaries",
            "relUrl": "/csp/python_lists_dictionaries",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Basetball Data",
            "content": "Stats . This is a table that contains stats about my favorite players . Player Name Age Height wieght . Kevin Durant | 33 | 6’10 | 240 lb | . Stephen Curry | 34 | 6’2 | 185 lb | . Kyrie Irving | 30 | 6’2 | 195 lb | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BasketballData",
            "relUrl": "/csp/BasketballData",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Resume",
            "content": "Alex Kumar . 15489 Tanner Ridge Road, San Diego, CA 92127 . (858)-757-6371 . alex.k.kumar@gmail.com . Education . Del Norte High School (Junior) . 4.14 GPA . | Completed AP Calculus AB, AP Chemistry . Currently enrolled in AP Computer Science Principles, AP Physics, AP Calculus BC . | . | . Work Experience . Code Ninjas: Code Sensei (2022 - Present) . Led robotics camps, and guided students through the process of coding and engineering robots . | Used JavaScript, C#, Python, and Java to teach core computer science concepts . | . Extracurriculars . Soles In need: Treasurer (2022 - present) . Organize and plan meetings and keep track of funding and donations . Worked with team to collect hundreds of shoes to donate to those in need . | . | Engage audiences during school activities using public speaking skills . | . Del Norte Cultural Diversity Club: President (2021 - present) . Teaching and spreading knowledge about various cultures . | Public speaking to audiences to teach and create a better environment . | . STEM Enablers: Vice-President (2021 - Present) . Teach students topics like Chemistry and math . | Collect donations to distribute to other non-profits . | . Sports . Varsity Basketball (2021 - Present) . Volunteered to coach younger athletes . | Helped organize and coordinate team bonding events . | . Varsity Track and Field (2021 - Present) . Led the jumps team and got ranked regionally for triple jump and high jump . | . Skills . Excellent worker with Office 360 (Excel, PowerPoint, docs) . | Experience using various packages in python, including Pandas, NumPy, Matplotlib, TensorFlow, Scikit-Learn . | Knowledge in machine learning models, including artificial neural networks, K-Nearest-Neighbors, Linear regression, and logistic regression . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/09/02/Resume.html",
            "relUrl": "/2022/09/02/Resume.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Physic Notes",
            "content": "Purpose Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through a graphical method. In using graphical methods, we will learn about linearization and the use of it to create a mathematical model. . Procedure: . Find the radius of the discs with a ruler . | Find the mass of the discs using scale . | Graph the data on a non linear graph . | Record equation . | Change the axis and linearize graph . | Record graph and equations . | Height(mm) Mass(g) Radius   Radius Squared . 0.003125 cm | 0.69 g | 6.75 cm |   | 45.256 cm2 | . 0.003125 cm | 0.36 g | 5.25 cm |   | 27.5625 cm2 | . 0.003125 cm | 0.21g | 4.25 cm |   | 18.0625 cm2 | . 0.003125 cm | 0.13 g | 3.25 cm |   | 10.6525 cm2 | . 0.003125 cm | 0.06 g | 2.25 cm |   | 5.0625 cm2 | . Volume and mass increase proportionally (because the density is the same) so the only thing that is changing in this lab is the area which is piR2 so it is changing proportionally to r2. Since everything else is constant, we are able to ignore them and we are given a linear relationship between r2 and mass. . Graph #1 : Mass vs. Radius . Equation: 0.02547x^2- 0.091328x + 0.143184 . Graph #2: Linearization of Graph #1 (Mass vs radius2) . . Equation: 0.015585x -0.042943 . Work: . . Analysis Questions . 1. Considering the mathematical relationship between disk radius r and disk mass m . (equation 4), what does the independent variable from your line of best fit represent? . The independent variable from the line of best fit represents the radius of the aluminum disk because the mass is dependent on the radius therefore the radius is considered the independent variable . | . 2. Use the mathematical relationship between mass of the disk m and the disk’s . radius r to equate the coefficient values from your line of best fit to physical . quantities. What are the units for each? . . The slope represents the constants (density, pi, and height). In the equation that we made, the slope shows that mass and radius^2 are proportional. . 3. Should you adjust the best-fit line to be sure it passes through the origin, (0,0)? . Justify your answer. . No, you shouldn’t, because the y-intercept can help show that the data has an error, and moving it to fit (0,0) would hide the error and display false results. . 4. Using the slope of your best fit line and your measured value for disk thickness, . determine the experimental value for the disk material density. How does this value . compared to the theoretical value provided by your teacher? What is your percent . Error? . Theoretical density = 2.7 g/cm^3 . Percent difference = 42.8% . . 5. What are some of the factors that may have caused error and how might these . Factors have been prevented? . Some of the factors that may cause the error are manual and non digital measurement. For example the radius measurements and the thickness measurements. To prevent these human errors, we could use digital measurements to get the exact values. . Synthesis Questions: . In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . | The slope of the line of best fit would change because if the thickness increases, the mass would increase and in order for the equation to stay accurate, the slope will have to increase because mass is the dependent variable. The density would be the same because mass and the volume would still increase proportionally. . How would your graph of m versus r2 be different if you had used disks of the same thickness, but made out of steel? Draw a second line on your m versus r2 plot that represents disks made of steel. . | The line would be different because the slope would be different. The density of steel is 7.85 g/cm^3 however the density of aluminum is 2.7 g/cm^3. In this lab, the slope is pi*height*density and since the density is different by a factor of 2.5, the slope of the steel graph will be 2.5 times greater. . Aluminum equation/graph: 0.015585x -0.042943 . Steel equation/graph: 0.035067x-0.096621 . . 3. Another group of students has acquired data for the exact same experiment; . however, their disks are made of an unknown material that they are trying to . determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . . Multiple Choice questions: . 1. You perform the same experiment, but this time you plot a linear relationship . between mass and the circumference of the disks rather than the radius. What is the . slope of the linear plot? . E . 3. Consider an experiment in which a student measures the mass and diameter of 10 . different-sized spheres, all made of the same material of uniform density ρ. For this . student to create a linear graph relating the mass of the sphere to its radius r, the . student would need to plot mass m versus which quantity: . C . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/09/02/Physic-Notes.html",
            "relUrl": "/2022/09/02/Physic-Notes.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "HTML and markdown Fragments",
            "content": "Changing Theme from Minima to DarkMode . Some things that I noticed when changing the theme to darkmode was that I could not do it through the index.htmlm and I was forced to do it through the _sass file. . The entire background including the header and footer was changed to black ad the text was changed | the fonts where changed and the color changed to white | One thing that I had to come accross was the the fonts did not contrast well because it was just black and white and I did not really like that. | Another thing was that the font was different, although it was still legible I liked the old one better | the installation process of getting the themes in was creating a new folder in the _sass folder and putting the darkmode code it, and the process was very smooth | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/HTMLMarkdownFragments",
            "relUrl": "/csp/HTMLMarkdownFragments",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Resume",
            "content": "Alex Kumar . 15489 Tanner Ridge Road, San Diego, CA 92127 . (858)-757-6371 . alex.k.kumar@gmail.com . Education . Del Norte High School (Junior) . 4.14 GPA . | Completed AP Calculus AB, AP Chemistry . Currently enrolled in AP Computer Science Principles, AP Physics, AP Calculus BC . | . | . Work Experience . Code Ninjas: Code Sensei (2022 - Present) . Led robotics camps, and guided students through the process of coding and engineering robots . | Used JavaScript, C#, Python, and Java to teach core computer science concepts . | . Extracurriculars . Soles In need: Treasurer (2022 - present) . Organize and plan meetings and keep track of funding and donations . Worked with team to collect hundreds of shoes to donate to those in need . | . | Engage audiences during school activities using public speaking skills . | . Del Norte Cultural Diversity Club: President (2021 - present) . Teaching and spreading knowledge about various cultures . | Public speaking to audiences to teach and create a better environment . | . STEM Enablers: Vice-President (2021 - Present) . Teach students topics like Chemistry and math . | Collect donations to distribute to other non-profits . | . Sports . Varsity Basketball (2021 - Present) . Volunteered to coach younger athletes . | Helped organize and coordinate team bonding events . | . Varsity Track and Field (2021 - Present) . Led the jumps team and got ranked regionally for triple jump and high jump . | . Skills . Excellent worker with Office 360 (Excel, PowerPoint, docs) . | Experience using various packages in python, including Pandas, NumPy, Matplotlib, TensorFlow, Scikit-Learn . | Knowledge in machine learning models, including artificial neural networks, K-Nearest-Neighbors, Linear regression, and logistic regression . | .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/2022/08/26/Resume.html",
            "relUrl": "/2022/08/26/Resume.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Bash toolset validation",
            "content": "Automating gitfile cloning . export project_dir=$HOME/vscode export project=$project_dir/fastpages-APCSP export project_repo=&quot;https://github.com/AlexKumar19/fastpages-APCSP.git&quot; #checks for vscode directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists...creating directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Checks for the project repository clone, otherwise it clones if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Directory /home/alexkumar/vscode exists. Directory /home/alexkumar/vscode/fastpages-APCSP exists. . Python Version . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . TestForPackage(){ echo &quot;Test if $1 was downloaded via conda&quot; if conda list | grep -q $1; then echo &quot;There is $1&quot; else echo &quot;There is no $1&quot; fi } #Calls the function to test for packages TestForPackage &quot;jupyter&quot; TestForPackage &quot;nodejs&quot; . Test if jupyter was downloaded via conda There is jupyter Test if nodejs was downloaded via conda There is nodejs . Jupyter Checks . TestForKernellInstallation(){ #outputs test echo &quot;Test if $1 was installed&quot; #checks jupyter kernelspec list to find the called package if jupyter kernelspec list | grep -q $1; then echo &quot;There is $1&quot; else echo &quot;There is no $1&quot; fi } #calls the function for certain packages TestForKernellInstallation &quot;bash&quot; TestForKernellInstallation &quot;javascript&quot; TestForKernellInstallation &quot;python3&quot; . Test if bash was installed There is bash Test if javascript was installed There is javascript Test if python3 was installed There is python3 . conda list jupyter kernelspec list . # packages in environment at /home/alexkumar/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 Available kernels: bash /home/alexkumar/.local/share/jupyter/kernels/bash javascript /home/alexkumar/.local/share/jupyter/kernels/javascript python3 /home/alexkumar/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BashToolsetCheck",
            "relUrl": "/csp/BashToolsetCheck",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "APCSP Bash Notes 08/25/22",
            "content": "Bash . cd #cd stands for &quot;change directory&quot; cd vscode #goes to vscode directory Ls #tells the user the directory . Bash allows us to create scripts that can automatically download packages and navigate the terminal . Cloud . The cloud is up in the skies near the moon and it allows us to clone repositories down to our solid state drive. This allows us to edit the repositories on out own devices remotely. When you pull, you update your clone and when you push, it adds your changesinto the repository .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BashNotes",
            "relUrl": "/csp/BashNotes",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Blog Post Notes 08/24/22",
            "content": "Front Matter . Each markdown or jupyter post contains a set configurations at the head of the file known as Front-Matter. Front-matter settings can change many things including TOC, author, and you can also hide documents . &gt; Basics of Python quiz - toc:true - badges: true - author: Alex Kumar - comments: true - categories: [jupyter, csp] . This is an example of front matter and this will set the author, tags, and allow comments . _config.yml . lots of defautl settings can be changed whithin the repositories config file. This allows for pictures and description extensions. This allows for more customization. .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/BlogPostNotes",
            "relUrl": "/csp/BlogPostNotes",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Extra info about myself!",
            "content": "Extra info about myself: Hi my name is alex, and some things that I enjoy about school is going to my basketball practice, I enjoy doing ceramics, and I really love to go to physics class .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/aboutme/2022/08/22/Aboutme.html",
            "relUrl": "/markdown/aboutme/2022/08/22/Aboutme.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Python . Using python to pring &quot;Hello&quot; . print(&#39;Hello world, this is Alex Kumar&#39;) . Hello world, this is Alex Kumar . info =&#39;I like to play basketball and I also enjoy going to the gym&#39; print(&quot;Here are some things about me: &quot; + info) . Here are some things about me:I like to play basketball and I also enjoy going to the gym .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/jupyter/aboutme/2022/08/21/firstjuypternotebook.html",
            "relUrl": "/jupyter/aboutme/2022/08/21/firstjuypternotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Alex's first blog post!",
            "content": "Hello, my name is alex and this is a sample markdown post. I have many hobbies that I do in my free time: Playing basketball, track and field, going to the beach, and playing with my dog! .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/markdown/aboutme/2022/08/20/Post.html",
            "relUrl": "/markdown/aboutme/2022/08/20/Post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "HTML and markdown Fragments",
            "content": "Changing Theme from Minima to DarkMode . Some things that I noticed when changing the theme to darkmode was that I could not do it through the index.htmlm and I was forced to do it through the _sass file. . The entire background including the header and footer was changed to black ad the text was changed | the fonts where changed and the color changed to white | One thing that I had to come accross was the the fonts did not contrast well because it was just black and white and I did not really like that. | Another thing was that the font was different, although it was still legible I liked the old one better | the installation process of getting the themes in was creating a new folder in the _sass folder and putting the darkmode code it, and the process was very smooth | . .",
            "url": "https://alexkumar19.github.io/fastpages-APCSP/csp/HTMLMarkdownFragments",
            "relUrl": "/csp/HTMLMarkdownFragments",
            "date": " • Sep 2, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "notes",
          "content": "This page contains my notes from all classes, I use this page to go back to lectures or past presentations to review over important ideas so I can apply it to current problems! . Notes Table of Contents . Date subject link . 08/24/22 | CSP | Blog post and Markdown | . 08/25/22 | CSP | Bash lecture | . 08/25/22 | Physics | Physics Lab Notes | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "HTML and Javascript table",
          "content": "| HTML + JavaScript Table | NBA Generator | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/HTMLTable/",
          "relUrl": "/HTMLTable/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "API",
          "content": "link .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/APIpractice/",
          "relUrl": "/APIpractice/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alexkumar19.github.io/fastpages-APCSP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}